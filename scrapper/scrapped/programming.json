{"articles": [{"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*kAN6Rn4muAWKfxDrxlqg5Q.png"], "url": "https://medium.com/hackernoon/the-decline-of-stack-overflow-7cb69faa575d", "dateCreated": "2015-07-04T19:21:38.335Z", "datePublished": "2015-07-04T19:21:38.335Z", "dateModified": "2019-04-08T17:17:42.695Z", "headline": "The decline of Stack Overflow - HackerNoon.com - Medium", "name": "The decline of Stack Overflow - HackerNoon.com - Medium", "description": "Stack Overflow was created in 2008 by Jeff Atwood and Joel Spolsky, as a more open alternative to earlier Q&A sites such as Experts-Exchange. The name for the website was chosen by voting in April\u2026", "identifier": "7cb69faa575d", "author": {"@type": "Person", "name": "John Slegers", "url": "https://johnslegers.medium.com"}, "creator": ["John Slegers"], "publisher": {"@type": "Organization", "name": "HackerNoon.com", "url": "https://medium.com/hackernoon", "logo": {"@type": "ImageObject", "width": 417, "height": 60, "url": "https://miro.medium.com/max/834/1*_U3cyTY4DnQ5tvS93EBhiA.png"}}, "mainEntityOfPage": "https://medium.com/hackernoon/the-decline-of-stack-overflow-7cb69faa575d"}, "content": "<h1>The decline of Stack Overflow</h1><a></a><a>John Slegers</a><a>Jul 4, 2015</a><p>How trolls have taken over your favorite programming Q&A site</p><p>Stack Overflow was created in 2008 by Jeff Atwood and Joel Spolsky, as a more open alternative to earlier Q&A sites such as Experts-Exchange. The name for the website was chosen by voting in April 2008 by readers of Coding Horror, Atwood\u2019s popular programming blog.</p><p>For many years, Stack Overflow has been one of the most popular resources for programmers trying to solve a common problem. As questions on Stack Overflow were often among the first search results in any programming related Google search, users joined in large numbers and started asking their own questions.</p><p>As of July 2015, Stack Overflow has over 4,000,000 registered users and almost 10,000,000 questions (not counting deleted users and questions). However, a 2013 study has found that 77% of users only ask one question, 65% only answer one question, and only 8% of users answer more than 5 questions. With this article, I\u2019m exploring the likely reasons for that very, very low percentage.</p><h2>Stack Overflow hates new users</h2><p>New users feel especially unwelcome when joining Stack Overflow. To quote Jonah Bishop :</p><p>Stack Overflow has always been a better-than-average resource for finding answers to programming questions. In particular, I have found a number of helpful answers to really obscure questions on the site, many of which helped me get past a road block either at work or in my hobby programming. As such, I decided I\u2019d join the site to see if I could help out. Never before has a website given me a worse first impression.In an effort to keep the community as clean and orderly as possible, new users have very little rights from the get-go. On paper, this is a pretty nice idea. In practice, it makes it difficult for new users to gain any traction. I read through a number of questions today and had several comments for the original poster. Unfortunately, I couldn\u2019t make my comments, since new users cannot post comments on articles they themselves didn\u2019t write (you have to gain \u201creputation\u201d in order to gain that privilege). Posting my comment as an \u201canswer\u201d to the original question seemed like bad form, so I didn\u2019t do that.Looking elsewhere around the site, I found a few questions I felt I could answer. As soon as I went to answer said questions, someone else (in some cases, a number of other people) had jumped in and beaten me to the punch. I never had a chance to provide a helpful answer. Not only do you have to be very knowledgeable about a subject, you\u2019ve also got to be very fast in providing said answer. I eventually did provide an answer for a question, then realized that my approach wouldn\u2019t work. Before I could take action and modify the answer, my submission had already been modded down by several people, several of whom left snarky remarks. What a warm welcome for a new user! I subsequently deleted my answer.source</p><h2>Stack Overflow also hates most other users</h2><p>It\u2019s not just new users who experience a sense of hostility. Someone at Hacker News expressed a common experience for many programmers (experienced or not) when trying to participate on Stack Overflow.</p><p>When I first started programming, I could use SO without asking a question because everything I needed to know was fairly basic. It was great because many of the answers I came across helped me to understand more of the \u201cbroader universe\u201d of issues I would encounter during development, and so encouraged me to research and learn more about the language.Once I started asking questions, I was careful to respond to comments and accepted and upvoted the best answers. I wanted to be a good citizen of the community. And reciprocity was a part of that: eventually, I found myself able to respond to questions and I remember how great it felt to see the first +25 on my profile because someone accepted my answer.These days, if I ask a question it\u2019s because I\u2019ve spent a good amount of time on it and haven\u2019t been able to resolve it myself. Here\u2019s what happens when I ask a question on SO:1 \u2014 I ask the question, post the code, and the error message I\u2019m getting2 \u2014 Question downvoted3 \u2014 Respond to comment that says my question is a duplicate (it\u2019s not, which I clarify to avoid \u201cclosed as duplicate\u201d)4 \u2014 Respond to comment about a missing semicolon that got deleted when I was cutting/pasting/formatting my code. (Despite the error msg making it clear that the missing semicolon isn\u2019t the issue)5 \u2014 Question upvoted6 \u2014 An answer! Says that I need to read the docs and provides a link to a non-relevant section (I\u2019ve read the docs)7 \u2014 Finally, a helpful answer! Looks pretty good, so I test it out and it does the job. I accept and upvote the answer.8 \u2014 Notice a duplicate answer posted less than 1 minute after the accepted answer. Duplicate answer person complains that their entry was posted first. I advise them that the timestamp indicates the other poster was first and they reply that it is a time zone bug.9 \u2014 Later I check back and notice this message: \u201cQuestion closed as vague and cannot be answered\u201d10 \u2014 Check back one more time and see that someone has downvoted my question11 \u2014 Email the mods to get the downvote removedsource</p><p>Steven K Hicks gives 8 reasons for why he felt unable to participate in the community anymore, after having been a very active user for quite a while :</p><p>\u2014 The Eternal September Issue. Many new users of StackOverflow [SO] rarely ever follow the guidelines of the community. I\u2019m not sure how to solve this, but it is annoying to see questions posted as a plea for help. Stackoverflow moderates its self as a very terse question and answer site. It\u2019s not a discussion forum. [This is a crutch and a gift] Another issue with this is that duplicates show up despite the crotchety moderators complaining about it. One example of this is questions asking about where to find free stock quote data.\u2014 Questions that deal with software development that are not inherently technical are frequently down voted/closed. One example of this is that a question asking about a specific data set [for training/development purposes] was closed for the reason that it \u201cdidn\u2019t fit with the community.\u201d Until there is a dataset related StackExchange site that the question can be moved to, that was a perfectly acceptable development related question. By a \u201cStackExchange site that the question can be moved to\u201d I mean a fully functioning site, one not currently being \u201cdeveloped\u201d/on Area51. Closing the question as \u201cnot relevant\u201d does not help the author, nor does it help people that are looking for a similar dataset.\u2014 Down voting as a means of closing a question. To vote-to-close a question a user must have 250 reputation points. This does not take very long to get, if you participate in the community. Down voting should be a way of saying, this is either wrong information, misleading, or not helpful. If the user believes that the question should be closed, but does not have the reputation needed to close, then make a comment and give evidence on why you believe that this should be the case.\u2014 The down voting of correct, but not exact-answers. This gets to be an issue when there are questions that can have multiple answers. For an example: A question about optimization of a Java application, the common answer will be to use a more efficient algorithm. That answer will probably be the most voted answer. However, another valid answer is that the process could be rewritten in a more low-level language and connected to via a pipe [Socket, inproc, JNI, etc] to the main application. The latter is better suited for rather unique situations, but it is still a valid and workable answer. From my experience, the second answer will be downvoted, despite that it gave correct information. I have had a discussion with a moderator about this [Shog9] and, according to him, that strategy is a perfectly acceptable strategy to down-vote a creditable answer.\u2014 Timing/Duplicate answers. Since I have stopped participating in the community, I have not seen this as often. However, when there is a question posted there is frequently a rush of answers to be posted there. After some time, someone will post a duplicate answer, and get it to be voted on more than the original answer. This is harder to find, but it does happen and it\u2019s very frustrating.\u2014 Misattributing credit on answers: If there are other answers that assist you in answering the question, please cite those other authors. It is polite and it gives their question credibility. [Also those that you cite, you should vote for their answer as well].\u2014 This is another one of the odd cases on StackOverflow. A few of the \u201cExact Duplicate\u201d questions are not duplicates due to minor, but important, differences. I cannot come up with an example now, but commenters, frequently, are quick to claim that it is an exact duplicate without verifying the claim. Sometimes the accusation isn\u2019t backed up by evidence. Links to the other questions are sufficient evidence.\u2014 The value of reputation: After the global recalculation, the site\u2019s creators made a bold statement that participation is not valued on the site. The recalculation devalued questions, and the new policy was applied retroactively. This caused a loss of reputation. The creators of the site made a claim that \u201creputation was useless,\u201d which falls contrary to their claim that reputation is a \u201cvalue of how much the community trusts you.\u201d Operating on the prior claim would make a statement that a user with 500 reputation points is as valued as Jon Skeet. [A well known user in the community, and an author of many technical books]source</p><p>Is it any wonder, then, that many programmers who\u2019ve had an account on Stack Overflow for years are increasingly abandoning the platform?</p><h2>The reign of privileged trolls</h2><p>On a blog named Michael\u2019s Techbox, an anonymous commenter made the following remark:</p><p>The Stack Exchange websites are billed as a \u201cfree and open\u201d exchange of information, but in actuality these sites are overrun with a select few members who are just trying to score points, \u201cbadges\u201d, and moderator status in attempt to appear as \u201cexperts\u201d and gain freelance work.For example, check out this member\u2019s activity, which instead of contributing helpful technical answers, consists solely of acting like a judge on other people\u2019s answers:http://stackexchange.com/users/85265/andrew-barber?tab=activitysource</p><p>On a blog named The Programming Works, a similar sentiment was expressed :</p><p>I was saying in this post \u201cIf you have a programming question, StackOverflow is probably the best place to ask\u201d. It was when SO started some years ago; not now.Today your chances to get a useful answer to your question on SO are close to zero. Instead you get a lot of comments arguing for example that your question does not fit SO or wrongly worded or else and nothing useful.SO today is yet another trolls&noobs zoo.source</p><p>Both of these, I believe, illustrate the core problem with Stack Overflow. There are a handful of democratically-elected moderators who are supposed to follow some pretty-clearly worded guidelines about how to be good moderators. The site also has a much wider set of users with privileges:</p><ul><li>39,000 users with a reputation of 2000 or more can edit other people\u2019s questions.</li><li>26,000 users with a reputation of 3000 or more can vote to close questions. Five close votes puts a question \u201con hold\u201d.</li><li>6,900 users with a reputation of 10000 or more can delete questions.</li></ul><p>Of those thousands of privileged users, many rule their virtual fiefdoms like the pettiest of F\u00fchrers, imposing very arbitrary and poorly documented rules on their unsuspecting serfs, throwing fire and brimstone on whomever acts in a way incompatible with their irrational, ignorant notions of what qualifies as a good question / answer. And this, often without even reading the entire question / answer or having any expertise in a field relating to the question.</p><p>While I\u2019m writing this article, Jason Sachs (aka Jason S) is #503 in the list of users with the highest all time reputation, having earned himself a total of 70,688 reputation points. He is also one of the more well-respected users on Stack Overflow who decided to stop pouring his energy into the site. Inspired by a 1995 episode of Seinfeld, he calls these little F\u00fchrers \u201csoup nazis\u201d:</p><p>Seinfeld fans will recall the November 1995 episode, The Soup Nazi, in which the cast learns from Kramer about a shop that serves fantastic soups. It\u2019s run by an eccentric guy who has very strict standards about his patrons, and if they don\u2019t go through the proper ritual and supplications, he yells, No soup for you! and the cashier yanks it away before you can object.The problem with having strict standards of this type isn\u2019t the Soup Nazi himself, it\u2019s when this attitude spreads and it begins to pervade the larger community.source</p><p>Later, in the same article, Sashs provides quotes from several users of the site to further illustrate the problem. Take this question:</p><p>\u2026initially most questions you asked got a positive reception: happy comments and answers, people that tried to help you out regardless of the way you worded it. Of late the tendency is to simply close or put on hold most questions, or downvote them, or make fun of the writing or the style.source</p><p>\u2026 or this comment :</p><p>I find that people usually close or downvote questions right away if it\u2019s in any way subjective, and it only takes 5 people to consider your post subjective, even though the answer could be objective to 20 other people. The hive does not like that, and there will be no comments explaining why unless you ask. Just close, thank you, and come again.source</p><p>\u2026 or this comment :</p><p>Michael Richter does a good job of defining this attitude and its causes in his post on \u201cWhy I no longer contribute to StackOverflow\u201d \u2014 he calls the higher rep devs \u201cthe high school cool kids table\u201d http://michael.richter.name/blogs/why-i-no-longer-contribute-to-stackoverflowsource</p><p>\u2026 or this comment :</p><p>I think you hit it on the head with This site was meant to provide a canonical resource for programmers to find answers to their questions. Entire (and very good) books are begging to be written based on the content of the very best questions / answers posted here. Unfortunately they are getting drowned in a sea of drivel. The success of the site drives anyone with a programming question to it (so many hits on Google). This strains the system\u2019s capacity to self-moderate. It is almost as though there ought to be an \u201centrance exam\u201d before anyone can post a question.source</p><p>On his blog, Jeff Atwood, co-founder of Stack Overflow, explains the meaning of the word trolling:</p><p>[A] classic troll [can be described as follows:]1. He came to generate argument.2. He doesn\u2019t truly care about the topic.Some trolls can seem to care about a topic, because they hold extreme views on it, and will hold forth at great length on said topic, in excruciating detail, to anyone who will listen. For days. Weeks. Months. But this is an illusion.The most striking characteristic of the worst trolls is that their position on a given topic is absolutely written in stone, immutable, and they will defend said position to the death in the face of any criticism, evidence, or reason.source</p><p>Based on that definition, I would offer an alternative label for \u201csoup nazis\u201d or \u201cthe high school cool kids table\u201d: \u201coverprivileged trolls\u201d. Yes, you read that right. Not only is Stack Overflow plagued by overzealous trolls, but it is a community where the trolls are actually in charge. No wonder hostility and infantile behavior have become the very norm that define one\u2019s experiences at Stack Overflow! Clearly, no one is watching the watchmen.</p><a>Meta.StackOverflow</a><p>To make things even worse, the Stack Exchange network software automatically deletes questions that meet the following criteria:</p><ul><li>Closed more than 9 days ago</li><li>Not closed as a duplicate</li><li>Score <= 0</li><li>Not locked</li><li>No answers with a score > 0</li><li>No accepted answer</li><li>No pending reopen votes</li><li>No edits in the past 9 days</li></ul><p>The consequence thereof is that a lot of good questions not only get closed before anyone is able to respond, but that many of them end up vanishing into oblivion for eternity after merely 9 days.</p><h2>Are there any alternatives?</h2><p>Quora might seem like an obvious choice, but it shares many of the issues common at Stack Overflow, albeit in a less obvious manner. For example, downvoted answers are cleverly hidden from the eyes of most users and it\u2019s not uncommon for answers to be deleted without any explanation or notification and/or without a visible trace to anyone but the answer\u2019s author. Quora is giving some users completely anonymous powers to edit the site as they see fit, yet almost nobody seems to know about it.</p><p>So while Quora may seem more democratic and reasonable, this is really only at the surface. Trolling and plain petty authoritarianism from privileged users is no less common on that site. For many of the same reasons Huxley\u2019s dystopian A Brave New World is more creepy and disturing than Orwell\u2019s dystopian 1984, Quora is more creepy and more disturbing as a Q&A community than Stack Overflow.</p><p>At the very least, Stack Overflow doesn\u2019t care to hide its totalitarian nature to those who\u2019re willing to pay more than a few minutes of attention to the inner workings of the site. At the very least, the tyrants at Stack Overflow have a somewhat public face and have to give a public explanation when they decide to close a question. And perhaps even more important, Stack Overflow doesn\u2019t serve us countless idiotic questions like Does Sheryl Sandberg ever procrastinate? In spite of all of their flaws, its poor attempts at making its quality control community managed aren\u2019t nearly as bad as Quora\u2019s quality control.</p><p>Do you know of other alternatives? Please provide your suggestions in the comments section.</p><p>Related :</p><ul><li>My Love-Hate Relationship with Stack Overflow</li><li>Why I no Longer Contribute to StackOverflow</li><li>One Aspect of Stack Overflow I Hate and How to Fix it</li><li>Question quality is dropping on Stack Overflow</li><li>StackOverflow needs Tweaking</li><li>StackOverflow is Dead</li><li>StackOverflow Sucks</li><li>Why StackOverflow Sucks</li><li>This is Why StackOverflow Sucks</li><li>Why StackOverflow Sucks and Participating There is Impossible</li><li>Stack Overflow Hates New Users</li><li>Stackoverflow Is A Difficult Community to Participate In</li><li>Why Reddit is Better than Stack Overflow (WAAAAY Better)</li><li>Off-topic on Stackoverflow: that\u2019s enough</li></ul><a></a><a></a><a></a><p>Hacker Noon is how hackers start their afternoons. We\u2019re a part of the @AMI family. We are now accepting submissions and happy to discuss advertising & sponsorship opportunities.</p><p>If you enjoyed this story, we recommend reading our latest tech stories and trending tech stories. Until next time, don\u2019t take the realities of the world for granted!</p><a></a>", "tags": ["Programming", "Web Development", "Community", "Stackoverflow", "Geek"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*G2aXFFqqUane0d1Maw-fPw.png"], "url": "https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d", "dateCreated": "2015-11-19T18:38:00.000Z", "datePublished": "2015-11-19T18:38:00.000Z", "dateModified": "2018-06-20T16:49:46.073Z", "headline": "TIFU by using Math.random() - Betable Engineering - Medium", "name": "TIFU by using Math.random() - Betable Engineering - Medium", "description": "Like most good TIFUs this didn\u2019t happen today. It actually happened about two years ago. It is, however, still relevant. More significantly, it\u2019s not just me who screwed up. Math.random() in the V8\u2026", "identifier": "f1c308c4fd9d", "author": {"@type": "Person", "name": "Betable Engineering", "url": "https://medium.com/@betable"}, "creator": ["Betable Engineering"], "publisher": {"@type": "Organization", "name": "Medium", "url": "https://medium.com/", "logo": {"@type": "ImageObject", "width": 308, "height": 60, "url": "https://miro.medium.com/max/616/1*OMF3fSqH8t4xBJ9-6oZDZw.png"}}, "mainEntityOfPage": "https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d"}, "content": "<h1>TIFU by using Math.random()</h1><h2>By Betable CTO, Mike Malone</h2><a></a><a>Betable Engineering</a><a>Nov 19, 2015\u00b720 min read</a><p>Like most good TIFUs this didn\u2019t happen today. It actually happened about two years ago. It is, however, still relevant. More significantly, it\u2019s not just me who screwed up. Math.random() in the V8 Javascript engine is screwed up, too.</p><p>\u201cMany random number generators in use today are not very good. There is a tendency for people to avoid learning anything about such subroutines; quite often we find that some old method that is comparatively unsatisfactory has blindly been passed down from one programmer to another, and today\u2019s users have no understanding of its limitations.\u201d</p><p>\u2014 Donald Knuth; The Art of Computer Programming, Volume 2.</p><p>By the end of this post I\u2019m hoping we\u2019ll all agree on two things, one of which may be slightly more controversial than the other:</p><ul><li>We were stupid not to understand the limitations of V8\u2019s PRNG before using it, and CSPRNGs are a safer option if you\u2019re feeling lazy.</li><li>The implementation of Math.random() in V8 should be replaced. The current algorithm, which appears to have been passed down from one programmer to another, is comparatively unsatisfactory (and arguably completely broken) due to subtle, non-intuitive degenerate behavior that is likely to be encountered under realistic circumstances.</li></ul><p>For the record, I do want to say that I think V8 is a very impressive piece of software and the people who work on it are clearly very talented. This isn\u2019t an indictment of any of them. Rather, it\u2019s an illustration of how subtle some aspects of software development can be.</p><p>Now that we all know where we\u2019re headed, let\u2019s begin at the beginning.</p><p>Betable is built on random numbers. Aside from other more obvious uses we like using randomly generated identifiers. Our architecture is distributed and microservice-y, and random identifiers are easier to implement than sequential identifiers in this sort of system.</p><p>For example, we generate random request identifiers whenever we receive an API request. We thread these identifiers through to sub-requests in headers, log them, and use them to collate and correlate all of the things that happened, across all of our services, as a result of a single request.</p><p>Generating random identifiers isn\u2019t rocket science. There\u2019s only one requirement \u2014</p><p>It must be really, really unlikely that the same identifier will ever be generated twice, causing a collision.</p><p>And there are just two factors that impact the likelihood of a collision \u2014</p><ol><li>The size of the identifier space \u2014 the number of unique identifiers that are possible</li><li>The method of identifier generation \u2014 how an identifier is selected from the space of all possible identifiers</li></ol><p>Ideally we want a big identifier space from which identifiers are selected at random from a uniform distribution (henceforth, we\u2019ll assume that anything done \u201cat random\u201d uses a uniform distribution).</p><p>We did the birthday paradox math and settled on making our request identifiers 22 character words with each character drawn from a 64 character alphabet. They look like EB5iGydiUL0h4bRu1ZyRIi or HV2ZKGVJJklN0eH35IgNaB. Each character in the word has 64 possible values, there are 22 characters, so there are 64\u00b2\u00b2 such words. That makes the size of our identifier space 64\u00b2\u00b2 or ~2\u00b9\u00b3\u00b2.</p><p>With 2\u00b9\u00b3\u00b2 possible values, if identifiers were randomly generated at the rate of one million per second for the next 300 years the chance of a collision would be roughly 1 in six billion.</p><p>So we\u2019ve got a big enough identifier space, but how do we generate identifiers at random? The answer is a decent pseudo-random number generator (PRNG), a common feature of many standard libraries. The top of our API stack is a Node.js service (we also use a lot of Go, but that\u2019s another blog post). Node.js, in turn, uses the V8 Javascript engine that Google built for its Chrome web browser. All compliant ECMAScript (Javascript) implementations must implement Math.random(), which takes no arguments and returns a random number between 0 and 1. Good start.</p><p>So, given a sequence of pseudo-random numbers between 0 and 1 we need to generate a random word with characters from our 64 character alphabet. This is a pretty common problem, here\u2019s the pretty standard solution we chose \u2014</p><p>Before you start picking it apart, there\u2019s nothing wrong with this code \u2014 it does exactly what it\u2019s supposed to do.</p><p>We\u2019re in business. A procedure for producing random identifiers that is extremely unlikely to produce a collision, even if we\u2019re producing a million a second for 300 years. Test, commit, push, test, deploy.</p><p>The above code hit production and we forgot about it until a rather alarming email came through from a colleague, Nick Forte, telling us that the impossible had happened \u2014</p><p>\u201cAnyone who considers arithmetical methods of producing random digits is, of course, in a state of sin.\u201d John von Neumann was stating the obvious here \u2014 it\u2019s a simple tautology that deterministic methods, like arithmetic, cannot produce random bits. It\u2019s a contradiction in terms. So what is a PRNG?</p><h2>What is a PRNG?</h2><p>Let\u2019s ground our discussion by looking at a simple PRNG and the \u201crandom numbers\u201d it produces \u2014</p><p>This should make von Neumann\u2019s point clear \u2014 the sequence of numbers generated by this algorithm is obviously not random. For most purposes, this non-randomness doesn\u2019t really matter. What we really need is an algorithm that can generate a sequence of numbers that appear to be random (technically, they should appear to be independent and identically distributed random variables having a uniform distribution over the generator\u2019s range). In layman\u2019s terms, we should be able to safely pretend that the pseudo-random numbers are truly random numbers.</p><p>If it\u2019s hard to distinguish a generator\u2019s output from truly random sequences we call it a high quality generator. If it\u2019s easy, we call it a low quality generator.</p><p>For the most part, quality is determined empirically by pulling a bunch of numbers from the generator and running some statistical tests for randomness (e.g., by checking that there are an equal number of 0 bits and 1 bits, figuring out how many collisions there are, doing a Monte-Carlo estimation of pi, etc). Another, more pragmatic measure of PRNG quality is how well the algorithm actually works in practice as a stand-in for truly random numbers.</p><p>Apart from its non-randomness, our simple algorithm demonstrates another important characteristic of all PRNGs. If you keep pulling numbers, it will eventually start repeating the same sequence over again. This is called periodicity, and all PRNGs are periodic.</p><p>The period or cycle length of a PRNG is the length of the sequence of numbers that the PRNG generates before repeating.</p><p>You can think of a PRNG as a highly compressed codebook containing a sequence of numbers. The kind a spy might use as a one-time pad. The seed is the starting position in the book. Eventually, you\u2019ll loop around the end of the book and get back to where you started. That\u2019s a cycle.</p><p>A long cycle length doesn\u2019t guarantee high quality, but it helps. Often, cycle length can be guaranteed by mathematical proof. Even when we can\u2019t calculate cycle length exactly, we can determine an upper bound. Since a PRNG\u2019s next state and output are both deterministic functions of its current state, the cycle length cannot be larger than the number of possible states. To achieve this maximum cycle length the generator must enter every possible state before returning, again, to its current state.</p><p>If a PRNG\u2019s state has a k-bit representation, the cycle length is less than or equal to 2\u1d4f. A PRNG that actually achieves this maximum cycle length is called a full-cycle generator.</p><p>Good PRNGs are designed so that their cycle length is close to this upper bound. Otherwise you\u2019re wasting memory.</p><p>Let\u2019s go one step further and analyze the number of distinct random values that a PRNG can produce through some deterministic transformation on its output. For instance, consider the problem of generating triples of random values between 0 and 15, like (2, 13, 4) or (5, 12, 15). There are 16\u00b3 or 4096 such triples, but our simple PRNG can only produce 16 of them.</p><p>It turns out that this is another general characteristic of PRNGs \u2014</p><p>The number of distinct values that can be generated from a pseudo-random sequence is bounded by the sequence\u2019s cycle length.</p><p>The same holds regardless of the sort of value we\u2019re producing \u2014 we can only produce 16 distinct tuples of four values (or any other length), 16 distinct array shuffles, 16 random fuzz test values, etc. We will always only be able to generate 16 distinct values of any type. Ever.</p><p>Remember our algorithm for producing random identifiers? We randomly generated words consisting of 22 characters drawn from a 64 character alphabet. In other words, we generated tuples of 22 numbers between 0 and 63. It\u2019s the same problem, and the number of distinct identifiers we can produce is bounded by the size of the PRNG\u2019s internal state, and its cycle length, in the same way.</p><h2>Math.random()</h2><p>Back to our problem. In response to Nick\u2019s email about identifier collisions we quickly reviewed our birthday paradox math and checked our scaling code. We couldn\u2019t find anything wrong, so the problem had to be deeper. Armed with our general knowledge of PRNGs, let\u2019s start digging.</p><p>The ECMAScript standard says the following about Math.random() \u2014</p><p>Returns a Number value with positive sign, greater than or equal to 0 but less than 1, chosen randomly or pseudo randomly with approximately uniform distribution over that range, using an implementation-dependent algorithm or strategy.</p><p>The specification leaves a lot to be desired. First, it doesn\u2019t mention anything about precision. Since ECMAScript Numbers are IEEE 754 binary64 double-precision floats, we might expect 53-bit precision (i.e., random values taking the form x/2\u2075\u00b3 for all x in 0..2\u2075\u00b3-1). Mozilla\u2019s SpiderMonkey engine seems to agree but, as we\u2019ll soon find out, V8\u2019s Math.random() only has 32-bit precision (i.e., values taking the form x/2\u00b3\u00b2 for all x in 0..2\u00b3\u00b2-1). Good to know, but no matter, we only need six bits to produce a random letter from our 64 character alphabet.</p><p>What does matter for us is that the specification leaves the actual algorithm up to implementors. It has no minimum cycle length requirement, and is hand-wavy about the PRNG\u2019s quality \u2014 the distribution just needs to be \u201capproximately uniform.\u201d To do our analysis we need to know what algorithm V8 uses. It\u2019s nowhere to be found in any documentation, so let\u2019s go to the source.</p><h1>The V8 PRNG</h1><p>\u201cIwould have gone with mersenne twister since it is what everyone else uses (python, ruby, etc).\u201d This short critique, left by Dean McNamee, is the only substantive feedback on the code review of V8\u2019s PRNG when it was first committed on June 15, 2009. Dean\u2019s recommendation is the same one I\u2019ll eventually get around to making in this post.</p><p>V8\u2019s PRNG code has been tweaked and moved around over the past six years. It used to be native code, now it\u2019s in user-space, but the algorithm has remained essentially the same. The actual implementation uses internal API and is a bit obfuscated, so let\u2019s look at a more readable implementation of the same algorithm \u2014</p><p>Well, that\u2019s still pretty opaque, but let\u2019s slog through.</p><p>There is one more clue. A comment in older versions of the V8 source stated simply: \u201crandom number generator using George Marsaglia\u2019s MWC algorithm.\u201d A few minutes with Google teaches the following \u2014</p><ul><li>George Marsaglia was a mathematician who spent much of his career studying PRNGs. He also created the original Diehard battery of statistical tests for measuring the quality of a random number generator.</li><li>MWC stands for multiply-with-carry, a class of PRNGs that Marsaglia invented. MWC generators are very similar to classic linear congruential generators (LCGs) like our simple example from earlier (in fact, there is a one-to-one correspondence between MWCs and LCGs, see section 3.6 of this paper for details). Their advantage over standard LCGs is that they can produce sequences with longer cycle lengths with about the same number of CPU cycles.</li></ul><p>So if you\u2019re going to crib a PRNG off of someone, Marsaglia seems like a good choice, and MWC seems like a reasonable algorithm.</p><p>The V8 algorithm doesn\u2019t look like a typical MWC generator though. It turns out that\u2019s because the V8 algorithm is not an MWC generator. It\u2019s two MWC sub-generators \u2014 one on line 5, the other on line 6 \u2014 combined to produce one random number on line 9. I\u2019ll spare you the math, but each of the sub-generators have prime cycle lengths of about 2\u00b3\u2070, making the combined cycle length of the generated sequence about 2\u2076\u2070.</p><p>If you\u2019ll recall, we have 2\u00b9\u00b3\u00b2 possible identifiers, but now we know that V8\u2019s Math.random() can only produce 2\u2076\u2070 of them. Still, assuming a uniform distribution, the probability of collision after randomly generating 100,000,000 identifiers should be less than 0.4%. We started seeing collisions after generating far fewer identifiers than that. Something must be wrong with our analysis. The cycle length estimate is provably correct, so we must not have a uniform distribution \u2014 there must be some additional structure to the sequence being generated.</p><h2>A Tale of Two Generators</h2><p>Before returning to the V8 PRNG, let\u2019s look one more time at our random identifier generation code \u2014</p><p>The scaling method on line 6 is important. This is the method that MDN recommends for scaling a random number, and it\u2019s in widespread use in the wild. It\u2019s called the multiply-and-floor method, because that\u2019s what it does. It\u2019s also called the take-from-top method, because the lower bits of the random number are truncated, leaving the left-most or top bits as our scaled integer result. (Quick note: it\u2019s subtle, but in general this method is slightly biased if your scaled range doesn\u2019t evenly divide your PRNG\u2019s output range. A general solution should use rejection sampling like this, which is part of the standard library in other languages.)</p><p>Do you see the problem yet? What\u2019s weird about the V8 algorithm is how the two generators are mixed. It doesn\u2019t xor the numbers from the two streams together. Instead, it simply concatenates the lower 16 bits of output from the two sub-generators. This turns out to be a critical flaw. When we multiply Math.random() by 64 and floor it we end up with the left-most, or top 6 bits of the number. These top 6 bits come exclusively from the first of the two MWC sub-generators.</p><p>If we analyze the first sub-generator independently we see that it has 32 bits of internal state. It\u2019s not a full-cycle generator \u2014 its actual cycle length is about 590 million (18,030*2\u00b9\u2075-1, the math is tricky but it\u2019s explained here and here, or you can just trust me). So we can only produce a maximum of 590 million distinct request identifiers with this generator. If they were randomly selected there would be a 50% chance of collision after generating just 30,000 identifiers.</p><p>If that were true, we should have started seeing collisions almost immediately. To understand why we didn\u2019t, recall our simple example where we pulled triples from a 4 bit LCG. Birthday paradox math doesn\u2019t apply \u2014 for this application the sequence is nowhere near random, so we can\u2019t pretend it is. It\u2019s clear that we won\u2019t produce a duplicate until the 17th triple. The same thing is happening with the V8 PRNG and our random identifiers \u2014 under certain conditions, the PRNG\u2019s lack of randomness is making it less likely that we\u2019ll see a collision.</p><p>In this case the generator\u2019s determinism worked in our favor, but that\u2019s not always true. The general lesson here is that, even for a high quality PRNG, you can\u2019t assume a random distribution unless the generator\u2019s cycle length is much larger than the number of random values you\u2019re generating. A good general heuristic is \u2014</p><p>If you need to use n random values you need a PRNG with a cycle length of at least n\u00b2.</p><p>The reason is that, within a PRNGs period, excessive regularity can cause poor performance on some important statistical tests (in particular, collision tests). To perform well, the sample size n must be proportional to the square root of the period length. Page 22 of Pierre L\u2019Ecuyer\u2019s excellent chapter on random number generation has more detail.</p><p>For a use case like ours, where we\u2019re trying to generate unique values using multiple independent sequences from the same generator, we\u2019re less concerned about statistical randomness and more concerned that the sequences not overlap. If we have n sequences of length l from a generator with period p, the probability of an overlap is [1-(nl)/(p-1)]\u207f\u207b \u00b9, or approximately ln\u00b2/p for a big enough p (see here and here for details). The point is we need a long cycle length. Otherwise we\u2019re making a mistake pretending our sequence is random.</p><p>Long story short, if you\u2019re using Math.random() in V8 and you need a sequence of random numbers that\u2019s reasonably high quality, you shouldn\u2019t use more than about 24,000 numbers. If you\u2019re generating multiple streams of any substantial size and don\u2019t want any overlap, you shouldn\u2019t use Math.random() at all.</p><p>If the algorithm that V8\u2019s Math.random() uses is poor quality, you might be wondering how it was chosen at all. Let\u2019s see if we can find out.</p><h2>A Brief History of MWC1616</h2><p>\u201cThe MWC generator concatenates two 16-bit multiply-with-carry generators [\u2026] has period about 2\u2076\u2070 and seems to pass all tests of randomness. A favorite stand-alone generator \u2014 faster than KISS, which contains it.\u201d That\u2019s the extent of Marsaglia\u2019s analysis of MWC1616, which is the name of the algorithm that powers V8\u2019s Math.random(). If you take him at his word, the algorithm ticks the box for most of the important criteria you\u2019d consider in choosing a PRNG.</p><p>MWC1616 was first introduced by Marsaglia in 1997 as a simple general purpose generator that, in his words, \u201cseems to pass all tests of randomness put to it,\u201d a comment that betrays Marsaglia\u2019s largely empirical methodology. He seems to have trusted an algorithm if it passed his Diehard tests. Unfortunately, the Diehard tests he was using in the late 1990s weren\u2019t that good, at least by today\u2019s standards. If you run MWC1616 through a more modern empirical testing framework like TestU01's SmallCrush it fails catastrophically (it does even worse than the MINSTD generator, which was outdated even in the 1990s, but Marsaglia\u2019s Diehard tests probably didn\u2019t have the granularity to tell him that).</p><p>As far as I know, there\u2019s no mathematical basis for combining sub-generators the way MWC1616 does \u2014 concatenating subsets of the generated bits. It\u2019s more typical to see bits from sub-generators mixed using some form of modulo arithmetic (e.g., addition modulo 2\u00b3\u00b2, or xor). It appears that Marsaglia, himself, became aware of this deficiency shortly after posting MWC1616 on Usenet as a component of one version of his KISS generator. On January 12, 1999, Marsaglia posted the version of MWC1616 used in V8. Eight days later, on January 20, he posted a different version of the algorithm. It\u2019s subtle, but in the updated version, the upper bits of the second generator are not masked away, mixing bits from the two sequences more thoroughly.</p><p>Both versions of the algorithm appear in other places, adding to the confusion. The January 20 version of MWC1616 (i.e., the better version) is in Numerical Recipes, labeled MWC with Base b = 2\u00b9\u2076, under the heading When You Have Only 32-Bit Arithmetic, and only after first advising that, rather than implementing one of the algorithms listed, you should \u201cget a better compiler!\u201d Pretty discouraging words for an algorithm that\u2019s better than what V8 has powering Math.random(). Rather inexplicably (because it\u2019s so obscure) the January 20 version of MWC1616 is also given as an example computational method in Wikipedia\u2019s article on random number generation. Implementations of the older January 12 version are included in TestU01 twice, once labeled MWC1616 and a second time labeled MWC97R. It\u2019s also one of the generators available in R (apparently it used to be the default).</p><p>So there are lots of places the algorithm can be found. It was obscure to me, but given the bona fides listed above I guess it\u2019s not surprising it was chosen. Hopefully this article will serve as a warning, strengthening and confirming Knuth\u2019s observation that kicked off this post \u2014</p><ul><li>In general, PRNGs are subtle and you should do your own analysis and understand the limitations of any algorithm you\u2019re implementing or using</li><li>Specifically, don\u2019t use MWC1616, it\u2019s not very good</li></ul><p>There are lots of better options. Let\u2019s look at a couple of them.</p><h2>The CSPRNG Workaround</h2><p>To fix our identifier code we needed a replacement for Math.random() and we needed it fast. Lots of alternative PRNG implementations exist for Javascript, but we were looking for something that \u2014</p><ul><li>Has a long enough period to generate all of our 2\u00b9\u00b3\u00b2 identifiers</li><li>Is well supported and battle tested</li></ul><p>Luckily, the Node.js standard library has another PRNG that meets both requirements: crypto.randomBytes(), a cryptographically secure PRNG (CSPRNG) that calls OpenSSL\u2019s RAND_bytes (which, according to the docs, produces a random number by generating the SHA-1 hash of 8184 bits of internal state, which it regularly reseeds from various entropy sources). If you\u2019re in a web browser crypto.getRandomValues() should do the same job.</p><p>This isn\u2019t a perfect general solution for three reasons \u2014</p><ul><li>CSPRNGs almost always use non-linear transformations and are generally slower than non-cryptographic alternatives</li><li>Many CSPRNG systems are not seed-able, which makes it impossible to create a reproducible sequence of values (e.g., for testing)</li><li>CSPRNGs emphasize unpredictability over all other measures of quality, some of which might be more important for your use case</li></ul><p>However \u2014</p><ul><li>Speed is relative, and CSPRNGs are fast enough for most use cases (I can get about 100MB/s of random data from crypto.getRandomValues() in Chrome on my machine)</li><li>In the limit, unpredictability implies an inability to distinguish the generator\u2019s output from true randomness, which implies everything else we want out of a pseudo-random sequence</li><li>It\u2019s likely that a generator advertised as \u201ccryptographically secure\u201d has been carefully code reviewed and subjected to many empirical tests of randomness</li></ul><p>We\u2019re still making some assumptions, but they are evidence-based and pragmatic. If you\u2019re unsure about the quality of your non-cryptographic alternatives, and unless you need deterministic seeding or require rigorous proofs of quality measures, using a CSPRNG is your best option. If you don\u2019t trust your standard library\u2019s CSPRNG (and you shouldn\u2019t for cryptographic purposes) the right solution is to use urandom, which is managed by the kernel (Linux uses a scheme similar to OpenSSL\u2019s, OS X uses Bruce Schneier\u2019s Yarrow generator).</p><p>I can\u2019t tell you the exact cycle length of crypto.randomBytes() because as far as I know there\u2019s no closed form solution to that problem (i.e., no one knows). All I can say is that with a large state space and a continuous stream of new entropy coming in, it should be safe. If you trust OpenSSL to generate your public/private key pairs then it doesn\u2019t make much sense not to trust it here. Empirically, once we swapped our call to Math.random() with a call to crypto.randomBytes() our collision problem went away.</p><p>In fact, Chrome could just have Math.random() call the same CSPRNG they\u2019re using for crypto.randomBytes(), which appears to be what Webkit is doing. That said, there are lots of fast, high quality non-cryptographic alternatives, too. Let\u2019s put a final nail in the MWC1616 coffin and take a look at some other options.</p><h2>V8\u2019s PRNG is Comparatively Unsatisfactory</h2><p>My goal was to convince you that V8\u2019s Math.random() is broken, and should be replaced. So far we\u2019ve found obvious structural patterns in its output bits, catastrophic failure on empirical tests, and poor performance in the real world. If you still want more evidence, here are some pretty pictures that might sway you \u2014</p><a>this code.</a><a>this code</a><p>Hopefully you\u2019ll agree at this point that V8\u2019s Math.random() is comparatively unsatisfactory and should be fixed. The question is how should it be fixed? A one line patch would improve the bit-mixing, but I can\u2019t see any reason to keep MWC1616 at all. There are better options.</p><p>A detailed comparison of the myriad existing methods for producing pseudo-random bits is going to have to wait for another post. Roughly, though, the requirements we\u2019re looking for are \u2014</p><ul><li>A large state space, and a large seed \u2014 ideally at least 1024 bits, since this will be an upper bound on other qualities of the generator. A state space of 2\u00b9\u2070\u00b2\u2074 is enough for 99.9% of use cases, with a significant safety factor.</li><li>Speed, let\u2019s make it at least as fast as the current implementation which produces around 25 million numbers per second on my machine.</li><li>Memory efficiency \u2014 we\u2019ll probably need at least 256 bytes for a generator with 1024 bits of state in user-space Javascript (we can only use 32 bits per 64 bit Number), if that\u2019s infeasible there are workarounds, but I\u2019m going to assume we can afford this.</li><li>A very long period, a full cycle generator is great but anything over 2\u2075\u2070 should be sufficient to avoid cycling. Anything over 2\u00b9\u2070\u2070 should let us safely pull 2\u2075\u2070 values while continuing to pretend we\u2019ve got a random sequence.</li><li>At a minimum, passing marks on empirical tests of randomness like TestU01's SmallCrush \u2014 extra credit for passing marks on BigCrush and good equidistribution (which, unfortunately, I don\u2019t have room to explain). TestU01 is more rigorous than Dieharder, and I don\u2019t know much about the NIST tests or rngtest, but those might work too.</li></ul><p>There are many PRNG algorithms that meet or exceed these requirements. Xorshift generators (also discovered by Marsaglia) are fast and do very well on statistical tests (much better than MWC1616). An xorshift variant called xorgens4096 has been implemented in Javascript by David Bau. It has a 4096-bit state space, a cycle length of ~2\u2074\u2070\u2079\u2076, and it runs faster than MWC1616 in Chrome on my machine. Moreover, it has no systematic failures on BigCrush.</p><p>Recently it\u2019s been shown that taking the output of an xorshift generator and multiplying by a constant is a sufficient non-linear transformation for the generator to pass BigCrush. This class of generators, called xorshift*, is very fast, easy to implement, and memory efficient. The xorshift1024* generator meets or exceeds all of our requirements. If the memory premium turns out to be a real problem, the xorshift64* generator has the same memory footprint, a longer cycle length, and is faster than MWC1616, beating it on all counts. Another new family of linear/non-linear hybrid generator called PCG claims similar performance and quality characteristics.</p><p>So there are lots of good algorithms to chose from. That said, the safest choice is probably a standard Mersenne Twister. The most popular variant, MT19937, was introduced in the late 90s. Since then it\u2019s become the standard generator in dozens of software packages. It\u2019s not perfect, but it has been battle tested and thoroughly analyzed. Its properties are well understood, and it does well on empirical tests. With an ostentatiously long cycle length of 2\u00b9\u2079\u2079\u00b3\u2077-1 it\u2019s hard to misuse, but it does have an imposing 2KB state space and is criticized for its memory footprint and relatively poor performance. A quick search uncovered an existing Javascript implementation, by Sean McCullough. Inexplicably, it\u2019s as fast as the existing Math.random() implementation in Chrome on my machine.</p><p>So my advice is that V8 reconsider Dean McNamee\u2019s comment from six years ago and use the Mersenne Twister algorithm. It\u2019s fast enough, and robust enough to be safely used by developers who don\u2019t have a deep understanding of how PRNGs work. A more exotic alternative is fine too. Just get rid of MWC1616, please!</p><h1>In Summary</h1><p>This was a long post, so let me re-cap the important bits \u2014</p><ul><li>The PRNG algorithm behind V8\u2019s Math.random() is called MWC1616. If you\u2019re only using the most significant 16 bits it has a very short effective cycle length (less than 2\u00b3\u2070). In general, it does poorly on empirical tests of quality. For most non-trivial use cases it\u2019s not safe to pretend that it\u2019s output is truly random. Be careful using it for anything you care about.</li><li>Cryptographically secure PRNGs are a better option if you don\u2019t have time to do proper diligence on non-cryptographic alternatives. The safest option (and the right solution for crypto) is to use urandom. In browser you can use crypto.getRandomValues().</li><li>There are options for non-cryptographic PRNG algorithms that are faster and higher quality than MWC1616. V8 should replace its Math.random() implementation with one of them. There are no losers. Mersenne Twister (MT19937) is the most popular, and probably the safest choice.</li></ul><p>I\u2019ll note, in passing, that Mozilla\u2019s use of the LCG from Java\u2019s util.Random package isn\u2019t much better than MWC1616. So SpiderMonkey should probably go ahead and upgrade too.</p><p>In the meantime, the browser continues to be a confusing and dangerous place. Be safe out there!</p><p>Special thanks to Nick Forte, who discovered the collision bug in our production code, Wade Simmons, who originally tracked the problem down to V8\u2019s Math.random() implementation, and the entire Betable Engineering team, who put up with me ranting about random numbers for two weeks while I wrote this post.</p>", "tags": ["Programming", "JavaScript", "Computer Science"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*YnF7hY2ymS54iTNLuxVT8A.jpeg"], "url": "https://blog.plan99.net/why-kotlin-is-my-next-programming-language-c25c001e26e3", "dateCreated": "2015-07-06T22:39:41.191Z", "datePublished": "2015-07-06T22:39:41.191Z", "dateModified": "2019-05-04T16:20:57.421Z", "headline": "Why Kotlin is my next programming language - Mike\u2019s blog", "name": "Why Kotlin is my next programming language - Mike\u2019s blog", "description": "Kotlin is a new programming language from JetBrains, the maker of the world\u2019s best IDEs. After much searching, I have settled on it as the programming language I will probably use for the next 5\u201310\u2026", "identifier": "c25c001e26e3", "author": {"@type": "Person", "name": "Mike Hearn", "url": "https://blog.plan99.net/@octskyward"}, "creator": ["Mike Hearn"], "publisher": {"@type": "Organization", "name": "Mike\u2019s blog", "url": "blog.plan99.net", "logo": {"@type": "ImageObject", "width": 308, "height": 60, "url": "https://miro.medium.com/max/616/1*OMF3fSqH8t4xBJ9-6oZDZw.png"}}, "mainEntityOfPage": "https://blog.plan99.net/why-kotlin-is-my-next-programming-language-c25c001e26e3"}, "content": "<h1>Why Kotlin is my next programming language</h1><h2>An ode to the language you\u2019ve never heard of</h2><a></a><a>Mike Hearn</a><a>Follow</a><a>Jul 6, 2015</a><a></a><p>Kotlin is a new programming language from JetBrains, the maker of the world\u2019s best IDEs. After much searching, I have settled on it as the programming language I will probably use for the next 5\u201310 years or so.</p><p>I like Kotlin a lot and think it will be a very successful project. Someone who saw me using it in my open source work asked me to write about it, so in this article I\u2019ll explain why I think Kotlin is good. Then I will discuss some of the problems and hiccups you may encounter if you start using it today. Finally, I\u2019ll argue that now Kotlin is on the scene you should consider using the JVM if you aren\u2019t already (e.g. because you use Go or Node).</p><h1>Why Kotlin is good</h1><p>At first this article may seem strange: normally language advocacy articles start by listing all the cool features the new language has. This article does not; we will get to them later.</p><p>I am going to start by telling you about other things, because a 2013 study showed that language features matter little compared to ecosystem issues when developers evaluate programming languages. That tallies with my own experience, so, here we go:</p><p>Kotlin compiles to JVM bytecode or JavaScript. It is not a language you will write a kernel in. It is of greatest interest to people who work with Java today, although it could appeal to all programmers who use a garbage collected runtime, including people who currently use Scala, Go, Python, Ruby and JavaScript.</p><p>Kotlin comes from industry, not academia. It solves problems faced by working programmers today. As an example, the type system helps you avoid null pointer exceptions. Research languages tend to just not have null at all, but this is of no use to people working with large codebases and APIs which do.</p><p>Kotlin costs nothing to adopt! It\u2019s open source, but that\u2019s not what I mean here. What I mean is there\u2019s a high quality, one-click Java to Kotlin converter tool, and a strong focus on Java binary compatibility. You can convert an existing Java project one file at a time and everything will still compile, even for complex programs that run to millions of lines of code. This is how I am adopting Kotlin and I expect it to be how most developers do.</p><p>As an obvious implication of the above, Kotlin programs can use all existing Java frameworks and libraries, even advanced frameworks that rely on annotation processing. The interop is seamless and does not require wrappers or adapter layers. It integrates with Maven, Gradle and other build systems.</p><p>It is approachable and it can be learned in a few hours by simply reading the language reference. The syntax is lean and intuitive. Kotlin looks a lot like Scala, but is simpler. The language balances terseness and readability well.</p><p>It enforces no particular philosophy of programming, such as overly functional or OOP styling.</p><p>It imposes no runtime overhead. The standard library is small and tight: it consists mostly of focused extensions to the Java standard library. Heavy use of compile-time inlining means functional constructs like pipelines of map/filter/reduce compile similarly to an imperative version of the same code.</p><p>Combined with the appearance of frameworks like Anko and Kovenant, this resource lightness means Kotlin is starting to become popular with Android developers. If you\u2019re working on Android, you will soon be in good company. You can read a report written by a developer at Square on their experience with Kotlin and Android.</p><p>Kotlin allows you to keep using your productivity enhancing tools. If you use IntelliJ, IDE interop is entirely seamless: code can be refactored, searched, navigated and auto completed as if the Kotlin code was Java and vice-versa. There is full support for debugging, unit testing, profiling and so on.</p><p>Beyond Android, I think Kotlin is highly suitable for enterprise Java shops. If you spend all day working on big Java codebases at even bigger companies, you should investigate Kotlin because:</p><ul><li>It has strong commercial support from an established company. JetBrains is committed to the project, has a large and highly competent team working on it, has a stable business model and is even converting parts of their own flagship product to use it. Kotlin is unlikely to be abandoned any time soon.</li><li>Adopting Kotlin is low risk: it can be trialled in a small part of your code base by one or two enthusiastic team members without disrupting the rest of your project: Kotlin classes export a Java API that looks identical to that of regular Java code.</li><li>Because Kotlin focuses on readable syntax, code reviews are not a problem: they can still be done by team members who aren\u2019t familiar with the language.</li><li>It targets Java 6, so you can use it even if your deployment makes upgrading to a newer JVM difficult.</li></ul><p>Earlier this year I presented Kotlin to a team of Java and .NET architects at Swiss Re, a large reinsurance company. I started by defining a simple Java class with a few fields, toString, equals, hashCode etc. It was about 50 lines of code. By the time we had finished converting it to Kotlin (mostly automatically), it had shrunk to just one line of code. I then demoed other time saving features. They were enthusiastic and saw it as a potentially strong competitor to C# for their own projects.</p><p>I think Kotlin hits the sweet spot for enterprise Java devs, so even though Kotlin is free I expect JetBrains to make a killing from increased sales of the commercial version of their IDE. This will incentivise them to keep improving it according to the wishes of their customers.</p><p>Contrast this with many other language developers who are subsidised by unrelated products, meaning they have little reason to respond to the demands of their users when those demands conflict with pre-held ideologies.</p><h1>Features</h1><p>Kotlin stands out in a sea of new programming languages because of its focus on the ecosystem: JetBrains understand that productivity comes from more than convenient syntax.</p><p>Despite that, Kotlin has many useful features that make writing code in it pleasant:</p><ul><li>We already mentioned null safety (optionality), that lets the compiler systematically flag potential null pointer dereferences. Unlike some languages, this does not involve an option type and is therefore zero-overhead. Other language features ensure it\u2019s not inconvenient.</li><li>Lean syntax: type inference works everywhere, one liner functions take one line, simple structs/JavaBeans can also be declared in one line. Real properties generate getFoo/setFoo methods behind the scenes for Java interop. Functions can exist outside of classes.</li><li>Exceptions are unchecked.</li><li>Adding the data annotation to a class triggers autogeneration of boilerplate like equals, hashCode, toString, a copy method and variable spreading support (destructuring). This gives you convenient immutable classes without the need for builders.</li><li>But if you do need to construct complex structures, a clever intersection of language features makes builders clean and type safe (read: auto-completable). If you use Google Protocol Buffers to store structured data, that gets easier too.</li><li>Functional programming support with zero-overhead lambdas and ability to do mapping, folding etc over standard Java collections. The Kotlin type system distinguishes between mutable and immutable views over collections.</li><li>Extension functions let you add methods to classes without modifying their source code. This looks at first like a superficial bit of syntax sugar to avoid FooUtils style classes. Then you realise that doing it this way enables you to easily discover the new methods via auto-completion, lets you build powerful language extensions and lets you integrate existing Java APIs with other Kotlin features. Features like \u2026</li><li>Operator overloading. But the good kind: no Scala / Perl style line noise here. Operators map to special method names, so can override the behaviour of the existing operators (including function invocation), but you cannot define entirely new ones. This strikes a balance between power and readability.</li><li>Kotlin does not have macros or other ways to redefine the language, but a collection of carefully designed features allow for libraries that act like language extensions far more than they act like collections of objects. A good example: would you like to use fibers, actors, and Go-style channels? A library called Quasar has you covered.</li><li>Markdown instead of HTML for your API docs. This makes writing JavaDocs much more pleasant. The \u201cDokka\u201d tool, which is the equivalent of JavaDoc, can read both Kotlin and Java source code and generate combined doc websites, both with its own style and also in the standard JavaDoc HTML style.</li><li>Better generics. If you never fully got to grips with what exactly super and extends mean when put inside a type variable, don\u2019t worry: it\u2019s not you. Java\u2019s generics really are just confusing. Kotlin fixes it.</li><li>Delegation (forwarding methods) can be done automatically.</li><li>The == operator does what you actually expect.</li><li>Would you like fast and convenient async programming? Of course you would.</li><li>String interpolation \u201cworks like ${this.example}!\u201d</li><li>Function arguments can be named, optional and variadic.</li><li>Many, many other tweaks and improvements. If something annoyed you about Java, I give it 50/50 that it\u2019s fixed in Kotlin.</li></ul><h1>Try it now!</h1><p>Like many modern languages, Kotlin has a way to try it out via your web browser. Unlike those other languages, Kotlin\u2019s tryout site is practically a full blown IDE that features fast autocompletion, real time background compilation and even online static analysis!</p><h2>TRY IT NOW</h2><p>Go on. I\u2019ll wait for you to come back.</p><h1>What\u2019s the catch?</h1><p>NOTE: This article was originally written in July 2015. By now this section has become inaccurate as various issues were fixed by JetBrains. I have marked the resolved issues below in bold, but left the text as-is.</p><p>Nothing in life is perfect, and alas, neither is Kotlin. Here are some of the issues I encountered whilst using the language.</p><ol><li>The data class feature is a very useful way to auto-generate JavaBean boilerplate, but it imposes severe limitations: such classes cannot inherit from anything, nor be inherited from. This in turn makes the \u201csealed class\u201d feature rather less useful, as you can\u2019t have a sealed hierarchy of data classes. JetBrains say they want to relax the constraints on data classes in a future version, when they figured out exactly what the behaviours involved should be. (Kotlin 1.1: data classes may inherit from other classes)</li><li>There are no type aliases yet. So, function types have to be written out redundantly each and every time. (1.1 added type aliases)</li><li>The IDE plugin still throws exceptions more often than it should. These don\u2019t ever seem to break anything so are a minor nuisance compared to what a crash in a native-code IDE would be. But the \u201cInternal IDE error\u201d bubble can still be an irritant.</li><li>By default, classes are final. You have to mark them as \u201copen\u201d if you want the standard Java behaviour. Some Java frameworks that rely on bytecode synthesis assume classes won\u2019t be final and can fail or silently do the wrong thing when encountering Kotlin code. This isn\u2019t Kotlin\u2019s fault, but I\u2019ve still had a non-trivial amount of time wasted by having to debug this. As Kotlin gets more widespread I expect such frameworks to improve. (1.1 adds some compiler plugins for popular frameworks that auto-open classes at the right time)</li><li>Kotlin supports compile-time function inlining. This makes the use of higher order functions like map/filter/reduce very cheap at runtime, and so it\u2019s common to use it a lot. Inlining also allows you to work around the JVM\u2019s lack of reified generics in some cases and do non-local returns, like exiting a function from inside a lambda. These are good things! But they come at a cost: because the JVM doesn\u2019t understand what\u2019s happened, stack traces can sometimes get messed up. IntelliJ attempts to \u201cun-scramble\u201d stack traces that have been made confusing thanks to function inlining, but it\u2019s still common to encounter exception stacks that refer to non-existent line numbers and other bizarre oddities. Ideally, Kotlin wouldn\u2019t have to do this because JVMs would have all the features needed. But they don\u2019t, so, we\u2019re probably stuck with this unless the JVM learns how to handle functions that were inlined by the language frontend.</li><li>Kotlin targets Java 6 bytecode. It does not use some of the improvements in Java 8. One minor issue is that the Kotlin standard library sometimes duplicates things that Java 8\u2019s standard library also provides. Also, the compiler doesn\u2019t use the \u201cinvokedynamic\u201d bytecode to reduce the number of class files generated by lambdas, so Kotlin JARs that use a lot of non-inlineable lambdas can get a bit bloaty compared to Java 8. Fixing this is high up on JetBrain\u2019s agenda so hopefully it\u2019ll get done soon.</li><li>Compilation inside IntelliJ is incremental and extremely fast (as fast as Java). Compilation through Gradle is slow because it\u2019s not incremental at all. Avoid compiling through Gradle if you can. Again, this is high up on their list of things to fix. (fixed in 1.1)</li><li>There\u2019s no equivalent of macros or compiler plugins, so if you like macros from Scala or things like the Checker Framework from Java, sorry, you\u2019ll have to do without.</li></ol><p>Other issues to consider:</p><ul><li>The community is small. Whilst the excellent Java interop means you don\u2019t really need Kotlin libraries, they\u2019re still nice to have and currently there aren\u2019t many.</li><li>FP purists may feel the type system is lacking some of the more advanced features that can be found in Scala or Haskell. If you\u2019re the sort of person who cares about this more than average, Kotlin may not be for you. The funKTionale library adds some constructs known from Haskell to the language like partial application, function currying, memoization etc.</li><li>Whilst it can compile down to JavaScript, this mode is experimental and a lot buggier/unfinished compared to the Java backend. (done in 1.1)</li><li>There is no standard style guide, and at points Kotlin gives you several alternative syntaxes to choose from. Kotlin written by different people may look different. This is in contrast to Go, which enforces style rigidly. (there is now a simple conventions document)</li><li>There is an Eclipse plugin for Kotlin, but it is naturally much less sophisticated than the IntelliJ support. Kotlin will work best if your team standardises on IntelliJ.</li><li>Kotlin is pickier about some things than Java. It will not autoconvert integers to longs and such, you are required to specify you want the conversion explicitly. This is because the language has a focus on correctness and attempts to fix the issues found in the famous \u201cJava Puzzlers\u201d book. JetBrains claim they nailed about half of them.</li><li>Because Kotlin targets Java 6 it is restricted to the features that runtime has. Whilst it can match or exceed C# in many areas, it lacks features like value types which aren\u2019t yet a part of the Java platform.</li></ul><h1>Why you should now consider the JVM</h1><p>In recent times I have encountered many startups using either a dynamic scripting language like JavaScript, or Go.</p><p>As I work in the Bitcoin space the use of dynamic languages is especially distressing; the lack of type safety in such tools has already led to serious monetary losses. Go is less error-prone but still suffers badly from lack of basic things, like a good debugger, fast GC, solid dependency management and reliable profiling tools.</p><p>In the last 15 years or so Java became strongly associated with verbosity and over engineering \u2014 and to a large extent that reputation was deserved. Enterprise Java became famous for classes with names like PathVariableMapMethodArgumentResolver. For the longest time I stayed away from the JVM, as I was sure the surrounding culture was not for me.</p><p>Eventually I was forced to return to Java by Android. It turned out that things had been changing. Whilst XML still popped up more frequently than fashion would dictate, the capabilities of the infrastructure had become very impressive. IntelliJ turned out to be much faster and more intuitive than Eclipse. Maven, though at first rather overwhelming, turned out to have a ton of features I\u2019d often wished for in other build/dependency management systems. Newer web frameworks like Ninja and Play learned lightness from projects like Ruby on Rails. There were tons of libraries. Hardware had got better and the JVM had got more efficient. And so on.</p><p>The one big thing that hadn\u2019t really changed was the language itself. Java was still annoyingly verbose and painful to write.</p><p>Now there is Kotlin, and with it the last traditional pain associated with the Java ecosystem is gone. You can write code that\u2019s more expressive and more concise than even a scripting language, but with way fewer bugs and with way better performance. You can use all the great tools: just try the bundled VisualVM program for a taste of what\u2019s available for free in this ecosystem, or check out the Chronon time travelling debugger to see what you can get if you\u2019re willing to pay some money.</p><p>If JavaScript is your thing, try Kotlin\u2019s JS backend. Or, run your existing code inside the Nashorn JS engine.</p><p>And finally, if you like Go because it generates self contained programs, check out the javapackager tool. It creates native, bundled packages for each platform, meaning on Linux you can get DEBs or tarballs that are entirely self contained with no JRE dependency. Sure, it\u2019s not a single file once unpacked, but a single directory isn\u2019t much harder to work with from a deployment perspective.</p><p>In short: if you have previously ignored the JVM ecosystem because it was terminally uncool, you should grab Kotlin and take another look.</p>", "tags": ["Kotlin", "Java", "Programming", "Web Development", "Tech"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*aCCH418GrsTqzVdEONe33g.png"], "url": "https://medium.com/laravel-news/the-simple-guide-to-deploy-laravel-5-application-on-shared-hosting-1a8d0aee923e", "dateCreated": "2015-04-06T14:09:43.439Z", "datePublished": "2015-04-06T14:09:43.439Z", "dateModified": "2018-06-16T06:14:21.108Z", "headline": "The simple guide to deploy Laravel 5 application on shared hosting", "name": "The simple guide to deploy Laravel 5 application on shared hosting", "description": "For more about deploying a Laravel/Lumen application on shared hosting, check out my complete guide, https://github.com/petehouston/laravel-deploy-on-shared-hosting In this tutorial, I\u2019d like to show\u2026", "identifier": "1a8d0aee923e", "author": {"@type": "Person", "name": "Pete Houston", "url": "https://medium.com/@petehouston"}, "creator": ["Pete Houston"], "publisher": {"@type": "Organization", "name": "Laravel News", "url": "https://medium.com/laravel-news", "logo": {"@type": "ImageObject", "width": 60, "height": 60, "url": "https://miro.medium.com/max/120/1*sCMUOOOIXPFZrtkYU8bVtQ.png"}}, "mainEntityOfPage": "https://medium.com/laravel-news/the-simple-guide-to-deploy-laravel-5-application-on-shared-hosting-1a8d0aee923e"}, "content": "<h1>The simple guide to deploy Laravel 5 application on shared hosting</h1><a></a><a>Pete Houston</a><a>Apr 6, 2015</a><p>by Pete Houston</p><p>For more about deploying a Laravel/Lumen application on shared hosting, check out my complete guide, https://github.com/petehouston/laravel-deploy-on-shared-hosting</p><h2>Changelog</h2><ul><li>12/Jun/2015: Adding symlink as response from @rverrips, add optimization command for production environment pointed out by @constb.</li></ul><p>In this tutorial, I\u2019d like to show you a very simple method to deploy Laravel 5 applications, safe & secure.</p><p>First, let say in your hosting server (VPS, or shared hosting\u2026whatever), you have current www/ directory, which is accessible publicly via web domain, for example:</p><p>Now, create a new directory, which contains all your application source code, at the same level as www/, for example:</p><p>You can use git, svn, mecurial or whatever method you like to transfer your code to this directory.</p><p>At this point, you can see that the project code is apparently not accessible to the web, right?</p><p>Next step is to copy all contents inside the /project/public directory to www/ directory. The easy example is that, with the fresh Laravel 5 installation application, the project/public/index.php should be copied to the www/index.php , have you got the point?</p><p>Remember to copy the public/.htaccess to the www/ also. Don\u2019t forget this, it is very important for your app routes. Without it, your routes won\u2019t be working and there will be a blank or empty page in every route.</p><p>Now let\u2019s modify the www/index.php to reflect the new structure. Don\u2019t modify the project/public/index.php, okay? Only modify www/index.php, remember this!!!</p><p>Find the following line</p><p>And update them to the correct paths as following</p><p>It worths to mention that some shared hosting service providers allow symlink to the public_html directory of the main domain, we can simplify the process, instead of copying the whole project/public/ to /www, we create symbolic linking,</p><p>Almost done, it is time to set permissions for the project/storage directory, it should be writable.</p><p>The final step is here, config your application variables in the project/.env .</p><p>All righty right! Everything should work now.</p><p>If you don\u2019t have composer installed already on your server, you can easily grab it to the project directory then.</p><a>https://getcomposer.org/installer</a><p>Now you can execute composer to manage dependencies.</p><p>From now on, each time you deploy, I mean you update the project/ directory, you will need to reflect all changes in project/public/ directory into www/, except the www/index.php, which is already configured above to include the correct paths.</p><p>You can easily achieve this via bash shell command line. I wrote this little script sync.sh, you can use this by putting into the same directory level with project/ and www/</p><p>That\u2019s it. Well then, have fun \u263a</p>", "tags": ["Laravel", "PHP", "Programming", "Tutorial"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*QYWytCmxcFu2KouefDMXFQ.png"], "url": "https://medium.com/i-math/a-king-1000-bottles-of-wine-10-prisoners-and-a-drop-of-poison-2dd1959a8dd2", "dateCreated": "2015-10-06T18:47:00.266Z", "datePublished": "2015-10-06T18:47:00.266Z", "dateModified": "2019-10-08T04:32:03.442Z", "headline": "A King, 1000 Bottles of Wine, 10 Prisoners and a Drop of Poison", "name": "A King, 1000 Bottles of Wine, 10 Prisoners and a Drop of Poison", "description": "We have 1000 bottles of wine, one of which is poisoned and somehow we need to test all of the wine bottles using only 10 prisoners as taste testers. However we decide to administer the wine to the\u2026", "identifier": "2dd1959a8dd2", "author": {"@type": "Person", "name": "Brett Berry", "url": "https://medium.com/@brettelizabethberry"}, "creator": ["Brett Berry"], "publisher": {"@type": "Organization", "name": "Math Hacks", "url": "https://medium.com/i-math", "logo": {"@type": "ImageObject", "width": 106, "height": 60, "url": "https://miro.medium.com/max/212/1*JVbhXumQj_PiTDpD5yOfig.png"}}, "mainEntityOfPage": "https://medium.com/i-math/a-king-1000-bottles-of-wine-10-prisoners-and-a-drop-of-poison-2dd1959a8dd2"}, "content": "<h1>A King, 1000 Bottles of Wine, 10 Prisoners and a Drop of Poison</h1><h2>a mathematical riddle</h2><a></a><a>Brett Berry</a><a>Oct 6, 2015</a><p>Ready for the solution?</p><p>Here\u2019s the riddle we were looking at in the last lesson in case you missed it.</p><p>The King of a small country invites 1000 senators to his annual party. As a tradition, each senator brings the King a bottle of wine. Soon after, the Queen discovers that one of the senators is trying to assassinate the King by giving him a bottle of poisoned wine. Unfortunately, they do not know which senator, nor which bottle of wine is poisoned, and the poison is completely indiscernible. However, the King has 10 prisoners he plans to execute. He decides to use them as taste testers to determine which bottle of wine contains the poison. The poison when taken has no effect on the prisoner until exactly 24 hours later when the infected prisoner suddenly dies. The King needs to determine which bottle of wine is poisoned by tomorrow so that the festivities can continue as planned. Hence he only has time for one round of testing. How can the King administer the wine to the prisoners to ensure that 24 hours from now he is guaranteed to have found the poisoned wine bottle?</p><p>Don\u2019t worry if you weren\u2019t able to solve it. The important part is to try.</p><p>If you\u2019re still working on this, you might find this article helpful!</p><a>Subscribe to Math Hacks on YouTube</a><h1>possible solution one:</h1><p>Let\u2019s start by restating the problem.</p><p>We have 1000 bottles of wine, one of which is poisoned and somehow we need to test all of the wine bottles using only 10 prisoners as taste testers. However we decide to administer the wine to the prisoners, we need to use the prisoners deaths as a code to trace back to the poisoned wine bottle.</p><p>Since we have only 24 hours to test the wine, we know that there is not enough time nor enough prisoners to test the wine one-by-one. I\u2019m guessing you got to this point and that\u2019s where the confusion set in.</p><p>How can we test all of the bottles? Well, we\u2019re going to have to get the prisoners drunk, I can tell you that much! Jk, but seriously we need to systematically distribute the wine to the prisoners so that there are at least a thousand different combinations!</p><p>First, let\u2019s line up our 10 prisoners and label them. Also label the wine bottles 0\u2013999 so we can tell them apart.</p><p>Let\u2019s have Prisoner A drink from every other bottle starting with the first bottle, bottle #0. In other words, Prisoner A will drink from bottles 0, 2, 4, \u2026</p><p>Next, assign Prisoner B the task of drinking from every other set of two bottles. For example, Prisoner B drinks from bottles 0 and 1, skips 2 and 3. Drinks from 4 and 5, skips 6 and 7, and so forth continuing the pattern.</p><p>Have Prisoner C drink from every other set of four bottles: i.e. Prisoner C drinks from bottles 0\u20133, (skip 4\u20137), 8\u201311, (skip 12\u201315), 16\u201319, \u2026</p><p>Are you seeing the pattern? Keep doubling the number of bottles each prisoner drinks in succession.</p><p>Prisoner D drinks from every other set of eight bottles. Prisoner E from every other set of 16. Prisoner F from every other 32. Prisoner G from every other 64. Prisoner H from every other 128. Prisoner I from every other 256. And lastly, Prisoner J from the first 512 bottles.</p><p>At this point, you may notice something looks familiar. The bottle assignments reflect powers of 2.</p><p>We have successfully distributed the wine so that there are sufficiently many combinations. Now we wait 24 hours to see which prisoners were poisoned.</p><p>How will we be able to tell which bottle was the poisonous one? We will look at the pattern of poisoned prisoners encoded in binary. To do so I\u2019ll place a zero above the prisoners who are poisoned, and a one above those who aren\u2019t.</p><p>Before we decode the result, we need to flip our prisoners around so that it matches the binary place-value system.</p><p>There we go. Now suppose all the prisoners are poisoned? Which bottle of wine was it?</p><p>Well it must have been the first bottle, bottle #0, since this is the only bottle that they all drank from.</p><p>This is confirmed in our diagram because if they are all poisoned, we place a zero above every prisoner. And 0000000000 in binary is still 0 in decimal.</p><p>Now let\u2019s suppose that everyone except prisoner A is poisoned.</p><p>If we translate 0000000001 into decimal we get 1. Which means bottle # 1 was poisoned. This confirms what we know to be true because Prisoner A was the only prisoner not to drink from bottle # 1 (remember Prisoner A drank from bottles 0, 2, 4, 6\u2026).</p><p>How about if prisoners J, H, F, D and B are poisoned?</p><p>Translate the number 0101010101 into decimal to determine which bottle it was.</p><p>101010101 = 256 + 64 + 16 + 4 + 1 = 341.</p><p>Hence, bottle number 341 was the poisonous bottle.</p><p>Pretty clever, isn\u2019t it? Because there are 10 prisoners and each prisoner has two states (dead or alive), this system has a grand total of 1,024 different combinations.</p><p>This is more than enough combinations since we only have 1000 bottles.</p><h1>possible solution two:</h1><p>This solution jumps straight into binary.</p><p>To begin, label each bottle with both its decimal number and binary equivalent.</p><p>Now each bottle serves as a code describing which prisoners are to drink from it. In this system, a one means the prisoner drinks from it, a zero means the prisoner doesn\u2019t.</p><p>For example, only Prisoner J should drink from bottle one since its binary is 0000000001. Whereas, Prisoners I and G should drink from bottle ten whose binary is 0000001010 because it has 1's in the columns that match up with prisoners I and G.</p><p>Continue this process until you have given out sips of wine from every bottle. After 24 hours, line up the prisoners in order and note which ones have been poisoned with ones and mark the rest with zeros. Convert this number back into decimal to reveal which bottle was poisoned.</p><p>Whew! Wasn\u2019t that fun?!</p><h2>\u2764 STAY CONNECTED \u2764</h2><p>Stay up-to-date with everything Math Hacks is up to!</p><a>Math Hacks on YouTubeWelcome to Season Two of Math Hacks! This season we'll be covering topics from Algebra and Trigonometry as well as\u2026www.youtube.com</a><p>Instagram | Facebook | Twitter</p><h2>More Puzzling Problems</h2><a>The Birthday Problem\ud83c\udf88Today\u2019s problem goes out to a special new member of the family. Welcome to the world my niece, Edison Grace Berry! My\u2026medium.com</a><a>Hilbert\u2019s Infinite Hotel ParadoxCountable Infinities and Strange Outcomesmedium.com</a><a>The Drunkard\u2019s Walk ExplainedStochastic Processes, Markov Chains & Random Walksmedium.com</a>", "tags": ["Mathematics", "Riddles", "Programming", "Problem Solving", "Math"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*m4ey4j9bhUIRysRBJNYRcA.jpeg"], "url": "https://medium.com/app-coder-io/27-ios-open-source-libraries-to-skyrocket-your-development-301b67d3124c", "dateCreated": "2015-05-29T14:50:52.309Z", "datePublished": "2015-05-29T14:50:52.309Z", "dateModified": "2020-10-05T15:07:13.909Z", "headline": "27 iOS open source libraries to skyrocket your development.", "name": "27 iOS open source libraries to skyrocket your development.", "description": "And I love the developers, who spend their valuable private time creating amazing things, which then they share with other people and don\u2019t want anything in return. Open-source authors and\u2026", "identifier": "301b67d3124c", "author": {"@type": "Person", "name": "Pawe\u0142 Bia\u0142ecki", "url": "https://medium.com/@pawel_bialecki"}, "creator": ["Pawe\u0142 Bia\u0142ecki"], "publisher": {"@type": "Organization", "name": "App Coder", "url": "https://medium.com/app-coder-io", "logo": {"@type": "ImageObject", "width": 308, "height": 60, "url": "https://miro.medium.com/max/616/1*OMF3fSqH8t4xBJ9-6oZDZw.png"}}, "mainEntityOfPage": "https://medium.com/app-coder-io/27-ios-open-source-libraries-to-skyrocket-your-development-301b67d3124c"}, "content": "<h1>27 iOS open source libraries to skyrocket your development.</h1><a></a><a>Pawe\u0142 Bia\u0142ecki</a><a>May 29, 2015</a><p>You don\u2019t want to miss them. Really.</p><p>I love open source.</p><p>And I love the developers, who spend their valuable private time creating amazing things, which then they share with other people and don\u2019t want anything in return. Open-source authors and contributors, you are awesome people. Thank you for all your work.</p><p>Outside of the iOS development, I run my food blog \u2014 check it out, and never be hungry again!</p><a>Food Recipes - Quick, Easy, and Tasty! * DishCook | Easy Food Recipes Food BlogWelcome to DishCook, the food-recipes-cooking blog! I'm Pawe\u0142, a 31-year-old dude from Poland, who has never taken any\u2026dishcook.com</a><p>Working on my currency converter app for iPhone (a really handy app for travel to Europe <both Western and Eastern>, or Iceland), here I\u2019ve selected favorites from my favorites iOS open source libraries. Order of these projects is totally random, all of them are simply awesome.</p><a>MixCoin - iPhone Currency Converter Calculator AppTravel abroad for a holiday or a business trip? Living next to the country border? Need an app for fast currency\u2026mixcoin.app</a><p>The overwhelming majority of the libraries support CocoaPods, so adding them to your Xcode project is a breeze.</p><p>On the bottom of the article you will find a TL;DR version \u2014 a simple list with only titles and links to the projects. If you\u2019ll find this article useful, share it with your iOS dev buddies. Good things need to spread.</p><h1>1. DZNEmptyDataSet</h1><p>This should be a standard, built-in into iOS way of dealing with empty table and collection views. By default if your table view is empty, the screen is empty. It\u2019s not the best user experience you can have.</p><p>With this library you just need to conform to a few protocols and iOS will beautifully take care of your collection view and display proper, good looking to user messages. No brainer for every iOS project.</p><h2>CocoaPods:</h2><a>DZNEmptyDataSetDZNEmptyDataSet - A drop-in UITableView/UICollectionView superclass category for showing empty datasets whenever the\u2026github.</a><h1>2. PDTSimpleCalendar</h1><p>Need a simple, nice looking and working calendar component for your app? Now you have \u2014 PDTSimpleCalendar is probably the best calendar component for iOS. You can customize it in many ways, both working logic and looking.</p><h2>CocoaPods:</h2><a>jivesoftware/PDTSimpleCalendarPDTSimpleCalendar - A simple Calendar / Date Picker for iOS using UICollectionViewgithub.com</a><h1>3. MagicalRecord</h1><p>Core Data is simple, they said. It\u2019s nice and simple, they said. Huh, really, Apple? A ton of boilerplate code added to each project isn\u2019t very elegant and simple. Not to mention adding, removing and updating a lot of entities, saving context, creating different Core Data stacks for different environments etc, etc. I like Core Data very much of course, but Apple really could simplify it in a little better way \u2014 the MagicalRecord way.</p><p>MagicalRecord works like a wrapper for Core Data and hides from developer all non-relevant stuff. If you\u2019ve ever worked with active record pattern (e.g. Ruby on Rails), you\u2019re in home. Really, really recommended library if you are using Core Data in your app.</p><h2>CocoaPods:</h2><a>magicalpanda/MagicalRecordMagicalRecord - Super Awesome Easy Fetching for Core Data 1!!!11!!!!1!github.com</a><h1>4. Chameleon</h1><p>If you are reading this, odds that you\u2019re a better programmer than a designer are very high. This is something for you.</p><p>Chameleon is a color framework for iOS. It extends UIColor with beautiful, modern flat colors. It also gives us ability to create color palletes from color defined by us. It can do many other things, explore readme. If you want beautiful application, definitely add this library to your project.</p><h2>CocoaPods:</h2><a>ViccAlexander/ChameleonChameleon - Flat Color Framework for iOS (Obj-C & Swift)github.com</a><h1>5. Alamofire</h1><p>Alamofire is an elegant networking library written in Swift. Have you ever been using AFNetworking? Alamofire is it\u2019s younger brother. Younger and more stylish, of course (AFNetworking is written in Objective-C).</p><p>Need to do networking stuff like downloading, uploading, getting JSONs etc.? Alamofire is for you. 8000 people on GitHub cannot be wrong.</p><h2>CocoaPods:</h2><a>Alamofire/AlamofireAlamofire - Elegant HTTP Networking in Swiftgithub.com</a><h1>6. TextFieldEffects</h1><p>Don\u2019t you think that standard UITextField is a little boring? Me too \u2014 so say hello to TextFieldEffects! I won\u2019t write too much, I\u2019ll just show you a few examples what this library can do:</p><p>Yep, these are simple drop-in controllers. You can even make use from IBDesignables in storyboard!</p><h2>CocoaPods:</h2><h2>Carthage:</h2><a>raulriera/TextFieldEffectsTextFieldEffects - Custom UITextFields effects inspired by Codrops, built using Swiftgithub.com</a><h1>7. GPUImage</h1><p>Have you ever created a camera app? If not, you surely will after meeting this library.</p><p>GPUImage provides us a GPU-accelerated camera effects (both images and video) with blazing speed. There are hundreds of apps in the App Store that use this library \u2014 and one mine\u2019s too:</p><p>8869 stars on GitHub and still counting.</p><h2>CocoaPods:</h2><a>BradLarson/GPUImageGPUImage - An open source iOS framework for GPU-based image and video processinggithub.com</a><h1>8. iRate</h1><p>What\u2019s the best way to get more reviews in the App Store? I don\u2019t have hard data to answer that question, but if I had to guess, I would say that simple asking the user. Maybe it\u2019s a little oldschool way to do this\u2014 most developers now create custom in-app alerts \u2014 but if you don\u2019t have time or you don\u2019t want to implement everything from scratch, it\u2019s better to use iRate than not to. And this is iRate exactly \u2014 a small library that you include in your project and forget about asking users for review \u2014 iRate will do it for you, at proper time.</p><h2>CocoaPods:</h2><a>nicklockwood/iRateiRate - A handy class that prompts users of your iPhone or Mac App Store app to rate your application after using it\u2026github.com</a><h1>9. GameCenterManager</h1><p>Love or hate singletons, but in this case managing Game Center is just easier with a little help of our best known anti-pattern (you have only one Game Center in your game, right?).</p><p>To be honest, vanilla-managing Game Center in iOS isn\u2019t that hard, but with this library is just simple and fast. And better is the enemy of the good.</p><p>I\u2019m using this in one of my games and it\u2019s a pleasure experience.</p><h2>CocoaPods:</h2><a>nihalahmed/GameCenterManagerGameCenterManager - iOS Game Center helper singletongithub.com</a><h1>10. PKRevealController 2</h1><p>This is a real gem here, one of my most favorited iOS control. PKRevealController is a slideable side menu (left, right or both), which slides with a help of your finger (or just by pressing the button, but it\u2019s not as much cool as sliding).</p><p>I\u2019ve tried a few other libraries providing this kind of control and PKRevealController is just the best. Very easy to setup, highly customizable and recognizes gestures very, very well. It could be included in iOS SDK as a standard control, really.</p><h2>CocoaPods:</h2><a>pkluz/PKRevealControllerIntroducing PKRevealController 2 - The second version of one of the most popular view controller containers for iOS\u2026github.com</a><h1>11. SlackTextViewController</h1><p>Have you ever used Slack iOS app? If you are working in a bigger software company, probably yes. For these people who haven\u2019t \u2014 Slack rocks. And Slack\u2019s iOS app too, especially for the great, custom text input control\u2026 which here you have \u2014 a code ready for use in your app!</p><p>Self growing text area? Check.Gestures recognizing, autocompletion, multimedia pasting? Check. Easy drop-in solution? Check. What else can you possibly need?</p><h2>CocoaPods:</h2><a>slackhq/SlackTextViewControllerSlackTextViewController - A drop-in UIViewController subclass with a growing text input view and other useful messaging\u2026github.com</a><h1>12. RETableViewManager</h1><p>RETableViewManager will help you with dynamically creating and managing your table views, everything in code. It deliver us predefined cells (for bools, texts, dates etc. \u2014 check screenshots below), but you can also create your custom views and use them along with the default ones.</p><p>All of this stuff you can do in storyboard without help of this library, but sometimes code is simply better than visual editor.</p><h2>CocoaPods:</h2><a>romaonthego/RETableViewManagerRETableViewManager - Powerful data driven content manager for UITableView.github.com</a><h1>13. PermissionScope</h1><p>Useful library to deliver better user experience by informing user about needed system permissions before asking user for them. Higher acceptance rate -> more users actively using the app -> better retention -> better stats -> more downloads. Highly recommended pod.</p><h2>CocoaPods:</h2><a>nickoneill/PermissionScopePermissionScope - A Periscope-inspired way to ask for iOS permissionsgithub.com</a><h1>14. SVProgressHUD</h1><p>This image is loaded properly, don\u2019t wait longer and don\u2019t refresh the page. This is exactly how SVProgressHUD looks like in your app. If you need custom waiting indicator, here you have (the best probably) one.</p><h2>CocoaPods:</h2><a>TransitApp/SVProgressHUDSVProgressHUD - A clean and lightweight progress HUD for your iOS app.github.com</a><h1>15. FontAwesomeKit</h1><p>Font Awesome is awesome and with this library you can easily add the font to your project and use it in many ways.</p><h2>CocoaPods:</h2><a>PrideChung/FontAwesomeKitFontAwesomeKit - Icon font library for iOS. Currently supports Font-Awesome, Foundation icons, Zocial, and ionicons.github.com</a><h1>16. SnapKit</h1><p>Love auto layout? You should!</p><p>At least when creating it in storyboards.</p><p>Creating constraints in code is painful without some help, but luckily SnapKit is here and with it on board you can code your constraints in easy, declarative way. Check it out.</p><h2>CocoaPods:</h2><a>SnapKit/SnapKitSnapKit - A Swift Autolayout DSL for iOS & OS Xgithub.com</a><h1>17. MGSwipeTableCell</h1><p>Another UI component, that is so often seen in many apps that Apple should probably think about including something similar in standard iOS SDK. Swipeable table cell, this is the best description of this pod. The best one.</p><p>These are just 3 animation types, there are more of them. Explore readme.</p><h2>CocoaPods:</h2><a>MortimerGoro/MGSwipeTableCellMGSwipeTableCell - An easy to use UITableViewCell subclass that allows to display swippable buttons with a variety of\u2026github.com</a><h1>18. Quick</h1><p>Unit testing in Swift, for Swift (ok, for Objective-C too), integrated with Xcode. If you are Objective-C fan, I would recommend Specta instead of this, but for Swift Quick will be probably the best shot.</p><h2>CocoaPods:</h2><a>Quick/QuickQuick - The Swift (and Objective-C) testing framework.github.com</a><h1>19. IAPHelper</h1><p>In-app purchases brings us a lot of boilerplate code, which this library get rid of and give us a simple wrapper for most common tasks related to money transfer from iOS user to your (or your company) wallet.</p><h2>CocoaPods:</h2><a>saturngod/IAPHelperIAPHelper - in app purchases helper for iOSgithub.com</a><h1>20. ReactiveCocoa</h1><p>OK, here we have a little monster.</p><p>ReactiveCocoa isn\u2019t a rather small, drop-in project like the others on this list. ReactiveCocoa brings us a totally different programming style/architecture based on signals and streams of values. It\u2019s totally mind blowing and first you need unlearn what you\u2019ve learned to understand how this work. It\u2019s not an easy task, but rewarding.</p><p>This isn\u2019t a proper place to teach you ReactiveCocoa, but I\u2019ll give you good resources if you are interested:</p><a>Getting Started with ReactiveCocoaNote: This is going to be a slightly more technical post geared toward our friends in the iOS developer community. In\u2026www.teehanlax.com</a><a>ReactiveCocoaLanguages are living works. They are nudged and challenged and bastardized and mashed-up in a perpetual cycle of\u2026nshipster.com</a><a>ReactiveCocoa Tutorial - The Definitive Introduction: Part 1/2As an iOS developer, nearly every line of code you write is in reaction to some event; a button tap, a received network\u2026www.raywenderlich.com</a><h2>CocoaPods:</h2><a>ReactiveCocoa/ReactiveCocoaReactiveCocoa - A framework for composing and transforming streams of valuesgithub.com</a><h1>21. SwiftyJSON</h1><p>JSON parsing in Swift made easy.</p><h2>CocoaPods:</h2><a>SwiftyJSON/SwiftyJSONSwiftyJSON - The better way to deal with JSON data in Swiftgithub.com</a><h1>22. Spring</h1><p>Animations made easy, chainable and declarative.</p><h2>CocoaPods:</h2><a>MengTo/SpringSpring - A library to simplify iOS animations in Swift.github.com</a><h1>23. FontBlaster</h1><p>Load custom fonts to your app easily.</p><h2>CocoaPods:</h2><a>ArtSabintsev/FontBlasterFontBlaster - Programmatically load custom fonts into your iOS app.github.com</a><h1>24. TAPromotee</h1><p>Cross promoting your apps is one of the best marketing strategies you can implement in them for free. And with this library it\u2019s so easy that you can\u2019t longer justify not doing it \u2014 add TAPromotee to your podfile, configure and enjoy more downloads for free.</p><h2>CocoaPods:</h2><a>JanC/TAPromoteeTAPromotee - Objective-C library to cross promote iOS appsgithub.com</a><h1>25. Concorde</h1><p>Do you load a lot of JPEGs in your app? With Concorde you can do it in a bit better looking way. A progressive way.</p><h2>CocoaPods:</h2><a>contentful-labs/ConcordeConcorde - Download and decode progressive JPEGs on iOS.github.com</a><h1>26. KeychainAccess</h1><p>Little helper library to manage Keychain access.</p><h2>CocoaPods:</h2><a>kishikawakatsumi/KeychainAccessKeychainAccess - Simple Swift wrapper for Keychain that works on iOS and OS Xgithub.com</a><h1>27. iOS-charts</h1><p>And last but not least \u2014 the iOS charts library! It\u2019s so useful and beautiful, that I won\u2019t write here too much \u2014 just scroll below and see what you can do in your app with this project.</p><p>Yes, everything is available as a drop-in (ok, maybe \u201ccode-in\u201d) component.</p><p>Unfortunately there is no CocoaPods support yet, so you need to manually drag the project to your Xcode workspace.</p><h1>TL;DR list of all these libraries for quick access:</h1><ol><li>DZNEmptyDataSet [UI, empty table view solver]</li><li>PDTSimpleCalendar [UI, drop-in calendar component]</li><li>MagicalRecord [Core Data helper implementing active record pattern]</li><li>Chameleon [UI, color framework]</li><li>Alamofire [Swift networking]</li><li>TextFieldEffects [UI, custom looking text fields]</li><li>GPUImage [fast image processing]</li><li>iRate [getting user ratings]</li><li>GameCenterManager [easily manage Game Center]</li><li>PKRevealController [UI, slide side menu]</li><li>SlackTextViewController [UI, highly customizable custom text field]</li><li>RETableViewManager [create table views dynamically from code]</li><li>PermissionScope [UI, nicely pre-asking user for system permissions]</li><li>SVProgressHUD [UI, custom waiting spinner]</li><li>FontAwesomeKit [easily add Font Awesome to your project]</li><li>SnapKit [easy auto layout in code]</li><li>MGSwipeTableCell [UI, swipeable table view cells]</li><li>Quick [Swift unit testing framework]</li><li>IAPHelper [In-App Purchases helper wrapper]</li><li>ReactiveCocoa [FRP framework]</li><li>SwiftyJSON [Swift JSON library]</li><li>Spring [Animation framework]</li><li>FontBlaster [easily load custom fonts into your app]</li><li>TAPromotee [cross promote your apps with drop-in view]</li><li>Concorde [download and decode progressive JPEGs]</li><li>KeychainAccess [manage keychain easily]</li><li>iOS-charts [beautiful charts library]</li></ol><p>Thanks for reading, it was a long list! If you think it was worth creating, please share it by clicking the Share button below the article \u2014 more people will benefit from it. Also if you\u2019re a Medium user, please click the Recommend button \u2014 it will inspire me to create more iOS development articles!</p><p>You can also follow me on Twitter, where I mostly write about iOS development.</p><p>Recommended reads:</p><a>27 places to learn iOS development. Best ones.And not only for beginners.medium.com</a><a>52 people every iOS developer should follow on Twitter.And they are not only programmers.medium.com</a>", "tags": ["iOS App Development", "iOS", "Apple", "Swift", "Programming"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*CRR3Lql_Mk2aTO54G-JQxg.jpeg"], "url": "https://medium.com/free-code-camp/demystifying-the-monad-in-scala-cc716bb6f534", "dateCreated": "2015-12-04T21:50:48.228Z", "datePublished": "2015-12-04T21:50:48.228Z", "dateModified": "2019-10-22T08:43:12.803Z", "headline": "Demystifying the Monad in Scala - We\u2019ve moved to freeCodeCamp.org/news - Medium", "name": "Demystifying the Monad in Scala - We\u2019ve moved to freeCodeCamp.org/news - Medium", "description": "What monads are and how to use them in Scala", "identifier": "cc716bb6f534", "author": {"@type": "Person", "name": "Sinisa Louc", "url": "https://medium.com/@sinisalouc"}, "creator": ["Sinisa Louc"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/demystifying-the-monad-in-scala-cc716bb6f534"}, "content": "<h1>Demystifying the Monad in Scala</h1><a></a><a>Sinisa Louc</a><a>Dec 4, 2015</a><a>davide ragusa</a><a>Unsplash</a><p>In my previous post I mentioned how I decided to write about variance despite the fact that there are already several dozen articles about the topic. This is a similar situation. I am aware that this is a drop in the sea. I feel the sea is polluted with complex mathematical explanations involving category theory. Boring explanations which line up one definition after another without providing the gist of things.</p><p>I will not get technical, and by technical I mean mathematical. Stephen Hawking said that he was warned that every equation he put into \u201cA brief history of time\u201d (great book by the way) would halve the sales. I will go by the same principle here. But I will also try not to be too simplistic, and by simplistic I mean vague. We do need to get our hands dirty. Last, but not least, I will provide examples as a primary mean of explaining. Examples are more as a supplement to the main explanation.</p><h2>Introduction</h2><p>So, what is a monad?</p><p>You can think of monads as wrappers. You just take an object and wrap it with a monad. It\u2019s like wrapping a present; you take a scarf, a good book or a fancy watch, and wrap it with some shiny paper and a red ribbon. We wrap gifts with shiny paper because they look pretty. We wrap objects with monads because monads provide us with the following two operations:</p><ul><li>identity (return in Haskell, unit in Scala)</li><li>bind (>>= in Haskell, flatMap in Scala)</li></ul><p>Scala doesn\u2019t come with a built-in monad type like Haskell so we will model the monad ourselves. If you take a look at some cool functional programming libraries like Scalaz you will find monads there. You will also find the rest of the category theory family (functors, applicatives, monoids and so on). In plain Scala, there\u2019s no such thing out of the box.</p><p>We will model a monad with a generic trait that provides methods unit() and flatMap(). We can call it M instead of Monad simply to be more concise. Here it is:</p><p>See, it provides two aforementioned functions, unit and flatMap. Don\u2019t worry about their signatures, what they do for now or why the unit() method is outside the trait body. We\u2019ll get to that in a moment.</p><p>Now, note one very important thing here \u2014 there is a concept of monad (which we modeled in Scala half a minute ago). There are concrete monads of flesh and blood which implement those two functions and actually do something (e.g. IO monad). Sometimes people refer to one thing and sometimes the other, so be careful. We will encounter a couple of concrete monads later in this article. You can think of a generic monad as an interface and concrete monads as implementations.</p><p>There\u2019s one more thing you should pay attention to \u2014 monads take a type parameter. We didn\u2019t just write M; we wrote M[A]. The type parameter is like a label sticker on our gift wrap, saying what kind of object we have inside (in real life this would ruin the surprise, but in programming, we don\u2019t like surprises). So if we want to wrap some object with our monad wrapper, we must parameterize the monad with the type of the underlying object, e.g. M[Int], M[String], M[MyClass] etc.</p><p>Now let\u2019s take a closer look at those two functions.</p><h2>Monad functions</h2><p>In case you just joined us, let me repeat that monads come with two operations, unit (also known as identity or return) and flatMap (also known as bind). By the way, literature and online sources are rich with all kinds of naming. I merely mentioned the most common ones. Wait, I forgot one \u2014 unit is also often called pure. But don\u2019t worry, it\u2019s always pretty straightforward which function is being referred to, no matter which naming is used. Oh, they also use zero for unit sometimes. All right, let\u2019s move on.</p><p>Unit performs the wrapping part. So, in case of our gift wrap analogy, we can pass a book to unit(). It will return our book wrapped up in this super cool shiny colorful wrap paper, with a \u201cbook\u201d label on it. And in case of our monad trait, if we give it a value of type A, it will return a value of type M[A]. It\u2019s sort of a monad constructor, if you will.</p><p>It should become clear at this point why we defined the method unit() outside the trait body. Because we don\u2019t want to invoke it upon the existing monadic object (e.g. myMonad.unit(\u201cmyBook\u201d)). That wouldn\u2019t make much sense. We want it as a standalone static method (e.g. unit(\u201cmyBook\u201d)). By passing our book to unit(), we get it back wrapped in a monad.</p><p>Now, about the flatMap. You may already be familiar with it; it\u2019s the very same flatMap you can encounter in other places in Scala, such as collections. Here\u2019s its signature:</p><p>Let\u2019s say U is a List. It works for various other types, but we\u2019ll use List for this example. Now, what flatMap does is that it takes a function with signature A \u2192 List[B] and it uses that function to transform the underlying object of type A into a List[B]. This operation is known as map. Since we transformed our underlying A into a List[B], this leaves us with a List[List[B]]. But we did not use ordinary map() \u2014 we used flatMap(). This means that the job is not done yet; flatMap will now \u201cflatten\u201d our List[List[B]] into List[B].</p><p>Let\u2019s look at a concrete example. If A is Int, and our function f is</p><p>then we can flatMap a list of integers with f as follows:</p><p>Note that regular map() would take each number i and expand it to a mini-list (predecessor, original number, successor) which would give us the following list of mini-lists: List((4, 5, 6), (5, 6, 7), (6, 7, 8)). FlatMap goes one step further; it flattens that into one long list, resulting inList(4, 5, 6, 5, 6, 7, 6, 7, 8).</p><p>Now let\u2019s say that we have some class M with an underlying type A, written as M[A]. If we want to flatMap that sh*t (I didn\u2019t invent this phrase; try Googling it) we need to provide a function A \u2192 M[B]. FlatMap will then use this function to transform our underlying A into M[B], resulting in a M[M[B]], and then it will flatten the whole thing into M[B].</p><p>Notice how flatMap doesn\u2019t require a function A \u2192 M[A], but a more flexible one, A \u2192 M[B]. So if M is a List and A is an Int, we can feed the flatMap with functions such as Int \u2192 List[String], Int \u2192 List[MyClass] and so on. It doesn\u2019t have to be Int \u2192 List[Int]. For example, we could have defined f as:</p><p>and then we could flatMap a list of integers with it like this:</p><p>FlatMap is way more powerful than map. It gives us the ability to chain operations together, as you\u2019ll see in the examples section. Map functionality is just a subset of flatMap functionality. If you want to have map() available in your monad, you can express it using monad\u2019s existing methods flatMap() and unit() like this (note that g is some function Int \u2192 Something, not Int \u2192 List[Something]):</p><p>If all we had was map and unit, we would not be able to define flatMap because neither one of them has a clue about flattening. Flatten (also known as join in Haskell) is a very important part of the process in our monad machine. If we had a map, but no ability to flatten (and therefore no flatMap), then we would end up with what is known in category theory as functor. Functors are pretty cool too, but monads are the star of our show so let\u2019s not digress.</p><p>By the way, if we decompose flatMap into map (fmap) and flatten (join) we will create a completely equivalent and valid definition of the monad. That definition would then look something like this:</p><ul><li>def unit: A \u2192 F[A]</li><li>def map: F[A] \u2192 (A \u2192 B) \u2192 F[B]</li><li>def flatten: F[F[A]] \u2192 F[A]</li></ul><p>Note that I wrote map\u2019s signature as a fully standalone, \u201cneutral\u201d function here. Meaning that it\u2019s defined without any additional context instead of as a method on F[A].</p><p>Such map first takes an instance of F[A] first (say, List(42)), then a function A \u2192 B (such as a \u2192 a + 1) and then gives us back an instance of F[B] (in our case List(43)). I wrote it that way only to be able to write the corresponding flatten signature as well. If I had written map simply as A \u2192 B, assuming that it\u2019s defined as a method on F[A], then I would have had a hard time writing down the signature for flatten. It would have to be a function Unit \u2192 F[A], defined only on instances of F[F[A]], which makes things clunky. By writing down the \u201cneutral\u201d signatures things should be clear.</p><p>Anyways, we will stick to the flatMap version, and we will continue to view map\u2019s signature as A \u2192 B instead of F[A] \u2192 A \u2192 B, meaning that F[A] is already known at the time of invocation (it\u2019s the instance upon which we\u2019re invoking the method map()).</p><h2>Exposing the monad</h2><p>As I said earlier, there is no such thing as monad type class in Scala. But that doesn\u2019t mean there are no monads in Scala. Monad is not a class or a trait; monad is a concept. Every \u201cwrapper\u201d that provides us with our two beloved operations, unit, and flatMap, is essentially a monad (well, it\u2019s not really enough to just provide methods with those names, they, of course, have to follow certain laws, but we\u2019ll get to that).</p><p>I think we can now finally put the two and two together and realize that List is a monad! Let that sink in. What a plot twist, huh? It\u2019s like in that movie when you realize that it was *him* all along. But wait \u2014 there are others! Set? Monad. Option? Monad. Future? Monad!(*)</p><p>OK, it\u2019s a mass conspiracy movie. Monads are everywhere!</p><p>(*): There is a slight controversy whether Future really is or isn\u2019t a monad. Since this is a beginners-friendly text, I will just say that it is a monad and call it a day.</p><p>In case someone from the Future-is-not-a-true-monad camp is reading this, I\u2019m sure you\u2019ll agree that this is not the place for that debate. Perhaps I\u2019ll even write an article on that too someday.</p><p>I agree that their breaking of some fundamental functional programming principles such as referential transparency should not go unnoticed. But let\u2019s leave that for some other time.</p><p>When you look at them up close, you can see that each one indeed has a flatMap method. What about unit? Well, remember that unit is an operation that creates a monad M[A] from an object of type A. This means that a simple apply() serves as a perfectly good unit. So if we have an object called x, here\u2019s what unit operation looks like in various monads (recall that there\u2019s syntax sugar that allows us to invoke e.g. List.apply(3) as List(3)):</p><p>Also, as I said earlier, there is no actual monad type class in plain Scala. Constructs such as List, Option, Future etc. don\u2019t extend any special Monad trait (it doesn\u2019t exist). This means that they are not obligated to provide us with methods called unit and flatMap. It\u2019s by observing them and seeing that they have methods unit() and flatMap() with correct signatures and behavior that we can deduct that they are, in fact, monads.</p><p>I can hear you say \u201cbut if there\u2019s no actual unit() method in Scala (since we said that apply() in monad\u2019s companion object serves as unit), what did you mean by saying \u201creturn in Haskell, unit in Scala? What, unit is a name for a function that doesn\u2019t exist?\u201d</p><p>That\u2019s a good observation, and yes, you are quite right. \u201cUnit\u201d is merely a convention for referencing monad\u2019s identity operation in Scala. You can create a perfectly good custom monad and call its methods galvanize and dropTheBass instead of unit and flatMap if you wish. As long as they have proper signatures and do what they\u2019re supposed to, it will conceptually be a monad. But convention is a nice thing, and Scala community embraced the terms flatMap (as seen in List, Option, Future) for the bind operation and unit (by convention implemented as apply()) for the identity operation.</p><p>I said, \u201cas long as they have proper signatures and do what they\u2019re supposed to\u201d. OK, we covered the signatures part, but we never really specified what it is exactly that these methods have to do. I mean, we discussed how they should behave, but this is not really enough to define their requirements in more concrete terms. This is where monad laws come into play. These laws must be obeyed by unit and flatMap if our monad is to indeed be a true, proper monad.</p><p>Since this is a beginner-friendly text, I will not go into too much details about the theory behind the laws or even demonstrating their correctness. For now it\u2019s important that you know that they exist. It\u2019s OK if you postpone working through them until you get some practice.</p><p>So, if we have some basic value x, a monad instance m (holding some value) and functions f and g of type Int \u2192 M[Int], we can write the laws as follows:</p><ul><li>left-identity law: unit(x).flatMap(f) == f(x)</li><li>right-identity law: m.flatMap(unit) == m</li><li>associativity law:m.flatMap(f).flatMap(g) == m.flatMap(x \u21d2 f(x).flatMap(g))</li></ul><p>Alright. So far we have achieved two out of three goals that I aimed for in this article. We explained the concept of a monad and we drew a parallel to some real-life monads in Scala. By the way, in the beginning I only mentioned IO-monad as an example of a concrete monad. I wanted to postpone mentioning the others until you had an idea about the general concept.</p><p>In case you\u2019re wondering what the hell is an IO-monad anyway, it\u2019s a quite complex little thingy used for IO operations in purely functional languages such as Haskell. This is not the time or place to dive deeper into that one.</p><p>Time for the third goal \u2014 why are monads useful?</p><h2>Monads in practice: Option</h2><p>In this section, I will show two monads, Option, and Future.</p><p>We\u2019re starting with Option. As you probably know, Option is a construct that allows us to avoid null pointers in Scala (in Haskell it\u2019s called Maybe). We use it for things that may or may not have a defined value. If a value is defined, option equals Some(value), and if it\u2019s not defined, it equals None.</p><p>Let\u2019s say we have a bunch of users stored in some database. We also have a service that can load a user from that database with a method loadUser(). It takes a name and provides us with an Option[User] because user with that name may or may not exist.</p><p>Each user may or may not have a child (for the sake of the example let\u2019s say there\u2019s a law enforced in the state which allows a maximum of one child). Note that the child is also of type User, so it can have a child too.</p><p>Last, but not least \u2014 we have a simple function getChild which returns the child for a given user.</p><p>Now let\u2019s say we want to load a user from the database and if they exist we want to see if they have a grandchild. We need to invoke these three functions:</p><p>String \u2192 Option[User] // load from dbUser \u2192 Option[User] // get childUser \u2192 Option[User] // get child\u2019s child</p><p>And here\u2019s the code.</p><p>If you didn\u2019t know how to flatMap a monad, you would probably wind up writing a couple of nested if-then-else branches, checking if option is defined. Nothing wrong with that, but this is far more elegant, concise and in the spirit of functional programming.</p><p>OK, let\u2019s take a closer look at our \u201coptional user\u201d monad. Remember what we learned earlier. Here\u2019s the analogy.</p><p>By the way, you can also write those functions as in-place lambda functions instead of defining them a priori. Then the code becomes this:</p><p>or even more concise:</p><p>You can also use a for-comprehension which is basically syntax sugar for mapping, flatMapping, and filtering. I don\u2019t want to digress too much so I won\u2019t explain it here, you can look it up; I\u2019ll just show you the code.</p><p>If you find all this a bit confusing, fiddling around with your own code helps a lot. You can create some dummy users, add a basic implementation to UserService.loadUser() so that it return one of them. Make them raise a ton of children and grandchildren and flatMap the living daylights out of them.</p><h2>Monads in practice: Future</h2><p>Future is a wrapper over some asynchronous operation. Once the future has been completed you can do whatever it is you need to do with its result.</p><p>There are two main ways to use a future:</p><ul><li>use future.onComplete() to define a callback that will work with the result of the future (not so cool)</li><li>use future.flatMap() to simply say which operations should be performed on the result once future is complete (cleaner and more powerful since you can return the result of the last operation)</li></ul><p>On to our example. We have an online store and customers who have placed thousands of orders. For each customer, we must now get his/her order, check which item the order is for, get the corresponding item from the database, make the actual purchase and write the result of purchase operation to log. Let\u2019s see that in code.</p><p>By the way, don\u2019t mind stuff like referencing global objects from within functions. I know it\u2019s not best practice. But that is completely beside the point here. Also, note that code above doesn\u2019t compile because I left out the implementations of service methods for clarity. Again, if you want to play with the example yourself (and I recommend it), you can create mock implementations yourself. e.g. def loadItem(order: Order) = Future(new Item{}).</p><p>Now, similarly to the Option example, there are a couple of functions that we will use. They\u2019re pretty trivial as each one simply invokes a method from the corresponding service.</p><p>We need to load the order for a given customer, get the item in question, make the purchase of that item and log the result. It\u2019s as easy as:</p><p>Here\u2019s the equally nice for-comprehension alternative, using direct service method invocations instead of the functions that were used above:</p><p>That\u2019s it. I hope I managed to shed some light on the mystery of monads.</p><h2>Conclusion</h2><p>Monad with his two weapons, unit and flatMap, is a pretty powerful guy. Of course, they are not the solution to all your problems. But thinking in this way (chaining operations and manipulating data using map, flatMap, filter etc., accompanied by other functional programming constructs such as pattern matching) really improves your reasoning about the code and lowers the number of bugs in it.</p><p>And given the fact that code is much more often read than written, readability and clearness of such code is a big plus. For example, here\u2019s an excerpt from the code I wrote at work today (I changed the names):</p><p>Forget entangled if-branches, nested loops with their off-by-one errors and callback hell. This code is simpler, prettier and, with a little help from the Scala compiler, works the first time you run it.</p><p>You can catch a glimpse of some other category theory constructs here or go for a more detailed reading here.</p><p>Regarding functional programming in general, if you like Scala you could start from here.</p><p>There are also some nice libraries that provide functional programming constructs, such as Scalaz (which was already mentioned earlier) and Cats (younger kid on the block) so try playing around with them; you can find some tutorials here.</p><p>And if you want to get seriously involved with functional programming, you will have to learn Haskell sooner or later (in case you don\u2019t already know it).</p><p>Here\u2019s my email: sinisalouc[at]gmail[dot]com. If you find any mistakes, think that some specific part needs improvement or simply want to get in touch, feel free to contact me.</p>", "tags": ["Programming", "Scala", "Functional Programming", "Monads", "Software Development"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*QaRmcPIBcbG0KakGZxPhZQ.png"], "url": "https://medium.com/javascript-scene/forget-the-click-bait-here-s-what-the-javascript-job-market-really-looks-like-in-2016-ddfe0d39b467", "dateCreated": "2015-12-17T05:10:47.143Z", "datePublished": "2015-12-17T05:10:47.143Z", "dateModified": "2018-06-14T05:15:33.472Z", "headline": "Forget the Click Bait. Here\u2019s What the JavaScript Job Market Really Looks Like.", "name": "Forget the Click Bait. Here\u2019s What the JavaScript Job Market Really Looks Like.", "description": "Today, Mashable released a click-baity article about the software developer job market called \u201cTo be a star programmer in 2016, learn Javascript and move to Utah\u201d. It paints a very misleading\u2026", "identifier": "ddfe0d39b467", "author": {"@type": "Person", "name": "Eric Elliott", "url": "https://medium.com/@_ericelliott"}, "creator": ["Eric Elliott"], "publisher": {"@type": "Organization", "name": "JavaScript Scene", "url": "https://medium.com/javascript-scene", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*k98ylK8u1sha-tSDD4UiBA.png"}}, "mainEntityOfPage": "https://medium.com/javascript-scene/forget-the-click-bait-here-s-what-the-javascript-job-market-really-looks-like-in-2016-ddfe0d39b467"}, "content": "<h1>Forget the Click Bait. Here\u2019s What the JavaScript Job Market Really Looks Like.</h1><a></a><a>Eric Elliott</a><a>Dec 17, 2015</a><p>Today, Mashable released a click-baity article about the software developer job market called \u201cTo be a star programmer in 2016, learn Javascript and move to Utah\u201d. It paints a very misleading picture. Let\u2019s set a few things straight.</p><p>It\u2019s a candidate\u2019s market, and that won\u2019t change in the foreseeable future.</p><p>A little background. I\u2019m a software developer. For the past several years, I have done a lot of interviewing to hire other software developers. I also train JavaScript developers in the skills they\u2019ll need to get great jobs. I have a deep background building and advising high velocity development teams for a variety of startups and fortune 500 companies.</p><p>I am also the technical advisor for tech talent agent extraordinaire, JS_Cheerleader (my agent \u2014 if you want to write your own ticket, reach out to her). She frequently interacts with the top tech companies in the industry, and keeps me in the loop about what they\u2019re looking for. Between that and feedback from students, I have a really good view of both sides of the JavaScript job market.</p><h2>You Should Learn JavaScript</h2><p>The Mashable article didn\u2019t get it all wrong. The \u201clearn JavaScript\u201d advice is solid. About 1/3rd of all developer jobs require some JavaScript knowledge (source: indeed.com). JavaScript is currently the most popular programming language with the richest OSS module ecosystem, and the only programming language with a really convincing universal deployment story: The \u201cwrite once, run everywhere\u201d dream that Java aspired to \u2014 Java fell short. JavaScript pulled it off.</p><p>Universal JavaScript is an app that runs on servers, on the web platform, and even in native devices (check out React Native), sharing a bulk of the same app logic (not just libraries) across all target platforms. If you\u2019re not using Universal JavaScript to write your apps, you\u2019re wasting a lot of time and money.</p><h2>It\u2019s Not Just Utah \u2014 Software is Hot Everywhere</h2><p>I know it made for a nice click-baity headline, and it\u2019s true that software development jobs are growing rapidly in Utah, but you also need to consider, what baseline is this growth coming from? Utah is a relatively small market on the national scale, with just 2\u20133k total software developer job openings. Compare to New York City 12k \u2014 20k openings, or San Francisco, which has a standing demand of 10k-15k. There are plenty of other cities that make Salt Lake City\u2019s coder job prospects look abysmal.</p><p>I\u2019ll switch to just JavaScript jobs now, since I already have the data available (gathered via indeed.com job search, December 2015):</p><p>* Washington DC, 5.3k* Oakland, CA, 4.7k* San Jose, CA 4k* Boston, MA, 3k* Los Angeles, CA, 2k</p><p>Compare to Salt Lake City\u2019s JavaScript dev demand: ~500 openings. All of Utah combined has only about 800 JS openings. If you\u2019re looking for a programming job, \u201cmove to Utah\u201d is myopic advice.</p><p>Want a programming job?Move literally anywhere.</p><p>What\u2019s more, you don\u2019t have to move even if your local market sucks. There is a national standing demand for thousands of remote JavaScript developers across the US, and there are similar remote openings around the globe, which provides even more opportunity for remote workers. If you\u2019re a great developer, you should strongly consider remote work opportunities. They\u2019re certainly harder to find and a lot more competitive, but definitely worth looking into.</p><h2>The Talent Gap is Real. And BIG.</h2><p>The talent gap is not getting filled by the new prospects entering the field.</p><p>Mashable made it sound like there are so many people learning to code that it\u2019s getting really competitive. Here\u2019s the hard truth:</p><p>Software development is and has always been a very challenging job that requires a variety of skills, including communication, collaboration, and technical writing. There\u2019s a good reason programmers earn about 2x the national average salary: It ain\u2019t easy.</p><ul><li>You must be driven and highly self-motivated.</li><li>You must be a fast and eager learner. (Tech changes quickly).</li><li>You must be a great communicator & collaborator.</li><li>You must be both detail oriented (for implementing & debugging), and big-picture oriented (for architecting).</li><li>You must have a working knowledge of math, logic, & abstraction.</li><li>You must be willing & able to put in some time off the clock to keep your skills sharp.</li></ul><p>If that sounds like you, you\u2019ll do very well. If that doesn\u2019t sound like you, you still may benefit from learning a little bit of code, but you should probably look at other career choices. No single career is right for everyone, and that\u2019s OK.</p><p>If you\u2019re having trouble finding a job, maybe you need to work on your skills or some sample OSS software to demonstrate that you can do the job. See \u201cWhy Hiring is So Hard in Tech\u201d, \u201c10 Interview Questions Every JavaScript Developer Should Know\u201d, and \u201cEvery Developer Needs a Code Portfolio\u201d if you really want to increase your odds.</p><p>You can\u2019t blame your programming job search troubles on the market.</p><p>In my experience, it\u2019s not that companies are \u201cdoing more filtering\u201d (well, maybe if you only look at JavaScript, circa 2008 compared to today. JavaScript has only recently taken a leading role as a language for serious application development).</p><p>What\u2019s really happening is that companies are getting better at screening for the skills that the job has always demanded.</p><p>The talent gap is not getting filled by the new prospects entering the field (yet \u2014 we\u2019re working very hard to fix that). Job growth is still outrunning the availability of qualified candidates by an unfortunately wide margin. In other words, from a hiring perspective, it\u2019s still hard to fill the roles.</p><p>It\u2019s so hard to fill the roles that in the most competitive cities, we frequently broaden the net and search internationally for qualified candidates. The number of foreign employees within a tech startup is 29% on average for the top 20 global ecosystems. In Silicon Valley that number is 45%.</p><p>It costs tens of thousands of dollars more and many months of waiting to hire somebody from another country on an H1-B Visa. Do you really think we\u2019d go to the trouble if it was easy to find somebody qualified locally?</p><p>If a whole industry, the government, and the president of the United States (see the TechHire initiative) is saying that we have a shortage of trained software developers, you should probably give more weight to that than to a sensationalist, poorly researched blog post.</p><h2>Why It\u2019s Hard to Find a Job</h2><p>It\u2019s easy to find articles breathlessly dismissing the talent gap because the author heard it\u2019s hard to find a tech job. Reality check: There are other reasons your roommate didn\u2019t get hired. Here are the really common ones:</p><ol><li>Companies often pass on very good prospects due to popular but worthless techniques like whiteboard coding challenges or puzzle problems (if you\u2019re doing those, stop now. They don\u2019t work, and they\u2019re costing you dearly). Bias also turns away a large number of potentially great coders. We need to get better at recognizing great candidates across the industry.</li><li>The candidate simply isn\u2019t good enough yet. JavaScript training sucks. 99/100 developers I interview can\u2019t answer basic questions about the two pillars of JavaScript: prototypal inheritance and functional programming. Both are used extensively in every large JS app I\u2019ve ever seen. A working knowledge of both is essential to every JS developer.</li><li>Entry level learning positions are scarce. As bad as companies are at general developer hiring, they do an even worse job of hiring junior developers and fostering a culture of learning on the job \u2014 where the most effective tech training actually gets done.</li></ol><p>Why is it so hard for companies to hire Jr developers and train them? Unless there\u2019s an excellent mentorship environment, Jr developers often take up to a year to start contributing productively to the team. Unfortunately, just over a year is the average time a Jr developer stays in their first role. In other words, unless the company is exceptionally good at finding, mentoring, and retaining junior developers, it doesn\u2019t make financial sense to do it.</p><p>The good news is that the best candidates are attracted to teams where they are challenged to learn a lot. High velocity development teams foster a culture of learning, pack the team with great mentors, and hire based on eagerness to learn new things. Such teams do very well & retain employees better. Newbies on those teams quickly climb the ranks into mentorship positions, feel more challenged and fulfilled, and stay with the company much longer.</p><p>If you\u2019re a weak candidate, you\u2019ll have a hard time in any market, but if you have some sample code to look at and you know your stuff, know this:</p><p>It\u2019s a candidate\u2019s market, and that won\u2019t change in the foreseeable future.</p><h2>The Evidence</h2><ul><li>Software developer job growth prospects from 2012\u20132022: 22% \u2014 More than double the average across all job categories: http://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm</li><li>Software developer is the 2nd largest growing job category in the United States. Only registered nurse positions are growing faster. http://www.fastcompany.com/3054142/the-future-of-work/these-will-be-the-most-in-demand-jobs-in-2016</li><li>There is a standing demand for hundreds of thousands of software developers right now, expected to grow to more than 1 million unfilled jobs by 2020: http://www.wsj.com/articles/computer-programming-is-a-trade-lets-act-like-it-1407109947</li></ul><p>Even all that compelling evidence is a very near-sighted view of programmer job prospects. Let\u2019s take a step back and look at the bigger picture.</p><h2>The Future</h2><p>I\u2019m going to share a few slides with you from a presentation I give on the importance of code, and why we still need to train a whole lot more people to do it.</p><p>Software is eating the worldThe web is eating software& JavaScript Rules the web.</p><p>In 2000, driving was the most common job in almost every state:</p><a>npr \u2014 \u201cThe Most Common Job in Every State\u201d</a><p>Software developer wasn\u2019t even on the map. By 2014, software developer was the most common job in 4 states:</p><a>npr \u2014 \u201cThe Most Common Job in Every State\u201d</a><p>By 2045, a human driving a car will look like a horse pulling a buggy.</p><p>Uber is already putting a huge strain on the global taxi industry. Uber plans to buy half a million self driving cars by 2020:</p><a>Will Uber Partner with Tesla on Self Driving Cars?</a><a>Oxdford Programme on the Impacts of Future Technology</a><p>Schools are not teaching people the skills they will need for tomorrow\u2019s jobs:</p><h2>The Rate of Change is Accelerating</h2><p>Literally all industry is being thoroughly disrupted or entirely uprooted by code, and in spite of those who see a little plateau in Moore\u2019s Law and declare it dead (I\u2019ve seen this happen countless times), the rate of technological transformation is still growing exponentially.</p><p>For every article I see declaring Moore\u2019s Law dead, I see 3 technologies set to put it back on track. Here\u2019s a recent headline:</p><p>\u201cGoogle: Our quantum computer is 100 million times faster than a conventional system\u201d</p><p>We\u2019re entering into the period of technological explosion where it will be blindingly obvious to us & to our children that technology is progressing faster than any human being can keep up with, and there are no signs that it\u2019s going to slow down in our lifetime, or in our childrens\u2019 lifetimes.</p><p>Here\u2019s a small list of technologies exploding right now that will open up thousands of new roles in 2016:</p><ul><li>AI</li><li>Drones</li><li>Virtual Reality</li><li>Augmented Reality</li><li>3d Printing & Robotic Manufacturing</li><li>Mobile Payments</li><li>Cryptocurrencies, Bitcoin, & the Blockchain</li></ul><p>For more on these technologies, and why they\u2019re going to transform the world as we know it and expand the exploding programming job market, read \u201cGet Ready for the Future: A High-Tech Video Time Capsule From My Future Self\u201d.</p><p>It\u2019s time to face facts:</p><p>Computers are the new paper & inkand programming is the new literacy.</p><p>The idea that we can train \u201ctoo many\u201d people to code is ridiculous. If there are more coders, there will be more software companies who need to hire more coders.</p><p>If you take only one thing from this article, let it be this:</p><p>Software training is a virtuous cycle, and it will not be exhausted by more coders in the field. There will just be more Facebooks, more Googles, and more Teslas founded to hire them.</p><p>What are you waiting for?Learn JavaScript right now.</p><p>Eric Elliott is the author of \u201cProgramming JavaScript Applications\u201d (O\u2019Reilly), and \u201cLearn JavaScript Universal App Development with Node, ES6, & React\u201d. He has contributed to software experiences for Adobe Systems, Zumba Fitness, The Wall Street Journal, ESPN, BBC, and top recording artists including Usher, Frank Ocean, Metallica, and many more.</p><p>He spends most of his time in the San Francisco Bay Area with the most beautiful woman in the world.</p>", "tags": ["2016", "JavaScript", "Programming"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*K2p_b1b8SMemFpxqtdLwug.jpeg"], "url": "https://blog.enki.com/coding-is-boring-unless-4e496720d664", "dateCreated": "2015-11-27T19:29:42.158Z", "datePublished": "2015-11-27T19:29:42.158Z", "dateModified": "2018-06-13T03:30:19.172Z", "headline": "Coding is boring, unless\u2026 - Enki Blog", "name": "Coding is boring, unless\u2026 - Enki Blog", "description": "Each new job was a good career move, and a high turnover is common in our industry. But my previous employers were not particularly happy that I left. Some of them tried hard to keep me, but I was so\u2026", "identifier": "4e496720d664", "author": {"@type": "Person", "name": "Bruno Marnette", "url": "https://blog.enki.com/@marnette.bruno"}, "creator": ["Bruno Marnette"], "publisher": {"@type": "Organization", "name": "Enki Blog", "url": "blog.enki.com", "logo": {"@type": "ImageObject", "width": 214, "height": 60, "url": "https://miro.medium.com/max/428/1*nD55i_zOTY5VgAax6T25yw.png"}}, "mainEntityOfPage": "https://blog.enki.com/coding-is-boring-unless-4e496720d664"}, "content": "<h1>Coding is boring, unless\u2026</h1><a></a><a>Bruno Marnette</a><a>Follow</a><a>Nov 27, 2015</a><a></a><p>As a developer, I never managed to stick to the same job for more than two years.</p><p>Each new job was a good career move, and a high turnover is common in our industry. But my previous employers were not particularly happy that I left. Some of them tried hard to keep me, but I was so bored that I couldn\u2019t stick around.</p><p>(Disclaimer: I was lucky enough to live in places where there are more programming jobs than programmers! I realize that changing jobs is not always an option.)</p><p>I am now co-founder and CTO of Enki. As such, I\u2019m responsible for the engineering culture. Part of my job is to make sure that our developers never get as bored as I have sometimes been in the past.</p><p>With the help of my team, we have devised a strategy against boredom and applied it to our company. And because this strategy has worked well so far, I wanted to share it here.</p><p>At Enki, we\u2018re lucky to be working on a challenging problem. We have plenty of interesting things to code and plenty of fun puzzles to solve. Therefore \u201cboredom\u201d doesn\u2019t feel like an urgent concern. But it never does at the start. Instead, boredom tends to creep in with time, and hit you at the worst possible moment.</p><p>This is why we\u2019re addressing this early, by building a culture which will save us (fingers crossed!) from ever getting bored.</p><h1>Too Long; Didn\u2019t Learn</h1><p>The most common and obvious cause of boredom for developers is a project that lasts too long.</p><p>I\u2019ve experienced this first-hand in my first job. My team was working on preparing and serving financial data through a convenient API. It was exciting at first because of the complexity and the scale of the data. I learned about high-performance data analysis and API design. But after one year, we were still working on the exact same dataset, with the exact same technologies. I was becoming a specialist of something too specific. There was nothing new for me to learn.</p><p>I could not change team or project because it made too much sense for the company to keep me where I was. I knew the data and the technology too well to be replaced. I couldn\u2019t justify to change the technology just for learning something new. I expressed my boredom and frustration, but it wasn\u2019t addressed, so I had to move on.</p><p>How to prevent that sort of feeling?</p><p>In our team, we try and prevent anyone from working on the same code, product or dataset for more than three months. This period is a bit arbitrary and perhaps too short for larger companies. But we generally believe in fast rotations.</p><p>To make this possible, we promote a full-stack culture. Each of our developers are able to work on any part of our code base (or could quickly learn how).</p><p>Another factor of prevention is to discuss these things constantly. We have direct, open, one-to-one discussions each week. If a developer starts feeling too comfortable or too specialized, it\u2019s time to rotate.</p><h1>Maintaining legacy code is boring</h1><p>You can tell when a project is in maintenance mode \u2014 officially or not \u2014 when developers spend 90% of their time fixing bugs instead of developing new features.</p><p>Some will say that maintenance is inevitable. Old code needs to be supported. Building software is like building a house. You need to maintain old houses and refurbish them from time to time. Right?</p><p>Yes and no. The common problem here is a problem of attitude.</p><p>I once had a mentor who was cynical about this. He was taking for granted that nothing could be done. It\u2019s how software development works, he would say. Life sucks, get used to it.</p><p>How to mitigate this?</p><p>Maintenance mode is sometimes the result of poor technical decisions combined with a lack of courage.</p><p>A large, monolithic code base with complex dependencies requires extra maintenance work. In contrast, a well architected micro-service infrastructure is a bit more flexible. When a micro-service becomes faulty, you can replace it. You can rewrite it from scratch, using a different language or technology. This way, you learn something new rather than patching legacy code. And if your architecture doesn\u2019t allow this yet, you can take steps to improve it, and learn some devops skills in the process.</p><p>A microservice strategy is only one among other possible ways to approach a problem of \u201cboring\u201d maintenance. What some places do is to build smart tools to make the maintenance more efficient and fun. An extreme example of that is what Facebook did with their massive PHP code base. They build their own compiler and their own typed language (Hack) on top of PHP to both facilitate maintenance and improve the developer experience. I suspect it didn\u2019t \u201csolve\u201d the legacy problems entirely, but it certainly make the work sound more interesting.</p><h1>Copy/pasting is boring</h1><p>There is coding, and then there is coding.</p><p>In some of my previous roles, I produced a lot of not-so-rewarding code. For instance, I was once writing Groovy and Python scripts for data integration. The data was complex, with dozens of inconsistent schemas, which didn\u2019t allow for much automation. I therefore had to write a lot of code, and my peers assumed that I was learning a lot.</p><p>But I was not. Why?</p><p>Because 50% of my code (hyperbole intended!) was a direct copy/paste of Stack Overflow. And another 40% was a copy/paste from other scripts. Either my colleagues\u2019 scripts or my own. It became repetitive. And there was little creativity or learning involved.</p><p>How are we trying to mitigate this?</p><p>As a team, we pay attention to the type of code written by others. We do that during code reviews, syncs and retrospectives. If someone spent a week writing not-so-creative code, we try to understand why.</p><p>Sometimes, the root of the problem is technical. We may be doing more scripting or configuration work than we should. In this case, we add more automation. Other times, we did the copy/paste for a reason. In this case, we try to share the load of boring work to get done with it.</p><h1>Internal tools are usually boring</h1><p>As developers, we like to create custom internal tools to solve specific problems, because creating new things is exciting. Also, building tailored solutions often feels cleaner than repurposing existing ones. But learning a proprietary tool is about 10x less interesting than learning a popular open-source technology.</p><p>Why?</p><p>Because you can\u2019t talk to your friends about it; you can\u2019t brag about knowing it; you can\u2019t read about it on Hacker News; you can\u2019t use it during hackathons.; you can\u2019t use it in your secret side project.</p><p>But a lot of companies fall into the trap of creating things that are not worth the boredom they create. In other words: they solve a short-term frustration only to cause more frustration in the long-term.</p><p>I have seen this first-hand in a previous job. I was constrained to use a company-made DSL for large-scale data integration. All I was learning was yet another SQL-like-ish jargon (hyperbole intended). I would have much preferred using and learning a low-level open technology like Spark. I would have been 10x more engaged, and even if my code was 2x more verbose, that would still make me 5x more productive. (Not exactly how the math works, but you see my point!).</p><p>What kind of culture can prevent this?</p><p>We try to keep a strong bias for open source technologies. If we can reuse something relevant and exciting, we do it. We don\u2019t shy away from the cutting edge. We throw away our custom code as soon as an open source technology becomes mature enough to replace it. And when our own custom code becomes generic enough, we open source it.</p><p>We occasionally make mistakes. For example, we were using the agenda.js library for a while to schedule our backend jobs, because it felt modern and exciting. But it turned out to complicate things, so we switched back to an older, more reliable technology (good old cron!). Still, we don\u2019t regret experimenting with it, because it was a valuable learning experience.</p><h1>Being a code-monkey is boring</h1><p>Another common cause of developer\u2019s boredom is poor people management. More specifically: top-down, dictatorial management of developers.</p><p>Supervisors with noble intentions can sometimes use this management style without realising it. Especially when a project is not going so well, or when a deadline is approaching. Under pressure, it is a natural reflex to try and cut discussions short, minimize brainstorming, and tell people exactly what to do without debate or explanation. Just for the sake of saving time and getting things done.</p><p>An understanding supervisee would not necessarily get upset by this; in fact, some people would (occasionally) appreciate the simplicity of being told exactly what to do. Assuming of course that it is asked in a way that feels appropriate.</p><p>There is however a hidden cost.</p><p>Knowing exactly what to code before coding transforms an intellectual and creative process into a mechanical process; in other words, it turns developers into code monkeys.</p><p>More importantly, engaged developers like to understand \u201cwhy\u201d they are doing things one way rather than another. Unless, of course, it\u2019s a just a hack to work around an edge case, or a temporary patch. But a developer who stops caring about the important decisions and the reasoning behind them is a developer ready to change their job.</p><p>How to prevent this?</p><p>The main thing needed is a culture that encourages open discussions. With a regular forum to debate, strategize and plan as a team what needs to be done. And to preserve such a culture, everyone in the team must be vigilant.</p><p>It is when times are tough (or deadlines are approaching) that mentees need to speak louder and mentors need to listen carefully.</p><h1>The day-to-day always gets boring</h1><p>Last but not least: the routine of a closed environment is the absolute killer of fun.</p><p>This is not specific to the developer role or the tech industry. It applies pretty much to any back-office job. Every day the same room, the same people, the same culture, the same role\u2026 Even in a fast-growing environment, and even when all these things are objectively \u201cgood\u201d, people start feeling entitled to the good parts and frustrated by the not-so-good parts.</p><p>How do we fight this?</p><p>A key ingredient here is diversity: hiring people with different backgrounds and origins (e.g. our team of 6 is currently British, French, Russian and Greek). Seeing the same people every day is definitely more interesting if each of these people can brings something different to the culture.</p><p>Also, we try to create frequent opportunities to step outside of the day-to-day.</p><p>For instance, we go to public meetups and hackathons together. We also have side projects and contribute to our favorite open source tools. We even help the rest of the team with less-technical work from time to time (e.g. hiring, marketing, distribution\u2026). Not because we\u2019re all good at this, but for a change.</p><p>We also organize team off-sites (e.g. Secret Cinema) and we have a weekly \u201cenkithon\u201d with no predefined agenda. During these, sometimes we hack something together. Sometimes we brainstorm a new idea. Sometimes we just play League of Legends. Or we go to the pub. The beauty of it comes from the fact that we don\u2019t know what we\u2019re going do until the last minute, when we decide together.</p><p>This little bit of chaos is the final ingredient in our recipe against boredom. And like every recipe, it can never really be perfected. Tweak the doses, replace the ingredients and repeat.</p>", "tags": ["Programming", "Software Development", "Engineering Culture"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*raWO3dhM4jMjf9VY-kZzNg.png"], "url": "https://medium.com/hackernoon/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f", "dateCreated": "2016-10-03T15:15:18.819Z", "datePublished": "2016-10-03T15:15:18.819Z", "dateModified": "2020-09-22T21:11:44.530Z", "headline": "How it feels to learn JavaScript in 2016 - HackerNoon.com - Medium", "name": "How it feels to learn JavaScript in 2016 - HackerNoon.com - Medium", "description": "The following is inspired by the article \u201cIt\u2019s the future\u201d from Circle CI. You can read the original here. This piece is just an opinion, and like any JavaScript framework, it shouldn\u2019t be taken too\u2026", "identifier": "d3a717dd577f", "author": {"@type": "Person", "name": "Jose Aguinaga", "url": "https://jjperezaguinaga.medium.com"}, "creator": ["Jose Aguinaga"], "publisher": {"@type": "Organization", "name": "HackerNoon.com", "url": "https://medium.com/hackernoon", "logo": {"@type": "ImageObject", "width": 417, "height": 60, "url": "https://miro.medium.com/max/834/1*_U3cyTY4DnQ5tvS93EBhiA.png"}}, "mainEntityOfPage": "https://medium.com/hackernoon/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f"}, "content": "<h1>How it feels to learn JavaScript in 2016</h1><a></a><a>Jose Aguinaga</a><a>Oct 3, 2016</a><p>No JavaScript frameworks were created during the writing of this article.</p><p>The following is inspired by the article \u201cIt\u2019s the future\u201d from Circle CI. You can read the original here. This piece is just an opinion, and like any JavaScript framework, it shouldn\u2019t be taken too seriously.</p><p>Hey, I got this new web project, but to be honest I haven\u2019t coded much web in a few years and I\u2019ve heard the landscape changed a bit. You are the most up-to date web dev around here right?</p><p>-The actual term is Front End engineer, but yeah, I\u2019m the right guy. I do web in 2016. Visualisations, music players, flying drones that play football, you name it. I just came back from JsConf and ReactConf, so I know the latest technologies to create web apps.</p><p>Cool. I need to create a page that displays the latest activity from the users, so I just need to get the data from the REST endpoint and display it in some sort of filterable table, and update it if anything changes in the server. I was thinking maybe using jQuery to fetch and display the data?</p><p>-Oh my god no, no one uses jQuery anymore. You should try learning React, it\u2019s 2016.</p><p>Oh, OK. What\u2019s React?</p><p>-It\u2019s a super cool library made by some guys at Facebook, it really brings control and performance to your application, by allowing you to handle any view changes very easily.</p><p>That sounds neat. Can I use React to display data from the server?</p><p>-Yeah, but first you need to add React and React DOM as a library in your webpage.</p><p>Wait, why two libraries?</p><p>-So one is the actual library and the second one is for manipulating the DOM, which now you can describe in JSX.</p><p>JSX? What is JSX?</p><p>-JSX is just a JavaScript syntax extension that looks pretty much like XML. It\u2019s kind of another way to describe the DOM, think of it as a better HTML.</p><p>What\u2019s wrong with HTML?</p><p>-It\u2019s 2016. No one codes HTML directly anymore.</p><p>Right. Anyway, if I add these two libraries then I can use React?</p><p>-Not quite. You need to add Babel, and then you are able to use React.</p><p>Another library? What\u2019s Babel?</p><p>-Oh, Babel is a transpiler that allows you to target specific versions of JavaScript, while you code in any version of JavaScript. You don\u2019t HAVE to include Babel to use ReactJS, but unless you do, you are stuck with using ES5, and let\u2019s be real, it\u2019s 2016, you should be coding in ES2016+ like the rest of the cool kids do.</p><p>ES5? ES2016+? I\u2019m getting lost over here. What\u2019s ES5 and ES2016+?</p><p>-ES5 stands for ECMAScript 5. It\u2019s the edition that has most people target since it has been implemented by most browsers nowadays.</p><p>ECMAScript?</p><p>-Yes, you know, the scripting standard JavaScript was based on in 1999 after its initial release in 1995, back then when JavaScript was named Livescript and only ran in the Netscape Navigator. That was very messy back then, but thankfully now things are very clear and we have, like, 7 editions of this implementation.</p><p>7 editions. For real. And ES5 and ES2016+ are?</p><p>-The fifth and seventh edition respectively.</p><p>Wait, what happened with the sixth?</p><p>-You mean ES6? Yeah, I mean, each edition is a superset of the previous one, so if you are using ES2016+, you are using all the features of the previous versions.</p><p>Right. And why use ES2016+ over ES6 then?</p><p>-Well, you COULD use ES6, but to use cool features like async and await, you need to use ES2016+. Otherwise you are stuck with ES6 generators with coroutines to block asynchronous calls for proper control flow.</p><p>I have no idea what you just said, and all these names are confusing. Look, I\u2019m just loading a bunch of data from a server, I used to be able to just include jQuery from a CDN and just get the data with AJAX calls, why can\u2019t I just do that?</p><p>-It\u2019s 2016 man, no one uses jQuery anymore, it ends up in a bunch of spaghetti code. Everyone knows that.</p><p>Right. So my alternative is to load three libraries to fetch data and display a HTML table.</p><p>-Well, you include those three libraries but bundle them up with a module manager to load only one file.</p><p>I see. And what\u2019s a module manager?</p><p>-The definition depends on the environment, but in the web we usually mean anything that supports AMD or CommonJS modules.</p><p>Riiight. And AMD and CommonJS are\u2026?</p><p>-Definitions. There are ways to describe how multiple JavaScript libraries and classes should interact. You know, exports and requires? You can write multiple JavaScript files defining the AMD or CommonJS API and you can use something like Browserify to bundle them up.</p><p>OK, that makes sense\u2026 I think. What is Browserify?</p><p>-It\u2019s a tool that allows you to bundle CommonJS described dependencies to files that can be run in the browser. It was created because most people publish those dependencies in the npm registry.</p><p>npm registry?</p><p>-It\u2019s a very big public repository where smart people put code and dependencies as modules.</p><p>Like a CDN?</p><p>-Not really. It\u2019s more like a centralised database where anyone can publish and download libraries, so you can use them locally for development and then upload them to a CDN if you want to.</p><p>Oh, like Bower!</p><p>-Yes, but it\u2019s 2016 now, no one uses Bower anymore.</p><p>Oh, I see\u2026 so I need to download the libraries from npm then?</p><p>-Yes. So for instance, if you want to use React , you download the React module and import it in your code. You can do that for almost every popular JavaScript library.</p><p>Oh, like Angular!</p><p>-Angular is so 2015. But yes. Angular would be there, alongside VueJS or RxJS and other cool 2016 libraries. Want to learn about those?</p><p>Let\u2019s stick with React, I\u2019m already learning too many things now. So, if I need to use React I fetch it from this npm and then use this Browserify thing?</p><p>-Yes.</p><p>That seems overly complicated to just grab a bunch of dependencies and tie them together.</p><p>-It is, that\u2019s why you use a task manager like Grunt or Gulp or Broccoli to automate running Browserify. Heck, you can even use Mimosa.</p><p>Grunt? Gulp? Broccoli? Mimosa? The heck are we talking about now?</p><p>-Task managers. But they are not cool anymore. We used them in like, 2015, then we used Makefiles, but now we wrap everything with Webpack.</p><p>Makefiles? I thought that was mostly used on C or C++ projects.</p><p>-Yeah, but apparently in the web we love making things complicated and then going back to the basics. We do that every year or so, just wait for it, we are going to do assembly in the web in a year or two.</p><p>Sigh. You mentioned something called Webpack?</p><p>-It\u2019s another module manager for the browser while being kind of a task runner as well. It\u2019s like a better version of Browserify.</p><p>Oh, Ok. Why is it better?</p><p>-Well, maybe not better, it\u2019s just more opinionated on how your dependencies should be tied. Webpack allows you to use different module managers, and not only CommonJS ones, so for instance native ES6 supported modules.</p><p>I\u2019m extremely confused by this whole CommonJS/ES6 thing.</p><p>-Everyone is, but you shouldn\u2019t care anymore with SystemJS.</p><p>Jesus christ, another noun-js. Ok, and what is this SystemJS?</p><p>-Well, unlike Browserify and Webpack 1.x, SystemJS is a dynamic module loader that allows you to tie multiple modules in multiple files instead of bundling them in one big file.</p><p>Wait, but I thought we wanted to build our libraries in one big file and load that!</p><p>-Yes, but because HTTP/2 is coming now multiple HTTP requests are actually better.</p><p>Wait, so can\u2019t we just add the three original libraries for React??</p><p>-Not really. I mean, you could add them as external scripts from a CDN, but you would still need to include Babel then.</p><p>Sigh. And that is bad right?</p><p>-Yes, you would be including the entire babel-core, and it wouldn\u2019t be efficient for production. On production you need to perform a series of pre-tasks to get your project ready that make the ritual to summon Satan look like a boiled eggs recipe. You need to minify assets, uglify them, inline css above the fold, defer scripts, as well as-</p><p>I got it, I got it. So if you wouldn\u2019t include the libraries directly in a CDN, how would you do it?</p><p>-I would transpile it from Typescript using a Webpack + SystemJS + Babel combo.</p><p>Typescript? I thought we were coding in JavaScript!</p><p>-Typescript IS JavaScript, or better put, a superset of JavaScript, more specifically JavaScript on version ES6. You know, that sixth version we talked about before?</p><p>I thought ES2016+ was already a superset of ES6! WHY we need now this thing called Typescript?</p><p>-Oh, because it allows us to use JavaScript as a typed language, and reduce run-time errors. It\u2019s 2016, you should be adding some types to your JavaScript code.</p><p>And Typescript obviously does that.</p><p>-Flow as well, although it only checks for typing while Typescript is a superset of JavaScript which needs to be compiled.</p><p>Sigh\u2026 and Flow is?</p><p>-It\u2019s a static type checker made by some guys at Facebook. They coded it in OCaml, because functional programming is awesome.</p><p>OCaml? Functional programming?</p><p>-It\u2019s what the cool kids use nowadays man, you know, 2016? Functional programming? High order functions? Currying? Pure functions?</p><p>I have no idea what you just said.</p><p>-No one does at the beginning. Look, you just need to know that functional programming is better than OOP and that\u2019s what we should be using in 2016.</p><p>Wait, I learned OOP in college, I thought that was good?</p><p>-So was Java before being bought by Oracle. I mean, OOP was good back in the days, and it still has its uses today, but now everyone is realising modifying states is equivalent to kicking babies, so now everyone is moving to immutable objects and functional programming. Haskell guys had been calling it for years, -and don\u2019t get me started with the Elm guys- but luckily in the web now we have libraries like Ramda that allow us to use functional programming in plain JavaScript.</p><p>Are you just dropping names for the sake of it? What the hell is Ramnda?</p><p>-No. Ramda. Like Lambda. You know, that David Chambers\u2019 library?</p><p>David who?</p><p>-David Chambers. Cool guy. Plays a mean Coup game. One of the contributors for Ramda. You should also check Erik Meijer if you are serious about learning functional programming.</p><p>And Erik Meijer is\u2026?</p><p>-Functional programming guy as well. Awesome guy. He has a bunch of presentations where he trashes Agile while using this weird coloured shirt. You should also check some of the stuff from Tj, Jash Kenas, Sindre Sorhus, Paul Irish, Addy Osmani-</p><p>Ok. I\u2019m going to stop you there. All that is good and fine, but I think all that is just so complicated and unnecessary for just fetching data and displaying it. I\u2019m pretty sure I don\u2019t need to know these people or learn all those things to create a table with dynamic data. Let\u2019s get back to React. How can I fetch the data from the server with React?</p><p>-Well, you actually don\u2019t fetch the data with React, you just display the data with React.</p><p>Oh, damn me. So what do you use to fetch the data?</p><p>-You use Fetch to fetch the data from the server.</p><p>I\u2019m sorry? You use Fetch to fetch the data? Whoever is naming those things needs a thesaurus.</p><p>-I know right? Fetch it\u2019s the name of the native implementation for performing XMLHttpRequests against a server.</p><p>Oh, so AJAX.</p><p>-AJAX is just the use of XMLHttpRequests. But sure. Fetch allows you to do AJAX based in promises, which then you can resolve to avoid the callback hell.</p><p>Callback hell?</p><p>-Yeah. Every time you perform an asynchronous request against the server, you need to wait for its response, which then makes you to add a function within a function, which is called the callback pyramid from hell.</p><p>Oh, Ok. And this promise thing solves it?</p><p>-Indeed. By manipulating your callbacks through promises, you can write easier to understand code, mock and test them, as well as perform simultaneous requests at once and wait until all of them are loaded.</p><p>And that can be done with Fetch?</p><p>-Yes, but only if your user uses an evergreen browser, otherwise you need to include a Fetch polyfill or use Request, Bluebird or Axios.</p><p>How many libraries do I need to know for god\u2019s sake? How many are of them?</p><p>-It\u2019s JavaScript. There has to be thousands of libraries that all do the same thing. We know libraries, in fact, we have the best libraries. Our libraries are huuuge, and sometimes we include pictures of Guy Fieri in them.</p><p>Did you just say Guy Fieri? Let\u2019s get this over with. What these Bluebird, Request, Axios libraries do?</p><p>-They are libraries to perform XMLHttpRequests that return promises.</p><p>Didn\u2019t jQuery\u2019s AJAX method start to return promises as well?</p><p>-We don\u2019t use the \u201cJ\u201d word in 2016 anymore. Just use Fetch, and polyfill it when it\u2019s not in a browser or use Bluebird, Request or Axios instead. Then manage the promise with await within an async function and boom, you have proper control flow.</p><p>It\u2019s the third time you mention await but I have no idea what it is.</p><p>-Await allows you to block an asynchronous call, allowing you to have better control on when the data is being fetch and overall increasing code readability. It\u2019s awesome, you just need to make sure you add the stage-3 preset in Babel, or use syntax-async-functions and transform-async-to-generator plugin.</p><p>This is insane.</p><p>-No, insane is the fact you need to precompile Typescript code and then transpile it with Babel to use await.</p><p>Wat? It\u2019s not included in Typescript?</p><p>-It does in the next version, but as of version 1.7 it only targets ES6, so if you want to use await in the browser, first you need to compile your Typescript code targeting ES6 and then Babel that shit up to target ES5.</p><p>At this point I don\u2019t know what to say.</p><p>-Look, it\u2019s easy. Code everything in Typescript. All modules that use Fetch compile them to target ES6, transpile them with Babel on a stage-3 preset, and load them with SystemJS. If you don\u2019t have Fetch, polyfill it, or use Bluebird, Request or Axios, and handle all your promises with await.</p><p>We have very different definitions of easy. So, with that ritual I finally fetched the data and now I can display it with React right?</p><p>-Is your application going to handle any state changes?</p><p>Err, I don\u2019t think so. I just need to display the data.</p><p>-Oh, thank god. Otherwise I would had to explain you Flux, and implementations like Flummox, Alt, Fluxible. Although to be honest you should be using Redux.</p><p>I\u2019m going to just fly over those names. Again, I just need to display data.</p><p>-Oh, if you are just displaying the data you didn\u2019t need React to begin with. You would had been fine with a templating engine.</p><p>Are you kidding me? Do you think this is funny? Is that how you treat your loved ones?</p><p>-I was just explaining what you could use.</p><p>Stop. Just stop.</p><p>-I mean, even if it\u2019s just using templating engine, I would still use a Typescript + SystemJS + Babel combo if I were you.</p><p>I need to display data on a page, not perform Sub Zero\u2019s original MK fatality. Just tell me what templating engine to use and I\u2019ll take it from there.</p><p>-There\u2019s a lot, which one you are familiar with?</p><p>Ugh, can\u2019t remember the name. It was a long time ago.</p><p>-jTemplates? jQote? PURE?</p><p>Err, doesn\u2019t ring a bell. Another one?</p><p>-Transparency? JSRender? MarkupJS? KnockoutJS? That one had two-way binding.</p><p>Another one?</p><p>-PlatesJS? jQuery-tmpl? Handlebars? Some people still use it.</p><p>Maybe. Are there similar to that last one?</p><p>-Mustache, underscore? I think now even lodash has one to be honest, but those are kind of 2014.</p><p>Err.. maybe it was newer.</p><p>-Jade? DustJS?</p><p>No.</p><p>-DotJS? EJS?</p><p>No.</p><p>-Nunjucks? ECT?</p><p>No.</p><p>-Mah, no one likes Coffeescript syntax anyway. Jade?</p><p>No, you already said Jade.</p><p>-I meant Pug. I meant Jade. I mean, Jade is now Pug.</p><p>Sigh. No. Can\u2019t remember. Which one would you use?</p><p>-Probably just ES6 native template strings.</p><p>Let me guess. And that requires ES6.</p><p>-Correct.</p><p>Which, depending on what browser I\u2019m using needs Babel.</p><p>-Correct.</p><p>Which, if I want to include without adding the entire core library, I need to load it as a module from npm.</p><p>-Correct.</p><p>Which, requires Browserify, or Wepback, or most likely that other thing called SystemJS.</p><p>-Correct.</p><p>Which, unless it\u2019s Webpack, ideally should be managed by a task runner.</p><p>-Correct.</p><p>But, since I should be using functional programming and typed languages I first need to pre-compile Typescript or add this Flow thingy.</p><p>-Correct.</p><p>And then send that to Babel if I want to use await.</p><p>-Correct.</p><p>So I can then use Fetch, promises, and control flow and all that magic.</p><p>-Just don\u2019t forget to polyfill Fetch if it\u2019s not supported, Safari still can\u2019t handle it.</p><p>You know what. I think we are done here. Actually, I think I\u2019m done. I\u2019m done with the web, I\u2019m done with JavaScript altogether.</p><p>-That\u2019s fine, in a few years we all are going to be coding in Elm or WebAssembly.</p><p>I\u2019m just going to move back to the backend. I just can\u2019t handle these many changes and versions and editions and compilers and transpilers. The JavaScript community is insane if it thinks anyone can keep up with this.</p><p>-I hear you. You should try the Python community then.</p><p>Why?</p><p>-Ever heard of Python 3?</p><p>Update: Thanks for pointing typos and mistakes, I\u2019ll update the article as noted. Discussion in HackerNews and Reddit.</p><a></a><a></a><a></a><p>Hacker Noon is how hackers start their afternoons. We\u2019re a part of the @AMI family. We are now accepting submissions and happy to discuss advertising & sponsorship opportunities.</p><p>If you enjoyed this story, we recommend reading our latest tech stories and trending tech stories. Until next time, don\u2019t take the realities of the world for granted!</p><a></a>", "tags": ["JavaScript", "Programming", "Web Development", "Tech", "Software Development"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*cBFSQ9Ytv_D0jwGtpuL5WA.png"], "url": "https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53", "dateCreated": "2016-07-23T18:03:48.003Z", "datePublished": "2016-07-23T18:03:48.003Z", "dateModified": "2021-06-13T19:48:58.611Z", "headline": "Goodbye, Object Oriented Programming - Charles Scalfani - Medium", "name": "Goodbye, Object Oriented Programming - Charles Scalfani - Medium", "description": "I\u2019ve been programming in Object Oriented languages for decades. The first OO language I used was C++ and then Smalltalk and finally .NET and Java. I was gung-ho to leverage the benefits of\u2026", "identifier": "a59cda4c0e53", "author": {"@type": "Person", "name": "Charles Scalfani", "url": "https://cscalfani.medium.com"}, "creator": ["Charles Scalfani"], "publisher": {"@type": "Organization", "name": "Medium", "url": "https://cscalfani.medium.com/", "logo": {"@type": "ImageObject", "width": 308, "height": 60, "url": "https://miro.medium.com/max/616/1*OMF3fSqH8t4xBJ9-6oZDZw.png"}}, "mainEntityOfPage": "https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53"}, "content": "<h1>Goodbye, Object Oriented Programming</h1><a></a><a>Charles Scalfani</a><a>Jul 23, 2016\u00b710 min read</a><p>I\u2019ve been programming in Object Oriented languages for decades. The first OO language I used was C++ and then Smalltalk and finally .NET and Java.</p><p>I was gung-ho to leverage the benefits of Inheritance, Encapsulation, and Polymorphism. The Three Pillars of the Paradigm.</p><p>I was eager to gain the promise of Reuse and leverage the wisdom gained by those who came before me in this new and exciting landscape.</p><p>I couldn\u2019t contain my excitement at the thought of mapping my real-world objects into their Classes and expected the whole world to fall neatly into place.</p><p>I couldn\u2019t have been more wrong.</p><h1>Inheritance, the First Pillar to Fall</h1><p>At first glance, Inheritance appears to be the biggest benefit of the Object Oriented Paradigm. All the simplistic examples of shape hierarchies that are paraded out as examples to the newly indoctrinated seem to make logical sense.</p><p>And Reuse is the word of the day. No\u2026 make that the year and perhaps evermore.</p><p>I swallowed this whole and rushed out into the world with my newfound insight.</p><h2>Banana Monkey Jungle Problem</h2><p>With religion in my heart and problems to solve, I started building Class Hierarchies and writing code. And all was right with the world.</p><p>I\u2019ll never forget that day when I was ready to cash in on the promise of Reuse by inheriting from an existing class. This was the moment I had been waiting for.</p><p>A new project came along and I thought back to that Class that I was so fond of in my last project.</p><p>No problem. Reuse to the rescue. All I gotta do is simply grab that Class from the other project and use it.</p><p>Well\u2026 actually\u2026 not just that Class. We\u2019re gonna need the parent Class. But\u2026 But that\u2019s it.</p><p>Ugh\u2026 Wait\u2026 Looks like we gonna also need the parent\u2019s parent too... And then\u2026 We\u2019re going to need ALL of the parents. Okay\u2026 Okay\u2026 I handle this. No problem.</p><p>And great. Now it won\u2019t compile. Why?? Oh, I see\u2026 This object contains this other object. So I\u2019m gonna need that too. No problem.</p><p>Wait\u2026 I don\u2019t just need that object. I need the object\u2019s parent and its parent\u2019s parent and so on and so on with every contained object and ALL the parents of what those contain along with their parent\u2019s, parent\u2019s, parent\u2019s\u2026</p><p>Ugh.</p><p>There\u2019s a great quote by Joe Armstrong, the creator of Erlang:</p><p>The problem with object-oriented languages is they\u2019ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.</p><h2>Banana Monkey Jungle Solution</h2><p>I can tame this problem by not creating hierarchies that are too deep. But if Inheritance is the key to Reuse, then any limits I place on that mechanism will surely limit the benefits of Reuse. Right?</p><p>Right.</p><p>So what\u2019s a poor Object Oriented Programmer, who\u2019s had a healthy helping of the Kool-aid, to do?</p><p>Contain and Delegate. More on this later.</p><h2>The Diamond Problem</h2><p>Sooner or later, the following problem will rear its ugly and, depending on the language, unsolvable head.</p><p>Most OO languages do not support this, even though this seems to make logical sense. What\u2019s so difficult about supporting this in OO languages?</p><p>Well, imagine the following pseudocode:</p><p>Notice that both the Scanner class and the Printer class implement a function called start.</p><p>So which start function does the Copier class inherit? The Scanner one? The Printer one? It can\u2019t be both.</p><h2>The Diamond Solution</h2><p>The solution is simple. Don\u2019t do that.</p><p>Yes that\u2019s right. Most OO languages don\u2019t let you do this.</p><p>But, but\u2026 what if I have to model this? I want my Reuse!</p><p>Then you must Contain and Delegate.</p><p>Notice here that the Copier class now contains an instance of a Printer and of a Scanner. It delegates the start function to the Printer class\u2019s implementation. It could just as easily delegated to the Scanner.</p><p>This problem is yet another crack in the Inheritance pillar.</p><h2>The Fragile Base Class Problem</h2><p>So I\u2019m making my hierarchies shallow and keeping them from being cyclical. No diamonds for me.</p><p>And all was right with the world. That is until\u2026</p><p>One day, my code works and the next day it stops working. Here\u2019s the kicker. I didn\u2019t change my code.</p><p>Well, maybe it\u2019s a bug\u2026 But wait\u2026 Something did change\u2026</p><p>But it wasn\u2019t in my code. Turns out the change was in the class that I inherited from.</p><p>How could a change in the Base class break my code??</p><p>This is how\u2026</p><p>Imagine the following Base class (It\u2019s written in Java, but it should be easy to understand if you don\u2019t know Java):</p><p>IMPORTANT: Notice the commented line of code. This line is going to be changed later which will break things.</p><p>This class has 2 functions on its interface, add() and addAll(). The add() function will add a single element and addAll() will add multiple elements by calling the add function.</p><p>And here\u2019s the Derived class:</p><a>@Override</a><a>@Override</a><p>The ArrayCount class is a specialization of the general Array class. The only behavioral difference is that the ArrayCount keeps a count of the number of elements.</p><p>Let\u2019s look at both of these classes in detail.</p><p>The Array add() adds an element to a local ArrayList.The Array addAll() calls the local ArrayList add for each element.</p><p>The ArrayCount add() calls its parent\u2019s add() and then increments the count.The ArrayCount addAll() calls its parent\u2019s addAll() and then increments the count by the number of elements.</p><p>And all works fine.</p><p>Now for the breaking change. The commented line of code in the Base class is changed to the following:</p><p>As far as the owner of the Base class is concerned, it still functions as advertised. And all of the automated tests still pass.</p><p>But the owner is oblivious to the Derived class. And the owner of Derived class is in for a rude awakening.</p><p>Now ArrayCount addAll() calls its parent\u2019s addAll() which internally calls the add() which has been OVERRIDEN by the Derived class.</p><p>This causes the count to be incremented each time the Derived class\u2019s add() is called and then it\u2019s incremented AGAIN by the number of elements that were added in the Derived class\u2019s addAll().</p><p>IT\u2019S COUNTED TWICE.</p><p>If this can happen, and it does, the author of the Derived class must KNOW how the Base class has been implemented. And they must be informed about every change in the Base class since it could break their Derived class in unpredictable ways.</p><p>Ugh! This huge crack is forever threatening the stability of precious Inheritance pillar.</p><h2>The Fragile Base Class Solution</h2><p>Once again Contain and Delegate to the rescue.</p><p>By using Contain and Delegate, we go from White Box programming to Black Box programming. With White Box programming, we have to look at the implementation of the base class.</p><p>With Black Box programming, we can be completely ignorant of the implementation since we cannot inject code into the Base class by overriding one of its functions. We only have to concern ourselves with the Interface.</p><p>This trend is disturbing\u2026</p><p>Inheritance was supposed to be a huge win for Reuse.</p><p>Object Oriented languages don\u2019t make Contain and Delegate easy to do. They were designed to make Inheritance easy.</p><p>If you\u2019re like me, you\u2019re starting to wonder about this Inheritance thing. But more important, this should shake your confidence in the power of Classification via Hierarchies.</p><h2>The Hierarchy Problem</h2><p>Every time I start at a new company, I struggle with the problem when I\u2019m creating a place to put my Company Documents, e.g. the Employee Handbook.</p><p>Do I create a folder called Documents and then create a folder called Company in that?</p><p>Or do I create a folder called Company and then create a folder called Documents in that?</p><p>Both work. But which is right? Which is best?</p><p>The idea of Categorical Hierarchies was that there were Base Classes (parents) that were more general and that Derived Classes (children) were more specialized versions of those classes. And even more specialized as we make our way down the inheritance chain. (See the Shape Hierarchy above)</p><p>But if a parent and child could arbitrarily switch places, then clearly something is wrong with this model.</p><h2>The Hierarchy Solution</h2><p>What\u2019s wrong is\u2026</p><p>Categorical Hierarchies don\u2019t work.</p><p>So what are hierarchies good for?</p><p>Containment.</p><p>If you look at the real world, you\u2019ll see Containment (or Exclusive Ownership) Hierarchies everywhere.</p><p>What you won\u2019t find is Categorical Hierarchies. Let that sink in for a moment. The Object Oriented Paradigm was predicated upon the real world, one filled with Objects. But then it uses a broken model, viz. Categorical Hierarchies, where there is no real-world analogy.</p><p>But the real world is filled with Containment Hierarchies. A great example of a Containment Hierarchy is your socks. They are in a sock drawer which is contained in one drawer in your dresser which is contained in your bedroom which is contained in your house, etc.</p><p>Directories on your hard drive are another example of a Containment Hierarchy. They contains files.</p><p>So how do we categorize then?</p><p>Well, if you think of the Company Documents, it pretty much doesn\u2019t matter where I put them. I can put them in a folder of Documents or a folder called Stuff.</p><p>The way I categorize it is with tags. I tag the file with the following tags:</p><p>Tags have no order or hierarchy. (This solves the Diamond Problem too.)</p><p>Tags are analogous to interfaces since you can have multiple types associated with the document.</p><p>But with so many cracks, it looks like the Inheritance pillar has fallen.</p><p>Goodbye, Inheritance.</p><h1>Encapsulation, the Second Pillar to Fall</h1><p>At first glance, Encapsulation appears to be second biggest benefit of Object Oriented Programming.</p><p>Object state variables are protected from outside access, i.e. they\u2019re Encapsulated in the Object.</p><p>No longer will we have to worry about global variables that are being accessed by who-knows-who.</p><p>Encapsulation is a Safe for your variables.</p><p>This Encapsulation thing is INCREDIBLE!!</p><p>Long live Encapsulation\u2026</p><p>That is until\u2026</p><h2>The Reference Problem</h2><p>For efficiency sake, Objects are passed to functions NOT by their value but by reference.</p><p>What that means is that functions will not pass the Object, but instead pass a reference or pointer to the Object.</p><p>If an Object is passed by reference to an Object Constructor, the constructor can put that Object reference in a private variable which is protected by Encapsulation.</p><p>But the passed Object is NOT safe!</p><p>Why not? Because some other piece of code has a pointer to the Object, viz. the code that called the Constructor. It MUST have a reference to the Object otherwise it couldn\u2019t pass it to the Constructor?</p><h2>The Reference Solution</h2><p>The Constructor will have to Clone the passed in Object. And not a shallow clone but a deep clone, i.e. every object that is contained in the passed in Object and every object in those objects and so on and so on.</p><p>So much for efficiency.</p><p>And here\u2019s the kicker. Not all objects can be Cloned. Some have Operating System resources associated with them making cloning useless at best or at worst impossible.</p><p>And EVERY single mainstream OO language has this problem.</p><p>Goodbye, Encapsulation.</p><h1>Polymorphism, the Third Pillar to Fall</h1><p>Polymorphism was the redheaded stepchild of the Object Oriented Trinity.</p><p>It\u2019s sort of the Larry Fine of the group.</p><p>Everywhere they went he was there, but he was just a supporting character.</p><p>It\u2019s not that Polymorphism isn\u2019t great, it\u2019s just that you don\u2019t need an Object Oriented language to get this.</p><p>Interfaces will give you this. And without all of the baggage of OO.</p><p>And with Interfaces, there isn\u2019t a limit to how many different behaviors you can mix in.</p><p>So without much ado, we say goodbye to OO Polymorphism and hello to interface-based Polymorphism.</p><h1>Broken Promises</h1><p>Well, OO sure promised a lot in the early days. And these promises are still being made to naive programmers sitting in classrooms, reading blogs and taking online courses.</p><p>It\u2019s taken me years to realize how OO lied to me. I too was wide-eyed and inexperienced and trusting.</p><p>And I got burned.</p><p>Good-bye, Object Oriented Programming.</p><h1>So then what?</h1><p>Hello, Functional Programming. It\u2019s been so nice to work with you over the past few years.</p><p>Just so you know, I\u2019m NOT taking any of your promises at face value. I\u2019m going to have to see it to believe it.</p><p>Once burned, twice shy and all.</p><p>You understand.</p><p>If you liked this, click the\ud83d\udc9a below so other people will see this here on Medium.</p><p>Update circa 2021: I have a book that will free you from the Object-oriented quagmire, Functional Programming Made Easier: A Step-by-Step Guide.</p><p>If you want to join a community of web developers learning and helping each other to develop web apps using Functional Programming in Elm please check out my Facebook Group, Learn Elm Programming https://www.facebook.com/groups/learnelm/</p><p>My Twitter: @cscalfani</p>", "tags": ["Programming", "JavaScript", "Function", "Tech", "Technology"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*MRPl_SNuRGJchb6eOAnkSA.jpeg"], "url": "https://medium.com/@housecor/angular-2-versus-react-there-will-be-blood-66595faafd51", "dateCreated": "2016-01-03T20:49:44.303Z", "datePublished": "2016-01-03T20:49:44.303Z", "dateModified": "2019-07-29T17:37:59.638Z", "headline": "Angular 2 versus React: There Will Be Blood - Cory House - Medium", "name": "Angular 2 versus React: There Will Be Blood - Cory House - Medium", "description": "Angular 2 has reached Beta and appears poised to become the hot new framework of 2016. It\u2019s time for a showdown. Let\u2019s see how it stacks up against 2015\u2019s darling: React. Disclaimer: I enjoyed\u2026", "identifier": "66595faafd51", "author": {"@type": "Person", "name": "Cory House", "url": "https://medium.com/@housecor"}, "creator": ["Cory House"], "publisher": {"@type": "Organization", "name": "Medium", "url": "https://medium.com/", "logo": {"@type": "ImageObject", "width": 308, "height": 60, "url": "https://miro.medium.com/max/616/1*OMF3fSqH8t4xBJ9-6oZDZw.png"}}, "mainEntityOfPage": "https://medium.com/@housecor/angular-2-versus-react-there-will-be-blood-66595faafd51"}, "content": "<h1>Angular 2 versus React: There Will Be Blood</h1><a></a><a>Cory House</a><a>Jan 3, 2016\u00b710 min read</a><p>Angular 2 has reached Beta and appears poised to become the hot new framework of 2016. It\u2019s time for a showdown. Let\u2019s see how it stacks up against 2015\u2019s darling: React.</p><p>Disclaimer: I enjoyed working in Angular 1 but switched to React in 2015. I\u2019ve published Pluralsight courses on React and Flux and React and Redux in ES6 (free trial). So yes, I\u2019m biased. But I\u2019m attacking both sides.</p><p>Alright, let\u2019s do this. There will be blood.</p><a>@jwcarrol</a><h1>You\u2019re Comparing Apples and Orangutans!</h1><p>Sigh. Yes, Angular is a framework, React is a library. Some say this difference makes comparing them illogical. Not at all!</p><p>Choosing between Angular and React is like choosing between buying an off-the-shelf computer and building your own with off-the-shelf parts.</p><p>This post considers the merits of these two approaches. I compare React\u2019s syntax and component model to Angular\u2019s syntax and component model. This is like comparing an off-the-shelf computer\u2019s CPU to a raw CPU. Apples to apples.</p><h1>Angular 2 Advantages</h1><p>Let\u2019s start by considering Angular 2\u2019s advantages over React.</p><h2>Low Decision Fatigue</h2><p>Since Angular is a framework, it provides significantly more opinions and functionality out of the box. With React, you typically pull a number of other libraries off the shelf to build a real app. You\u2019ll likely want libraries for routing, enforcing unidirectional flows, web API calls, testing, dependency management, and so on. The number of decisions is pretty overwhelming. This is why React has so many starter kits (I\u2019ve published two).</p><p>Angular offers more opinions out of the box, which helps you get started more quickly without feeling intimidated by decisions. This enforced consistency also helps new hires feel at home more quickly and makes switching developers between teams more practical.</p><p>I admire how the Angular core team has embraced TypeScript, which leads to the next advantage\u2026</p><h2>TypeScript = Clear Path</h2><p>Sure, TypeScript isn\u2019t loved by all, but Angular 2\u2019s opinionated take on which flavor of JavaScript to use is a big win. React examples across the web are frustratingly inconsistent \u2014 it\u2019s presented in ES5 and ES6 in roughly equal numbers, and it currently offers three different ways to declare components. This creates confusion for newcomers. (Angular also embraces decorators instead of extends \u2014 many would consider this a plus as well).</p><p>While Angular 2 doesn\u2019t require TypeScript, the Angular core team certainly embraces it and defaults to using TypeScript in documentation. This means related examples and open source projects are more likely to feel familiar and consistent. Angular already provides clear examples that show how to utilize the TypeScript compiler. (though admittedly, not everyone is embracing TypeScript yet, but I suspect shortly after launch it\u2019ll become the de facto standard). This consistency should help avoid the confusion and decision overload that comes with getting started with React.</p><h2>Reduced Churn</h2><p>2015 was the year of JavaScript fatigue. Although React itself is expected to be quite stable with version 15 coming soon, React\u2019s ecosystem has churned at a rapid pace, particularly around the long list of Flux flavors and routing. So anything you write in React today may feel out of date or require breaking changes in the future if you lean on one of many related libraries.</p><p>In contrast, Angular 2 is a careful, methodical reinvention of a mature, comprehensive framework. So Angular is less likely to churn in painful ways after release. And as a full framework, when you choose Angular, you can trust a single team to make careful decisions about the future. In React, it\u2019s your responsibility to herd a bunch of disparate, fast-moving, open-source libraries into a comprehensive whole that plays well together. It\u2019s time-consuming, frustrating, and a never-ending job.</p><h2>Broad Tooling Support</h2><p>As you\u2019ll see below, I consider React\u2019s JSX a big win. However, you need to select tooling that supports JSX. React has become so popular that tooling support is rarely a problem today, but new tooling such as IDEs and linters are unlikely to support JSX on day one. Angular 2\u2019s templates store markup in a string or in separate HTML files, so it doesn\u2019t require special tooling support (though it appears tooling to intelligently parse Angular\u2019s string templates is on the way).</p><h2>Web Component Friendly</h2><p>Angular 2\u2019s design embraces the web component\u2019s standard. Sheesh, I\u2019m embarrassed I forgot to mention this initially \u2014 I recently published a course on web components! In short, the components that you build in Angular 2 should be much easier to convert into plain, native web components than React\u2019s components. Sure, browser support is still weak, but this could be a big win in the long-term.</p><p>Angular\u2019s approach comes with its own set of gotchas, which is a good segue for discussing React\u2019s advantages\u2026</p><h1>React Advantages</h1><p>Alright, let\u2019s consider what sets React apart.</p><h2>JSX</h2><p>JSX is an HTML-like syntax that compiles down to JavaScript. Markup and code are composed in the same file. This means code completion gives you a hand as you type references to your component\u2019s functions and variables. In contrast, Angular\u2019s string-based templates come with the usual downsides: No code coloring in many editors, limited code completion support, and run-time failures. You\u2019d normally expect poor error messaging as well, but the Angular team created their own HTML parser to fix that. (Bravo!)</p><p>If you don\u2019t like Angular string-based templates, you can move the templates to a separate file, but then you\u2019re back to what I call \u201cthe old days:\u201d wiring the two files together in your head, with no code completion support or compile-time checking to assist. That doesn\u2019t seem like a big deal until you\u2019ve enjoyed life in React. Composing components in a single compile-time checked file is one of the big reasons JSX is so special.</p><p>For more on why JSX is such a big win, see JSX: The Other Side of the Coin.</p><h2>React Fails Fast and Explicitly</h2><p>When you make a typo in React\u2019s JSX, it won\u2019t compile. That\u2019s a beautiful thing. It means you know immediately exactly which line has an error. It tells you immediately when you forget to close a tag or reference a property that doesn\u2019t exist. In fact, the JSX compiler specifies the line number where the typo occurred. This behavior radically speeds development.</p><p>In contrast, when you mistype a variable reference in Angular 2, nothing happens at all. Angular 2 fails quietly at run time instead of compile-time. It fails slowly. I load the app and wonder why my data isn\u2019t displaying. Not fun.</p><h2>React is JavaScript-Centric</h2><p>Here it is. This is the fundamental difference between React and Angular. Unfortunately, Angular 2 remains HTML-centric rather than JavaScript-centric. Angular 2 failed to solve its most fundamental design problem:</p><p>Angular 2 continues to put \u201cJS\u201d into HTML. React puts \u201cHTML\u201d into JS.</p><p>I can\u2019t emphasize the impact of this schism enough. It fundamentally impacts the development experience. Angular\u2019s HTML-centric design remains its greatest weakness. As I cover in \u201cJSX: The Other Side of the Coin\u201d, JavaScript is far more powerful than HTML. Thus, it\u2019s more logical to enhance JavaScript to support markup than to enhance HTML to support logic. HTML and JavaScript need to be glued together somehow, and React\u2019s JavaScript-centric approach is fundamentally superior to Angular, Ember, and Knockout\u2019s HTML-centric approach.</p><p>Here\u2019s why\u2026</p><h2>React\u2019s JavaScript-centric design = simplicity</h2><p>Angular 2 continues Angular 1\u2019s approach of trying to make HTML more powerful. So you have to utilize Angular 2's unique syntax for simple tasks like looping and conditionals. For example, Angular 2 offers both one and two way binding via two syntaxes that are unfortunately quite different:</p><p>In React, binding markup doesn\u2019t change based on this decision (it\u2019s handled elsewhere, as I\u2019d argue it should be). In either case, it looks like this:</p><p>Angular 2 supports inline master templates using this syntax:</p><p>The above snippet loops over an array of heroes. I have multiple concerns:</p><ul><li>Declaring a \u201cmaster template\u201d via a preceeding asterisk is cryptic.</li><li>The pound sign in front of hero declares a local template variable. This key concept looks like needless noise (if preferred, you can use `var`).</li><li>The ngFor adds looping semantics to HTML via an Angular-specific attribute.</li></ul><p>Contrast Angular 2\u2019s syntax above with React\u2019s pure JS*: (admittedly the key property below is React-specific)</p><p>Since JS supports looping natively, React\u2019s JSX can simply leverage all the power of JS for such things and do much more with map, filter, etc.</p><p>Just read the Angular 2 Cheat Sheet. That\u2019s not HTML. That\u2019s not JavaScript. It\u2019s Angular.</p><p>To read Angular: Learn a long list of Angular-specific syntax.</p><p>To read React: Learn JavaScript.</p><p>React is unique in its syntactic and conceptual simplicity. Consider iterating in today\u2019s popular JS frameworks/libraries:</p><p>All except React use framework specific replacements for something that is native and trivial in JavaScript: a loop. That\u2019s the beauty of React. It embraces the power of JavaScript to handle markup, so no odd new syntax is required.</p><p>Angular 2\u2019s syntactic oddities continue with click binding:</p><p>In contrast, React again uses plain \u2018ol JavaScript:</p><p>And since React includes a synthetic event system (as does Angular 2), you don\u2019t have to worry about the performance implications of declaring event handlers inline like this.</p><p>Why fill your head with a framework\u2019s unique syntax if you don\u2019t have to? Why not simply embrace the power of JS?</p><h2>Luxurious Development Experience</h2><p>JSX\u2019s code completion support, compile-time checks, and rich error messaging already create an excellent development experience that saves both typing and time. But combine all that with hot reloading with time travel and you have a rapid development experience like no other.</p><h2>Size Concerns</h2><p>Here\u2019s the sizes of some popular frameworks and libraries, minified (source):</p><p>Angular 2: 566k (766k with RxJS)Ember: 435kAngular 1: 143kReact + Redux: 139k</p><p>Edit: Sorry, I had incorrect numbers earlier that were for simple ToDoMVC apps instead of the raw frameworks. Also, the Angular 2 number is expected to drop for the final release. The sizes listed are for the framework, minified, in the browser (no gzip is factored in here).</p><p>To make a real comparison, I built Angular 2\u2019s Tour of Heroes app in both Angular 2 and React (I used the new React Slingshot starter kit). The result?</p><p>Angular 2: 764k minifiedReact + Redux: 151k minified</p><p>So Angular 2 is currently over four times the size of a React + Redux app of comparable simplicity. (Again, Angular 2 is expected to lose some weight before the final release).</p><p>Now that said, I admit that concerns about the size of frameworks may be overblown:</p><p>Large apps tend to have a minimum of several hundred kilobytes of code \u2014 often more \u2014 whether they\u2019re built with a framework or not. Developers need abstractions to build complex software, and whether they come from a framework or are hand-written, they negatively impact the performance of apps.</p><p>Even if you were to eliminate frameworks entirely, many apps would still have hundreds of kilobytes of JavaScript. \u2014 Tom Dale in JavaScript Frameworks and Mobile Performance</p><p>Tom is right. Frameworks like Angular and Ember are bigger because they offer many more features out of the box.</p><p>However, my concern is this: many apps don\u2019t need everything these large frameworks put in the box. In a world that\u2019s increasingly embracing microservices, microapps, and single-responsibility packages, React gives you the power to \u201cright-size\u201d your application by carefully selecting only what is necessary. In a world with over 200,000 npm modules, that\u2019s a powerful place to be.</p><h2>React Embraces the Unix Philosophy.</h2><p>React is a library. It\u2019s precisely the opposite philosophy of large, comprehensive frameworks like Angular and Ember. So when you select React, you\u2019re free to choose modern best-of-breed libraries that solve your problem best. JavaScript moves fast, and React allows you to swap out small pieces of your application for better libraries instead of waiting around and hoping your framework will innovate.</p><p>Unix has stood the test of time. Here\u2019s why:</p><p>The philosophy of small, composable, single-purpose tools never goes out of style.</p><p>React is a focused, composable, single-purpose tool used by many of the largest websites in the world. That bodes well for its future (That said, Angular is used by many big names too).</p><h2>Showdown Summary</h2><p>Angular 2 is a huge improvement over version 1. The new component model is simpler to grasp than v1\u2019s directives, it supports isomorphic/universal rendering, and it uses a virtual DOM offering 3\u201310x improvements in performance. These changes make Angular 2 very competitive with React. There\u2019s no denying that its full-featured, opinionated nature offers some clear benefits by reducing \u201cJavaScript fatigue\u201d.</p><p>However, Angular 2\u2019s size and syntax give me pause. Angular\u2019s commitment to HTML-centric design makes it complex compared to React\u2019s simpler JavaScript-centric model. In React, you don\u2019t learn framework-specific HTML shims like ngWhatever. You spend your time writing plain \u2018ol JavaScript. That\u2019s the future I believe in.</p><p>Comments? Chime in on Reddit or Hacker News.</p><p>Cory House is the author of \u201cBuilding Applications with React and Flux\u201d, \u201cClean Code: Writing Code for Humans\u201d and multiple other courses on Pluralsight. He is a Software Architect at VinSolutions and trains software developers internationally on software practices like front-end development and clean coding. Cory is a Microsoft MVP, Telerik Developer Expert, and founder of outlierdeveloper.com.</p>", "tags": ["JavaScript", "Angularjs", "React", "Tech", "Programming"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*J-jjDviwGUfzka1HX5LG9A.jpeg"], "url": "https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36", "dateCreated": "2016-01-08T02:30:49.063Z", "datePublished": "2016-01-08T02:30:49.063Z", "dateModified": "2021-08-24T22:16:20.121Z", "headline": "Master the JavaScript Interview: What is a Closure?", "name": "Master the JavaScript Interview: What is a Closure?", "description": "I\u2019m launching the series with the $40k question. If you answer this question wrong, there\u2019s a good chance you won\u2019t get hired. If you do get hired, there\u2019s a good chance you\u2019ll be hired as a junior\u2026", "identifier": "b2f0d2152b36", "author": {"@type": "Person", "name": "Eric Elliott", "url": "https://medium.com/@_ericelliott"}, "creator": ["Eric Elliott"], "publisher": {"@type": "Organization", "name": "JavaScript Scene", "url": "https://medium.com/javascript-scene", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*k98ylK8u1sha-tSDD4UiBA.png"}}, "mainEntityOfPage": "https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36"}, "content": "<h1>Master the JavaScript Interview: What is a Closure?</h1><a></a><a>Eric Elliott</a><a>Jan 8, 2016</a><p>\u201cMaster the JavaScript Interview\u201d is a series of posts designed to prepare candidates for common questions they are likely to encounter when applying for a mid to senior-level JavaScript position. These are questions I frequently use in real interviews.</p><p>I\u2019m launching the series with the $40k question. If you answer this question wrong, there\u2019s a good chance you won\u2019t get hired. If you do get hired, there\u2019s a good chance you\u2019ll be hired as a junior developer, regardless of how long you\u2019ve been working as a software developer. On average, junior developers get paid $40k/year less USD than more experienced software engineers.</p><p>Closures are important because they control what is and isn\u2019t in scope in a particular function, along with which variables are shared between sibling functions in the same containing scope. Understanding how variables and functions relate to each other is critical to understanding what\u2019s going on in your code, in both functional and object oriented programming styles.</p><p>The reason that missing this question is so disadvantageous in an interview is that misunderstandings about how closures work are a pretty clear red flag that can reveal a lack of deep experience, not just in JavaScript, but in any language that relies a lot on closures (Haskell, C#, Python, etc\u2026).</p><p>Coding in JavaScript without an understanding of closures is like trying to speak English without an understanding of grammar rules \u2014 you might be able to get your ideas across, but probably a bit awkwardly.</p><p>You\u2019ll also be vulnerable to misunderstandings when you\u2019re trying to understand what somebody else wrote.</p><p>Not only should you know what a closure is, you should know why it matters, and be able to easily answer several possible use-cases for closures.</p><p>Closures are frequently used in JavaScript for object data privacy, in event handlers and callback functions, and in partial applications, currying, and other functional programming patterns.</p><p>If you can\u2019t answer this question, it could cost you the job, or ~$40k/year.</p><p>Be prepared for a quick follow-up: \u201cCan you name two common uses for closures?\u201d</p><h2>What is a Closure?</h2><p>A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function\u2019s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.</p><p>To use a closure, define a function inside another function and expose it. To expose a function, return it or pass it to another function.</p><p>The inner function will have access to the variables in the outer function scope, even after the outer function has returned.</p><h2>Using Closures (Examples)</h2><p>Among other things, closures are commonly used to give objects data privacy. Data privacy is an essential property that helps us program to an interface, not an implementation. This is an important concept that helps us build more robust software because implementation details are more likely to change in breaking ways than interface contracts.</p><p>\u201cProgram to an interface, not an implementation.\u201dDesign Patterns: Elements of Reusable Object Oriented Software</p><p>In JavaScript, closures are the primary mechanism used to enable data privacy. When you use closures for data privacy, the enclosed variables are only in scope within the containing (outer) function. You can\u2019t get at the data from an outside scope except through the object\u2019s privileged methods. In JavaScript, any exposed method defined within the closure scope is privileged. For example:</p><p>Play with this in JSBin. (Don\u2019t see any output? Copy and paste this HTML into the HTML pane.)</p><p>In the example above, the `.get()` method is defined inside the scope of `getSecret()`, which gives it access to any variables from `getSecret()`, and makes it a privileged method. In this case, the parameter, `secret`.</p><p>Objects are not the only way to produce data privacy. Closures can also be used to create stateful functions whose return values may be influenced by their internal state, e.g.:</p><p>Available on JSBin. (Don\u2019t see any output? Copy and paste this HTML into the HTML pane.)</p><p>In functional programming, closures are frequently used for partial application & currying. This requires some definitions:</p><p>Application: The process of applying a function to its arguments in order to produce a return value.</p><p>Partial Application: The process of applying a function to some of its arguments. The partially applied function gets returned for later use. Partial application fixes (partially applies the function to) one or more arguments inside the returned function, and the returned function takes the remaining parameters as arguments in order to complete the function application.</p><p>Partial application takes advantage of closure scope in order to fix parameters. You can write a generic function that will partially apply arguments to the target function. It will have the following signature:</p><p>If you need help reading the signature above, check out Rtype: Reading Function Signatures.</p><p>It will take a function that takes any number of arguments, followed by arguments we want to partially apply to the function, and returns a function that will take the remaining arguments.</p><p>An example will help. Say you have a function that adds two numbers:</p><p>Now you want a function that adds 10 to any number. We\u2019ll call it `add10()`. The result of `add10(5)` should be `15`. Our `partialApply()` function can make that happen:</p><p>In this example, the argument, `10` becomes a fixed parameter remembered inside the `add10()` closure scope.</p><p>Let\u2019s look at a possible `partialApply()` implementation:</p><p>Available on JSBin. (Don\u2019t see any output? Copy and paste this HTML into the HTML pane.)</p><p>As you can see, it simply returns a function which retains access to the `fixedArgs` arguments that were passed into the `partialApply()` function.</p><h2>Your Turn</h2><p>This post has a companion video post and practice assignments for members of EricElliottJS.com. If you\u2019re already a member, sign in and practice now.</p><p>If you\u2019re not a member, sign up today.</p><h2>Explore the Series</h2><ul><li>What is a Closure?</li><li>What is the Difference Between Class and Prototypal Inheritance?</li><li>What is a Pure Function?</li><li>What is Function Composition?</li><li>What is Functional Programming?</li><li>What is a Promise?</li><li>Soft Skills</li></ul><p>Updates:July 2019 \u2014 Clarified intro to explain why answering this question wrong could cost you a job or a lot of money in salary.</p><a></a><a>Start your free lesson on EricElliottJS.com</a><p>Eric Elliott is a tech product and platform advisor, author of \u201cComposing Software\u201d, cofounder of EricElliottJS.com and DevAnywhere.io, and dev team mentor. He has contributed to software experiences for Adobe Systems, Zumba Fitness, The Wall Street Journal, ESPN, BBC, and top recording artists including Usher, Frank Ocean, Metallica, and many more.</p><p>He enjoys a remote lifestyle with the most beautiful woman in the world.</p>", "tags": ["JavaScript", "Programming", "Functional Programming", "Technology"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*tMOJBSqKfYd9M2zOskluFw.png"], "url": "https://medium.com/free-code-camp/5-key-learnings-from-the-post-bootcamp-job-search-9a07468d2331", "dateCreated": "2016-11-19T16:48:30.365Z", "datePublished": "2016-11-19T16:48:30.365Z", "dateModified": "2019-01-21T06:33:37.909Z", "headline": "I spent 3 months applying to jobs after a coding bootcamp. Here\u2019s what I learned.", "name": "I spent 3 months applying to jobs after a coding bootcamp. Here\u2019s what I learned.", "description": "A less-talked about part of the bootcamper\u2019s journey is what happens after you graduate \u2014 when you\u2019re searching for that six-figure developer position. I completed Hack Reactor in July 2016 and took\u2026", "identifier": "9a07468d2331", "author": {"@type": "Person", "name": "Felix Feng", "url": "https://medium.com/@felixfeng"}, "creator": ["Felix Feng"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/5-key-learnings-from-the-post-bootcamp-job-search-9a07468d2331"}, "content": "<h1>I spent 3 months applying to jobs after a coding bootcamp. Here\u2019s what I learned.</h1><a></a><a>Felix Feng</a><a>Nov 19, 2016</a><p>A less-talked about part of the bootcamper\u2019s journey is what happens after you graduate \u2014 when you\u2019re searching for that six-figure developer position.</p><p>I completed Hack Reactor in July 2016 and took almost 3 months before accepting an offer with Radius Intelligence. I applied to 291 companies, did 32 phone screens, 16 technical screens, 13 coding challenges, 11 on-sites, and received 8 offers. The offers ranged from $60-125k in salary from companies all over the US, and for both front end and full stack roles. In total, 2.8% of applications became offers.</p><p>Here are 5 things I wish I\u2019d known before I began my job search.</p><h1>Insight #1: Get through to real people</h1><p>At first, I applied for companies using the shotgun approach. I applied through Indeed.com, AngelList, LinkedIn, StackOverflow, Hacker News, company websites, and even Craigslist.</p><p>I\u2019d submit a resume for any role that wanted React, Node, or JavaScript experience. In the first week, I applied to 15\u201320 companies a day.</p><p>Pro-Tip: Find companies using this easy-application repo.</p><p>My yield was low. Less than five percent of companies responded to me. I was throwing applications into a black hole.</p><p>Everything changed when one of my cohort-mates, a former recruiter, shared a guide to the job search. He told us to send emails directly to real people with each application. It could be anybody. As long as someone read it.</p><p>From then on, whenever I submitted an application, I searched for the company on LinkedIn and emailed someone on their engineering or hiring team.</p><p>For most small companies or C-level executives, the email format is usually firstName@dreamCompany.com. For larger companies, it may be firstName.lastName@dreamCompany.com.</p><p>To verify emails, I used Rapportive to cross-check emails with social media accounts.</p><p>The results were amazing. With 150+ emails sent, my response rate was a whopping 22%.</p><p>It also felt great to hear from real people. Surprisingly, CEOs and CTOs responded to me. Sometimes they even interviewed me themselves.</p><p>Takeaway: If you\u2019re applying through the front door, make sure you\u2019re getting to human beings.</p><h1>Insight #2: Start small and work your way up</h1><p>You will face Level 1 interviews (a non-tech company that needs any dev), where interviewers ask you nothing more than JavaScript trivia.</p><p>You will face Level 9 interviews (Google/Facebook level), where interviewers ask difficult data structure and algorithm questions.</p><p>I strategically set up my process so that I had lower-level interviews earlier, and higher-level interviews later on.</p><p>Early on, I gained experience, built confidence, and secured offers from companies that had less intensive interviews.</p><p>As I got more experience, I effectively \u201cleveled up.\u201d I became capable of completing interviews at companies with higher hiring bars. This is illustrated below as a linear correlation between the number of weeks I was into the process and the base salary I was offered.</p><p>I unlocked tougher questions. I unlocked higher salaries. And eventually, I unlocked the job I took.</p><p>Takeaway: Plan to tackle easier interviews early on and more difficult ones later on.</p><h1>Insight #3: Study like your future job depends on it (because it does)</h1><p>I hate to break it to you, but the most important thing you could be doing at any point is studying and preparing.</p><p>Why? Because you won\u2019t get the offer if you don\u2019t have good answers to the questions they ask you.</p><p>People won\u2019t refer you if they don\u2019t think you\u2019re prepared for their interviews.</p><p>Coming out of Hack Reactor, my weaknesses were data structures and algorithms. A study by Triplebyte has found that bootcamp grads are weaker in these areas than computer science grads.</p><p>So I learned and practiced. Every day.</p><p>I devoted entire days to learning sorting algorithms. Other days, I focused on understanding how the internet worked.</p><p>If I didn\u2019t fully understand a concept, I\u2019d spend the day watching YouTube videos or searching StackOverflow until I did.</p><p>I found the following study materials useful:</p><ul><li>InterviewCake: My favorite resource for data structures and algorithms. It breaks down solutions into step-by-step chunks \u2014 a great alternative to Cracking the Code Interview (CTCI). My only gripe is that they don\u2019t have more problems!</li><li>HiredInTech\u2019s System Design Section: A great guide for system design interview questions.</li><li>Coderust: If you\u2019re avoiding CTCI like the plague, Coderust 2.0 may be perfect for you. For $49, you get solutions in almost any programming language, with interactive diagrams.</li><li>Reddit\u2019s How to Prepare for Tech Interviews: I constantly used this as a benchmark for how prepared I was.</li><li>Front End Interview Questions: An exhaustive list of front-end questions.</li><li>Leetcode: The go-to resource for algorithm and data structure questions. You can filter by company, so for example, you could get all the questions that Uber or Google typically ask.</li></ul><p>Takeaway: There\u2019s no such thing as too much preparation.</p><h1>Insight #4: Put your best foot forward</h1><p>Breaking into the industry is hard. You have to perform well, even when you\u2019re not fully prepared. In order to succeed, you have to be your own advocate.</p><h2>Sell Yourself</h2><p>At Hack Reactor, we\u2019re trained to mask our inexperience. In our personal narratives, we purposely omit our bootcamp education.</p><p>Why? Otherwise, companies automatically categorize us into junior developer roles or tag us as \u201cnot enough experience.\u201d</p><p>In one interview with a startup, the interview immediately went south once they realized I\u2019d done a bootcamp. One company used it against me and made me a $60k offer, benchmarking against junior developers.</p><p>Ultimately, you need to convince companies that you can do the job.</p><p>At the same time, you need to convince yourself that you can do the job.</p><p>You can. Focus on your love for programming. Focus on what you\u2019ve built with React and Node. Focus on demonstrating your deep knowledge in JavaScript and any other languages you\u2019ve learned.</p><p>Only then can they justify giving you the job.</p><h2>It\u2019s a Two-way Conversation</h2><p>Interviewing is a mutual exploration of fit between an employee and an employer. While it\u2019s your job to convince employers to hire you, it\u2019s also their job to win you over.</p><p>Don\u2019t be ashamed of using the interview as an opportunity to evaluate the job opportunity.</p><p>I talked to any company, even if I had only the slightest interest.</p><p>I did on-sites all over the country with any company that invited me out. I asked questions, and sucked up knowledge on engineering team organization, technologies and tools used, company challenges, and system architecture.</p><p>Pro-Tip: During interviews, ask the following questions:</p><p>What are some technical challenges you\u2019ve recently faced?</p><p>What do you enjoy about working at X company?</p><p>How are teams structured and how are tasks usually divided?</p><p>I treated every interaction as a learning opportunity. Each interaction helped me improve my presentation, interview, and technical skills. Each failure helped me find my blind spots.</p><p>Takeaway: Don\u2019t sell yourself short! And remember, it\u2019s a mutual exploration.</p><h1>Insight #5: It\u2019s a marathon, not a sprint</h1><p>The journey is by no means easy. For 3 months, I grinded 6 days a week. But I tried to take care of myself.</p><p>Some days, I\u2019d study with friends. Other days, I\u2019d go find a cafe and study alone, or hang out at Hack Reactor\u2019s alumni lounge. And every week I\u2019d check in with our career counselor to talk about my progress.</p><p>It\u2019s easy to burn out during the process. Eat well, sleep, and exercise.</p><p>It can get lonely. Spend time with friends who are going through the same experience.</p><p>Takeaway: Prepare for the long game and make sure you take care of yourself.</p><h1>In summary, the key takeaways are:</h1><ol><li>Get through to real people</li><li>Start small and work your way up</li><li>Study like your future job depends on it</li><li>Put your best foot forward</li><li>It\u2019s a marathon, not a sprint</li></ol><p>The process may seem endless, but you\u2019re going to make it. Keep putting in the hours. Keep sending in the applications. Keep taking caring of yourself. All of it pays off in the end.</p><p>A special thanks to Dylan Tran, Karen Zhao, Rohit 'Sunny' Rekhi, Jake Pace, Anamita Guha, Stephanie Liu, and many others.</p><p>Please share this with friends going through the job search. If you like what you read, hit that \u2764 button below.</p>", "tags": ["Tech", "Startup", "Programming", "Self Improvement", "Life Lessons"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*bcZz-qb_DNpvrNNwQBhQmQ.jpeg"], "url": "https://medium.com/free-code-camp/javascript-modules-a-beginner-s-guide-783f7d7a5fcc", "dateCreated": "2016-01-22T16:10:07.817Z", "datePublished": "2016-01-22T16:10:07.817Z", "dateModified": "2020-01-14T01:53:29.970Z", "headline": "JavaScript Modules: A Beginner\u2019s Guide - We\u2019ve moved to freeCodeCamp.org/news - Medium", "name": "JavaScript Modules: A Beginner\u2019s Guide - We\u2019ve moved to freeCodeCamp.org/news - Medium", "description": "If you\u2019re a newcomer to JavaScript, jargon like \u201cmodule bundlers vs. module loaders,\u201d \u201cWebpack vs. Browserify\u201d and \u201cAMD vs. CommonJS\u201d can quickly become overwhelming. In this post, I\u2019ll unpack these\u2026", "identifier": "783f7d7a5fcc", "author": {"@type": "Person", "name": "Preethi Kasireddy", "url": "https://preethikasireddy.medium.com"}, "creator": ["Preethi Kasireddy"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/javascript-modules-a-beginner-s-guide-783f7d7a5fcc"}, "content": "<h1>JavaScript Modules: A Beginner\u2019s Guide</h1><a></a><a>Preethi Kasireddy</a><a>Jan 22, 2016</a><a>https://www.flickr.com/photos/qubodup/16258492451</a><p>If you\u2019re a newcomer to JavaScript, jargon like \u201cmodule bundlers vs. module loaders,\u201d \u201cWebpack vs. Browserify\u201d and \u201cAMD vs. CommonJS\u201d can quickly become overwhelming.</p><p>The JavaScript module system may be intimidating, but understanding it is vital for web developers.</p><p>In this post, I\u2019ll unpack these buzzwords for you in plain English (and a few code samples). I hope you find it helpful!</p><p>Note: for simplicity\u2019s sake, this will be divided into two sections: Part 1 will dive into explaining what modules are and why we use them. Part 2 (posted next week) will walk through what it means to bundle modules and the different ways to do so.</p><h1>Part 1: Can someone please explain what modules are again?</h1><p>Good authors divide their books into chapters and sections; good programmers divide their programs into modules.</p><p>Like a book chapter, modules are just clusters of words (or code, as the case may be).</p><p>Good modules, however, are highly self-contained with distinct functionality, allowing them to be shuffled, removed, or added as necessary, without disrupting the system as a whole.</p><h1>Why use modules?</h1><p>There are a lot of benefits to using modules in favor of a sprawling, interdependent codebase. The most important ones, in my opinion, are:</p><p>1) Maintainability: By definition, a module is self-contained. A well-designed module aims to lessen the dependencies on parts of the codebase as much as possible, so that it can grow and improve independently. Updating a single module is much easier when the module is decoupled from other pieces of code.</p><p>Going back to our book example, if you wanted to update a chapter in your book, it would be a nightmare if a small change to one chapter required you to tweak every other chapter as well. Instead, you\u2019d want to write each chapter in such a way that improvements could be made without affecting other chapters.</p><p>2) Namespacing: In JavaScript, variables outside the scope of a top-level function are global (meaning, everyone can access them). Because of this, it\u2019s common to have \u201cnamespace pollution\u201d, where completely unrelated code shares global variables.</p><p>Sharing global variables between unrelated code is a big no-no in development.</p><p>As we\u2019ll see later in this post, modules allow us to avoid namespace pollution by creating a private space for our variables.</p><p>3) Reusability: Let\u2019s be honest here: we\u2019ve all copied code we previously wrote into new projects at one point or another. For example, let\u2019s imagine you copied some utility methods you wrote from a previous project to your current project.</p><p>That\u2019s all well and good, but if you find a better way to write some part of that code you\u2019d have to go back and remember to update it everywhere else you wrote it.</p><p>This is obviously a huge waste of time. Wouldn\u2019t it be much easier if there was \u2014 wait for it \u2014 a module that we can reuse over and over again?</p><h1>How can you incorporate modules?</h1><p>There are many ways to incorporate modules into your programs. Let\u2019s walk through a few of them:</p><h2>Module pattern</h2><p>The Module pattern is used to mimic the concept of classes (since JavaScript doesn\u2019t natively support classes) so that we can store both public and private methods and variables inside a single object \u2014 similar to how classes are used in other programming languages like Java or Python. That allows us to create a public facing API for the methods that we want to expose to the world, while still encapsulating private variables and methods in a closure scope.</p><p>There are several ways to accomplish the module pattern. In this first example, I\u2019ll use an anonymous closure. That\u2019ll help us accomplish our goal by putting all our code in an anonymous function. (Remember: in JavaScript, functions are the only way to create new scope.)</p><p>Example 1: Anonymous closure</p><p>With this construct, our anonymous function has its own evaluation environment or \u201cclosure\u201d, and then we immediately evaluate it. This lets us hide variables from the parent (global) namespace.</p><p>What\u2019s nice about this approach is that is that you can use local variables inside this function without accidentally overwriting existing global variables, yet still access the global variables, like so:</p><p>Note that the parenthesis around the anonymous function are required, because statements that begin with the keyword function are always considered to be function declarations (remember, you can\u2019t have unnamed function declarations in JavaScript.) Consequently, the surrounding parentheses create a function expression instead. If you\u2019re curious, you can read more here.</p><p>Example 2: Global import Another popular approach used by libraries like jQuery is global import. It\u2019s similar to the anonymous closure we just saw, except now we pass in globals as parameters:</p><p>In this example, globalVariable is the only variable that\u2019s global. The benefit of this approach over anonymous closures is that you declare the global variables upfront, making it crystal clear to people reading your code.</p><p>Example 3: Object interfaceYet another approach is to create modules using a self-contained object interface, like so:</p><p>As you can see, this approach lets us decide what variables/methods we want to keep private (e.g. myGrades) and what variables/methods we want to expose by putting them in the return statement (e.g. average & failing).</p><p>Example 4: Revealing module patternThis is very similar to the above approach, except that it ensures all methods and variables are kept private until explicitly exposed:</p><p>That may seem like a lot to take in, but it\u2019s just the tip of the iceberg when it comes to module patterns. Here are a few of the resources I found useful in my own explorations:</p><ul><li>Learning JavaScript Design Patterns by Addy Osmani: a treasure trove of details in an impressively succinct read</li><li>Adequately Good by Ben Cherry: a useful overview with examples of advanced usage of the module pattern</li><li>Blog of Carl Danley: module pattern overview and resources for other JavaScript patterns.</li></ul><h1>CommonJS and AMD</h1><p>The approaches above all have one thing in common: the use of a single global variable to wrap its code in a function, thereby creating a private namespace for itself using a closure scope.</p><p>While each approach is effective in its own way, they have their downsides.</p><p>For one, as a developer, you need to know the right dependency order to load your files in. For instance, let\u2019s say you\u2019re using Backbone in your project, so you include the script tag for Backbone\u2019s source code in your file.</p><p>However, since Backbone has a hard dependency on Underscore.js, the script tag for the Backbone file can\u2019t be placed before the Underscore.js file.</p><p>As a developer, managing dependencies and getting these things right can sometimes be a headache.</p><p>Another downside is that they can still lead to namespace collisions. For example, what if two of your modules have the same name? Or what if you have two versions of a module, and you need both?</p><p>So you\u2019re probably wondering: can we design a way to ask for a module\u2019s interface without going through the global scope?</p><p>Fortunately, the answer is yes.</p><p>There are two popular and well-implemented approaches: CommonJS and AMD.</p><h2>CommonJS</h2><p>CommonJS is a volunteer working group that designs and implements JavaScript APIs for declaring modules.</p><p>A CommonJS module is essentially a reusable piece of JavaScript which exports specific objects, making them available for other modules to require in their programs. If you\u2019ve programmed in Node.js, you\u2019ll be very familiar with this format.</p><p>With CommonJS, each JavaScript file stores modules in its own unique module context (just like wrapping it in a closure). In this scope, we use the module.exports object to expose modules, and require to import them.</p><p>When you\u2019re defining a CommonJS module, it might look something like this:</p><p>We use the special object module and place a reference of our function into module.exports. This lets the CommonJS module system know what we want to expose so that other files can consume it.</p><p>Then when someone wants to use myModule, they can require it in their file, like so:</p><p>There are two obvious benefits to this approach over the module patterns we discussed before:</p><p>1. Avoiding global namespace pollution2. Making our dependencies explicit</p><p>Moreover, the syntax is very compact, which I personally love.</p><p>Another thing to note is that CommonJS takes a server-first approach and synchronously loads modules. This matters because if we have three other modules we need to require, it\u2019ll load them one by one.</p><p>Now, that works great on the server but, unfortunately, makes it harder to use when writing JavaScript for the browser. Suffice it to say that reading a module from the web takes a lot longer than reading from disk. For as long as the script to load a module is running, it blocks the browser from running anything else until it finishes loading. It behaves this way because the JavaScript thread stops until the code has been loaded. (I\u2019ll cover how we can work around this issue in Part 2 when we discuss module bundling. For now, that\u2019s all we need to know).</p><h2>AMD</h2><p>CommonJS is all well and good, but what if we want to load modules asynchronously? The answer is called Asynchronous Module Definition, or AMD for short.</p><p>Loading modules using AMD looks something like this:</p><p>What\u2019s happening here is that the define function takes as its first argument an array of each of the module\u2019s dependencies. These dependencies are loaded in the background (in a non-blocking manner), and once loaded define calls the callback function it was given.</p><p>Next, the callback function takes, as arguments, the dependencies that were loaded \u2014 in our case, myModule and myOtherModule \u2014 allowing the function to use these dependencies. Finally, the dependencies themselves must also be defined using the define keyword.</p><p>For example, myModule might look like this:</p><p>So again, unlike CommonJS, AMD takes a browser-first approach alongside asynchronous behavior to get the job done. (Note, there are a lot of people who strongly believe that dynamically loading files piecemeal as you start to run code isn\u2019t favorable, which we\u2019ll explore more when in the next section on module-building).</p><p>Aside from asynchronicity, another benefit of AMD is that your modules can be objects, functions, constructors, strings, JSON and many other types, while CommonJS only supports objects as modules.</p><p>That being said, AMD isn\u2019t compatible with io, filesystem, and other server-oriented features available via CommonJS, and the function wrapping syntax is a bit more verbose compared to a simple require statement.</p><h2>UMD</h2><p>For projects that require you to support both AMD and CommonJS features, there\u2019s yet another format: Universal Module Definition (UMD).</p><p>UMD essentially creates a way to use either of the two, while also supporting the global variable definition. As a result, UMD modules are capable of working on both client and server.</p><p>Here\u2019s a quick taste of how UMD goes about its business:</p><p>For more examples of UMD formats, check out this enlightening repo on GitHub.</p><h1>Native JS</h1><p>Phew! Are you still around? I haven\u2019t lost you in the woods here? Good! Because we have *one more* type of module to define before we\u2019re done.</p><p>As you probably noticed, none of the modules above were native to JavaScript. Instead, we\u2019ve created ways to emulate a modules system by using either the module pattern, CommonJS or AMD.</p><p>Fortunately, the smart folks at TC39 (the standards body that defines the syntax and semantics of ECMAScript) have introduced built-in modules with ECMAScript 6 (ES6).</p><p>ES6 offers up a variety of possibilities for importing and exporting modules which others have done a great job explaining \u2014 here are a few of those resources:</p><ul><li>jsmodules.io</li><li>exploringjs.com</li></ul><p>What\u2019s great about ES6 modules relative to CommonJS or AMD is how it manages to offer the best of both worlds: compact and declarative syntax and asynchronous loading, plus added benefits like better support for cyclic dependencies.</p><p>Probably my favorite feature of ES6 modules is that imports are live read-only views of the exports. (Compare this to CommonJS, where imports are copies of exports and consequently not alive).</p><p>Here\u2019s an example of how that works:</p><p>In this example, we basically make two copies of the module: one when we export it, and one when we require it.</p><p>Moreover, the copy in main.js is now disconnected from the original module. That\u2019s why even when we increment our counter it still returns 1 \u2014 because the counter variable that we imported is a disconnected copy of the counter variable from the module.</p><p>So, incrementing the counter will increment it in the module, but won\u2019t increment your copied version. The only way to modify the copied version of the counter variable is to do so manually:</p><p>On the other hand, ES6 creates a live read-only view of the modules we import:</p><p>Cool stuff, huh? What I find really compelling about live read-only views is how they allow you to split your modules into smaller pieces without losing functionality.</p><p>Then you can turn around and merge them again, no problem. It just \u201cworks.\u201d</p><h1>Looking forward: bundling modules</h1><p>Wow! Where does the time go? That was a wild ride, but I sincerely hope it gave you a better understanding of modules in JavaScript.</p><p>In the next section I\u2019ll walk through module bundling, covering core topics including:</p><ul><li>Why we bundle modules</li><li>Different approaches to bundling</li><li>ECMAScript\u2019s module loader API</li><li>\u2026and more. :)</li></ul><p>NOTE: To keep things simple, I skipped over some of the nitty-gritty details (think: cyclic dependencies) in this post. If I left out anything important and/or fascinating, please let me know in the comments!</p>", "tags": ["JavaScript", "ES6", "Web Development", "Education", "Programming"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*AM83LP9sGGjIul3c5hIsWg.png"], "url": "https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536", "dateCreated": "2016-09-03T16:54:50.155Z", "datePublished": "2016-09-03T16:54:50.155Z", "dateModified": "2021-06-13T19:41:53.177Z", "headline": "So You Want to be a Functional Programmer (Part 1) - Charles Scalfani - Medium", "name": "So You Want to be a Functional Programmer (Part 1) - Charles Scalfani - Medium", "description": "Taking that first step to understanding Functional Programming concepts is the most important and sometimes the most difficult step. But it doesn\u2019t have to be. Not with the right perspective. When we\u2026", "identifier": "1f15e387e536", "author": {"@type": "Person", "name": "Charles Scalfani", "url": "https://cscalfani.medium.com"}, "creator": ["Charles Scalfani"], "publisher": {"@type": "Organization", "name": "Medium", "url": "https://cscalfani.medium.com/", "logo": {"@type": "ImageObject", "width": 308, "height": 60, "url": "https://miro.medium.com/max/616/1*OMF3fSqH8t4xBJ9-6oZDZw.png"}}, "mainEntityOfPage": "https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536"}, "content": "<h1>So You Want to be a Functional Programmer (Part 1)</h1><a></a><a>Charles Scalfani</a><a>Sep 3, 2016\u00b711 min read</a><p>Taking that first step to understanding Functional Programming concepts is the most important and sometimes the most difficult step. But it doesn\u2019t have to be. Not with the right perspective.</p><h2>Learning to Drive</h2><p>When we first learned to drive, we struggled. It sure looked easy when we saw other people doing it. But it turned out to be harder than we thought.</p><p>We practiced in our parent\u2019s car and we really didn\u2019t venture out on the highway until we had mastered the streets in our own neighborhood.</p><p>But through repeated practice and some panicky moments that our parents would like to forget, we learned to drive and we finally got our license.</p><p>With our license in hand, we\u2019d take the car out any chance we could. With each trip, we got better and better and our confidence went up. Then came the day when we had to drive someone else\u2019s car or our car finally gave up the ghost and we had to buy a new one.</p><p>What was it like that first time behind the wheel of a different car? Was it like the very first time behind the wheel? Not even close. The first time, it was all so foreign. We\u2019ve been in a car before that, but only as a passenger. This time we were in the driver seat. The one with all the controls.</p><p>But when we drove our second car, we simply asked ourselves a few simple questions like, where does the key go, where are the lights, how do you use the turn signals and how do you adjust the side mirrors.</p><p>After that, it was pretty smooth sailing. But why was this time so easy compared to the first time?</p><p>That\u2019s because the new car was pretty much like the old car. It had all the same basic things that a car needs and they were pretty much in the same place.</p><p>A few things were implemented differently and maybe it had a few additional features, but we didn\u2019t use them the first time we drove or even the second. Eventually, we learned all the new features. At least the ones we cared about.</p><p>Well, learning programming languages is sort of like this. The first is the hardest. But once you have one under your belt, subsequent ones are easier.</p><p>When you first start a second language, you ask questions like, \u201cHow do I create a module? How do you search an array? What are the parameters of the substring function?\u201d</p><p>You\u2019re confident that you can learn to drive this new language because it reminds you of your old language with maybe a few new things to hopefully make your life easier.</p><h2>Your First Spaceship</h2><p>Whether you\u2019ve been driving one car your whole life or dozens of cars, imagine that you\u2019re about to get behind the wheel of a spaceship.</p><p>If you were going to fly a spaceship, you wouldn\u2019t expect your driving ability on the road to help you much. You\u2019d be starting over from square zero. (We are programmers after all. We count starting at zero.)</p><p>You would begin your training with the expectation that things are very different in space and that flying this contraption is very different than driving on the ground.</p><p>Physics hasn\u2019t changed. Just the way you navigate within that same Universe.</p><p>And it\u2019s the same with learning Functional Programming. You should expect that things will be very different. And that much of what you know about programming will not translate.</p><p>Programming is thinking and Functional Programming will teach you to think very differently. So much so, that you\u2019ll probably never go back to the old way of thinking.</p><h2>Forget Everything You Know</h2><p>People love saying this phrase, but it\u2019s sort of true. Learning functional programming is like starting from scratch. Not completely, but effectively. There are lots of similar concepts but it\u2019s best if you just expect that you have to relearn everything.</p><p>With the right perspective you\u2019ll have the right expectations and with the right expectations you won\u2019t quit when things get hard.</p><p>There are all kinds of things that you\u2019re used to doing as a programmer that you cannot do any more with Functional Programming.</p><p>Just like in your car, you used to backup to get out of the driveway. But in a spaceship, there is no reverse. Now you may think, \u201cWHAT? NO REVERSE?! HOW THE HELL AM I SUPPOSED TO DRIVE WITHOUT REVERSE?!\u201d</p><p>Well, it turns out that you don\u2019t need reverse in a spaceship because of its ability to maneuver in three dimensional space. Once you understand this, you\u2019ll never miss reverse again. In fact, someday, you\u2019ll think back at how limiting the car really was.</p><p>Learning Functional Programming takes a while. So be patient.</p><p>So let\u2019s exit the cold world of Imperative Programming and take a gentle dip into the hot springs of Functional Programming.</p><p>What follows in this multi-part article are Functional Programming Concepts that will help you before you dive into your first Functional Language. Or if you\u2019ve already taken the plunge, this will help round out your understanding.</p><p>Please don\u2019t rush. Take your time reading from this point forward and take the time to understand the coding examples. You may even want to stop reading after each section to let the ideas sink in. Then return later to finish.</p><p>The most important thing is that you understand.</p><h2>Purity</h2><p>When Functional Programmers talk of Purity, they are referring to Pure Functions.</p><p>Pure Functions are very simple functions. They only operate on their input parameters.</p><p>Here\u2019s an example in Javascript of a Pure Function:</p><p>Notice that the add function does NOT touch the z variable. It doesn\u2019t read from z and it doesn\u2019t write to z. It only reads x and y, its inputs, and returns the result of adding them together.</p><p>That\u2019s a pure function. If the add function did access z, it would no longer be pure.</p><p>Here\u2019s another function to consider:</p><p>If the function, justTen, is pure, then it can only return a constant. Why?</p><p>Because we haven\u2019t given it any inputs. And since, to be pure, it cannot access anything other than its own inputs, the only thing it can return is a constant.</p><p>Since pure functions that take no parameters do no work, they aren\u2019t very useful. It would be better if justTen was defined as a constant.</p><p>Most useful Pure Functions must take at least one parameter.</p><p>Consider this function:</p><p>Notice how this function doesn\u2019t return anything. It adds x and y and puts it into a variable z but doesn\u2019t return it.</p><p>It\u2019s a pure function since it only deals with its inputs. It does add, but since it doesn\u2019t return the results, it\u2019s useless.</p><p>All useful Pure Functions must return something.</p><p>Let\u2019s consider the first add function again:</p><p>Notice that add(1, 2) is always 3. Not a huge surprise but only because the function is pure. If the add function used some outside value, then you could never predict its behavior.</p><p>Pure Functions will always produce the same output given the same inputs.</p><p>Since Pure Functions cannot change any external variables, all of the following functions are impure:</p><p>All of these function have what are called Side Effects. When you call them, they change files and database tables, send data to a server or call the OS to get a socket. They do more than just operate on their inputs and return outputs. Therefore, you can never predict what these functions will return.</p><p>Pure functions have no side effects.</p><p>In Imperative Programming Languages such as Javascript, Java, and C#, Side Effects are everywhere. This makes debugging very difficult because a variable can be changed anywhere in your program. So when you have a bug because a variable is changed to the wrong value at the wrong time, where do you look? Everywhere? That\u2019s not good.</p><p>At this point, you\u2019re probably thinking, \u201cHOW THE HELL DO I DO ANYTHING WITH ONLY PURE FUNCTIONS?!\u201d</p><p>In Functional Programming, you don\u2019t just write Pure Functions.</p><p>Functional Languages cannot eliminate Side Effects, they can only confine them. Since programs have to interface to the real world, some parts of every program must be impure. The goal is to minimize the amount of impure code and segregate it from the rest of our program.</p><h2>Immutability</h2><p>Do you remember when you first saw the following bit of code:</p><p>And whoever was teaching you told you to forget what you learned in math class? In math, x can never be equal to x + 1.</p><p>But in Imperative Programming, it means, take the current value of x add 1 to it and put that result back into x.</p><p>Well, in functional programming, x = x + 1 is illegal. So you have to remember what you forgot in math\u2026 Sort of.</p><p>There are no variables in Functional Programming.</p><p>Stored values are still called variables because of history but they are constants, i.e. once x takes on a value, it\u2019s that value for life.</p><p>Don\u2019t worry, x is usually a local variable so its life is usually short. But while it\u2019s alive, it can never change.</p><p>Here\u2019s an example of constant variables in Elm, a Pure Functional Programming Language for Web Development:</p><p>If you\u2019re not familiar with ML-Style syntax, let me explain. addOneToSum is a function that takes 2 parameters, y and z.</p><p>Inside the let block, x is bound to the value of 1, i.e. it\u2019s equal to 1 for the rest of its life. Its life is over when the function exits or more accurately when the let block is evaluated.</p><p>Inside the in block, the calculation can include values defined in the let block, viz. x. The result of the calculation x + y + z is returned or more accurately, 1 + y + z is returned since x = 1.</p><p>Once again, I can hear you ask \u201cHOW THE HELL AM I SUPPOSED TO DO ANYTHING WITHOUT VARIABLES?!\u201d</p><p>Let\u2019s think about when we want to modify variables. There are 2 general cases that come to mind: multi-valued changes (e.g. changing a single value of an object or record) and single-valued changes (e.g. loop counters).</p><p>Functional Programming deals with changes to values in a record by making a copy of the record with the values changed. It does this efficiently without having to copy all parts of the record by using data structures that makes this possible.</p><p>Functional programming solves the single-valued change in exactly the same way, by making a copy of it.</p><p>Oh, yes and by not having loops.</p><p>\u201cWHAT NO VARIABLES AND NOW NO LOOPS?! I HATE YOU!!!\u201d</p><p>Hold on. It\u2019s not like we can\u2019t do loops (no pun intended), it\u2019s just that there are no specific loop constructs like for, while, do, repeat, etc.</p><p>Functional Programming uses recursion to do looping.</p><p>Here are two ways you can do loops in Javascript:</p><p>Notice how recursion, the functional approach, accomplishes the same as the for loop by calling itself with a new start (start + 1) and a new accumulator (acc + start). It doesn\u2019t modify the old values. Instead it uses new values calculated from the old.</p><p>Unfortunately, this is hard to see in Javascript even if you spend a little time studying it, for two reasons. One, the syntax of Javascript is noisy and two, you\u2019re probably not used to thinking recursively.</p><p>In Elm, it\u2019s easier to read and, therefore, understand:</p><p>Here\u2019s how it runs:</p><p>You\u2019re probably thinking that for loops are easier to understand. While that\u2019s debatable and more likely an issue of familiarity, non-recursive loops require Mutability, which is bad.</p><p>I haven\u2019t entirely explained the benefits of Immutability here but check out the Global Mutable State section in Why Programmers Need Limits to learn more.</p><p>One obvious benefit is that if you have access to a value in your program, you only have read access, which means that no one else can change that value. Even you. So no accidental mutations.</p><p>Also, if your program is multi-threaded, then no other thread can pull the rug out from under you. That value is constant and if another thread wants to change it, it\u2019ll have create a new value from the old one.</p><p>Back in the mid 90s, I wrote a Game Engine for Creature Crunch and the biggest source of bugs was multithreading issues. I wish I knew about immutability back then. But back then I was more worried about the difference between a 2x or 4x speed CD-ROM drives on game performance.</p><p>Immutability creates simpler and safer code.</p><h2>My Brain!!!!</h2><p>Enough for now.</p><p>In subsequent parts of this article, I\u2019ll talk about Higher-order Functions, Functional Composition, Currying and more.</p><p>Up Next: Part 2</p><p>If you liked this, click the\ud83d\udc9a below so other people will see this here on Medium.</p><p>Update circa 2021: I have a book that will teach you everything in this series and so much more, Functional Programming Made Easier: A Step-by-Step Guide.</p><p>If you want to join a community of web developers learning and helping each other to develop web apps using Functional Programming in Elm please check out my Facebook Group, Learn Elm Programming https://www.facebook.com/groups/learnelm/</p><p>My Twitter: @cscalfani</p>", "tags": ["Functional Programming", "Technology", "JavaScript", "Tech", "Programming"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*i_rla8OXkHjqM9ckukSy4A.jpeg"], "url": "https://medium.com/free-code-camp/ten-rules-for-negotiating-a-job-offer-ee17cccbdab6", "dateCreated": "2016-07-19T14:36:02.482Z", "datePublished": "2016-07-19T14:36:02.482Z", "dateModified": "2018-06-21T08:13:03.567Z", "headline": "Ten Rules for Negotiating a Job Offer - We\u2019ve moved to freeCodeCamp.org/news - Medium", "name": "Ten Rules for Negotiating a Job Offer - We\u2019ve moved to freeCodeCamp.org/news - Medium", "description": "When the story of how I landed a job at Airbnb went viral, I was surprised at how infatuated people were with my negotiations. Media stories portrayed me as some kind of master negotiator \u2014 a wily\u2026", "identifier": "ee17cccbdab6", "author": {"@type": "Person", "name": "Haseeb Qureshi", "url": "https://medium.com/@hosseeb"}, "creator": ["Haseeb Qureshi"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/ten-rules-for-negotiating-a-job-offer-ee17cccbdab6"}, "content": "<h1>Ten Rules for Negotiating a Job Offer</h1><a></a><a>Haseeb Qureshi</a><a>Jul 19, 2016</a><p>When the story of how I landed a job at Airbnb went viral, I was surprised at how infatuated people were with my negotiations. Media stories portrayed me as some kind of master negotiator \u2014 a wily ex-poker-player who was able to con the tech giants into a lucrative job offer.</p><p>This is silly. It\u2019s silly for a lot of reasons, but one of the main ones is that in reality, my negotiation skills are nothing special. There are lots of job candidates who are better negotiators than I, to speak nothing of recruiters and other professional negotiators.</p><p>It just so happens that most people don\u2019t negotiate at all, or if they do, they negotiate just enough to satisfy themselves that they did.</p><p>Worse yet, most of the advice out there on negotiation is borderline useless. Almost anything you read on the subject will be a vague and long-winded exhortation to \u201cmake sure you negotiate\u201d and \u201cnever say the first number.\u201d Beyond those two morsels of advice, you\u2019re pretty much on your own.</p><p>I thought to myself: why is there so little actionable advice out there about negotiation? I suspect it\u2019s because deep down, many people believe that negotiation is inexplicable, that it\u2019s something some people can do and others can\u2019t, and that there\u2019s no real way to break it down so anyone can learn it.</p><p>I say that\u2019s BS. Negotiation is a skill that can be learned, just like any other. I don\u2019t believe it\u2019s particularly elusive or hard to understand. So I\u2019m going to try to explain how anyone can do it.</p><p>Three caveats.</p><p>First: I\u2019m not an expert. There are people who really are experts at this, and when my advice contradicts theirs, you should assume I\u2019m wrong.</p><p>Second: negotiation is tricky to generalize about because it\u2019s deeply intertwined with social dynamics and power. The appropriate advice for an Asian male in Silicon Valley may not be appropriate for a black woman in Birmingham, Alabama. Racial, sexual, and political dynamics accompany you to the negotiating table.</p><p>At the same time, I want to caution against overemphasizing these factors. Being afraid to negotiate out of fear of discrimination can often be just as deleterious as discrimination itself.</p><p>Ceteris paribus, negotiate aggressively.</p><p>Third: I\u2019m the first to admit that negotiation is stupid. It\u2019s a practice that inherently benefits those who are good at it, and is an absurd axis on which to reward people. But it\u2019s a reality of our economic system. And like most collective action problems, we\u2019re probably not going to be able to abolish it any time soon. In which case, you might as well improve at it.</p><p>So here\u2019s my guide to negotiation. It\u2019s going to be split into two parts: this first part will be about conceptualizing the negotiating process, about how to begin the process and set yourself up for maximal success. The second part will be advice on the actual back-and-forth portion of negotiating and how to ask for what you want.</p><p>Let\u2019s take it from the top.</p><h1>What it means to \u201cget a job\u201d</h1><p>In our culture we call entering the employment market \u201ctrying to get a job.\u201d This is an unfortunate turn of phrase. \u201cGetting a job\u201d implies that jobs are a resource out in the world, and you\u2019re attempting to secure one of these resources. But that\u2019s completely backwards. What you are actually doing is selling your labor, and a company is bidding for it.</p><p>Employment is just striking a mutual deal in the labor market.</p><p>Like any market, the labor market only functions well if it\u2019s competitive. This is the only way to ensure fair and equitable pricing. Imagine you were a farmer selling watermelons. Would you just sell your watermelons to the first buyer who agreed to purchase them? Or would you survey the marketplace of buyers, see the best price (and business partner) you could get, and then make an informed decision on which buyer to sell to?</p><p>And yet, when people talk about the labor market, they think \u201coh, a company wants to give me a job! What a relief!\u201d As though having a job were in itself some special privilege for which a company is the gatekeeper.</p><p>Dispel yourself of this mindset.</p><p>A job is just a deal. It is a deal between you and a company to exchange labor for money (and other things you value).</p><p>This might sound like an abstract point, but you should absolutely approach negotiation from this perspective.</p><h1>The role of negotiation</h1><p>Negotiating is a natural and expected part of the process of trying to make a deal. It\u2019s also a signal of competence and seriousness. Companies generally respect candidates who negotiate, and most highly attractive candidates negotiate (if for no other reason, because they often have too many options to choose from).</p><p>At the risk of spouting truisms: always, always negotiate. It doesn\u2019t matter how good or bad you think you are. You never damage a relationship by negotiating.</p><p>In all my time as an instructor at App Academy, out of hundreds of offers negotiated, only once or twice were offers ever rescinded in negotiations. It basically never happens. And when it does, usually the candidate was being an unconscionable asshole, or the company was imploding and needed an excuse to rescind the offer.</p><p>You might think to yourself: \u201cwell, I don\u2019t want to set high expectations, and the offer is already generous, so I ought to just take it.\u201d</p><p>No. Negotiate.</p><p>Or maybe: \u201cI don\u2019t want to start off on the wrong foot and look greedy with my future employer.\u201d</p><p>No. Negotiate.</p><p>\u201cBut this company is small and \u2014 \u201c</p><p>No. Shut up. Negotiate.</p><p>We\u2019ll talk more in the next section about why a lot of these objections are BS, and fundamentally misapprehend the dynamics of hiring. But for now, just trust me that you should always negotiate.</p><h1>The ten rules of negotiating</h1><p>I\u2019ve tried to boil down negotiation to ten rules. The rules, in order of appearance, are:</p><ol><li>Get everything in writing</li><li>Always keep the door open</li><li>Information is power</li><li>Always be positive</li><li>Don\u2019t be the decision maker</li><li>Have alternatives</li><li>Proclaim reasons for everything</li><li>Be motivated by more than just money</li><li>Understand what they value</li><li>Be winnable</li></ol><p>We\u2019ll only get through some of these in this blog post, and the rest will appear in the second part. But I\u2019ll explain each rule as we get to it.</p><p>So let\u2019s start from the top and try to walk through a negotiation process from the very beginning. For most, that starts when you receive an offer.</p><h1>The offer conversation</h1><p>You\u2019ve just received the phone call: your interview went well, and after much deliberation they decided they like you. They want to make you an offer. Congratulations!</p><p>Don\u2019t get too excited though. The fun is just getting started.</p><p>Thank your recruiter. Sound excited \u2014 hopefully this won\u2019t be hard. Before jumping into details, try to ask for specific feedback on your interview performance. If they give it to you, this will help you gauge how much they want you, as well as tell you things you can improve on in your next interview(s).</p><p>Now time to explore the offer.</p><p>Rule #1 of negotiating: have everything in writing.</p><p>Eventually, they\u2019ll give you information about the offer. Write it all down. Doesn\u2019t matter if they\u2019re going to send you a written version later, write everything down. Even if there are things that are not directly monetary, if they relate to the job, write them down. If they tell you \u201cwe\u2019re working on porting the front-end to Angular,\u201d write that down. If they say they have 20 employees, write that down. You want as much information as you can. You\u2019ll forget a lot of this stuff, and it\u2019s going to be important in informing your final decision.</p><p>Depending on the company, they\u2019ll also tell you about the equity package. We\u2019ll look more specifically at equity in part II, but be sure to write everything down.</p><p>The rule from here on out is that everything significant you discuss will have some kind of a paper trail. Often, the company won\u2019t even send you an official offer letter until a deal is finalized. So it falls to you to confirm all of the important details in subsequent e-mails.</p><p>So yadda yadda, lots of details, writing stuff down, oh there\u2019s a joke, time to laugh. Now the recruiter is done talking and you\u2019re done asking all of your questions.</p><p>Your recruiter will now say something along the lines of \u201cso what do you think?\u201d</p><p>This seems innocuous, but your reply here is critical, because there\u2019s a lot you can say to weaken your position. This is your first decision point.</p><p>A decision point is a moment in the negotiation where your interlocutor wants to compel you to make a decision. If they succeed in tying you to a position, they will close the door on further negotiating. Of course \u201cwhat do you think?\u201d is a subtle prod. But it is the beginning of many attempts to get you to make a premature commitment.</p><p>This leads to rule #2 of negotiating: always keep the door open. Never give up your negotiating power until you\u2019re absolutely ready to make an informed, deliberate final decision.</p><p>This means your job is to traverse as many of these decision points as possible without giving up the power to continue negotiating. Very frequently, your interlocutor will try to trick you into making a decision, or tie you to a decision you didn\u2019t commit to. You must keep verbally jiu-jitsu-ing out of these antics until you\u2019re actually ready to make your final decision.</p><h1>Protecting information</h1><p>There\u2019s an uncomfortable silence by now, and their \u201cwhat do you think?\u201d is hanging in the air.</p><p>If you say \u201cyes, that sounds amazing, when do I start?\u201d you implicitly accept the offer and completely close the door on the negotiation. This is your recruiter\u2019s number one favorite thing to hear. It stands to reason you probably shouldn\u2019t do this.</p><p>But their second favorite thing to hear you say is \u201ccan you do 90K instead of 85K?\u201d This also closes the door, but for a different and more subtle reason. And it\u2019s the number one reason why most people suck at negotiation.</p><p>Rule #3 of negotiating: information is power. To protect your power in the negotiation, you must protect information as much as possible.</p><p>A company doesn\u2019t give you insight into what it\u2019s thinking. It doesn\u2019t tell you its price range, how much it paid the previous candidate with your experience, or anything like that. It intentionally obfuscates those things. But it wants you not to do the same.</p><p>A company wants to be like a bidder in a secret auction. But unlike the other bidders, it wants to know exactly how high all of the other bids are. It then openly intends to exploit that knowledge, often by bidding one cent more than the second highest bid.</p><p>Yeah, no. Screw that. It\u2019s a silent auction, and to keep it that way, you must protect information.</p><p>In many situations, the only reason why you have any negotiating power at all is because the employer doesn\u2019t actually know what you\u2019re thinking. They might not know how good your other offers are, or how much you were making in your last job, or how you weigh salary vs equity, or even how rational you are as a decision-maker. Bottom line, you want them to be uncertain on exactly what it would take to sign you.</p><p>When you say \u201ccan you do 90K instead of 85K,\u201d you\u2019ve told them exactly what it will take to make you sign. The sheet\u2019s pulled back, the secret auction is up, and they\u2019re going to bid 90K (or more likely, 87K). And they know there\u2019s almost no risk in doing so, because you\u2019ll probably accept.</p><p>What if you were the kind of person who wouldn\u2019t even consider an offer below 110K? Or the kind of person who wouldn\u2019t consider an offer below 120K? If you were, you wouldn\u2019t ask for 90K, and if they offered it as conciliation, you\u2019d tell them to stop wasting your time.</p><p>By staying silent, they don\u2019t actually know which of those kinds of people you are. In their mind, you could be any of the three.</p><p>A corollary of this rule is that you should not reveal to companies what you\u2019re currently making. There are some exceptions, but as a rule you should assume this. If you must divulge what you\u2019re making, you should be liberal in noting the total value of your package (incorporate bonuses, unvested stock, nearness to promotion etc.), and always mention it in a context like \u201c[XYZ] is what I\u2019m currently making, and I\u2019m definitely looking for a step up in my career for my next role.\u201d</p><p>Companies will ask about your current compensation at different stages in the process \u2014 some before they ever interview you, some after they decide to make you an offer. But be mindful of this, and protect information.</p><p>So given this offer, don\u2019t ask for more money or equity or anything of the sort. Don\u2019t comment on any specific details of the offer except to clarify them.</p><p>Give away nothing. Retain your power.</p><p>Say instead:</p><p>\u201cYeah, [COMPANY_NAME] sounds great! I really thought this was a good fit, and I\u2019m glad that you guys agree. Right now I\u2019m talking with a few other companies so I can\u2019t speak to the specific details of the offer until I\u2019m done with the process and get closer to making a decision. But I\u2019m sure we\u2019ll be able to find a package that we\u2019re both happy with, because I really would love to be a part of the team.\u201d</p><p>Think like the watermelon farmer. This offer is just the first businessman who\u2019s stopped by your watermelon patch, glanced over your crops, and announced \u201cI\u2019ll take all of these right now for $2 a melon.\u201d</p><p>Cool. It\u2019s a big market, and you\u2019re patient \u2014 you\u2019re a farmer after all. Just smile and tell them you\u2019ll keep their offer in mind.</p><p>And this is super important: always be unequivocally positive.</p><h1>The importance of positivity</h1><p>Staying positive is rule #4 of negotiation. Even if the offer sucks, it\u2019s extremely important to remain positive and excited about the company. This is because your excitement is one of your most valuable assets in a negotiation.</p><p>A company is making you an offer because they think you\u2019ll do hard work for them if they pay you. If you lose your excitement for the company during the interview process, then they\u2019ll lose confidence that you\u2019ll actually want to work hard or stay there for a long time. Each of those makes you less attractive as an investment. Remember, you are the product! If you become less excited, then the product you\u2019re selling actually loses value.</p><p>Imagine you were negotiating with someone over buying your watermelons, but the negotiation took so long that by the time you\u2019d reached an agreement, your watermelons had gone bad.</p><p>Companies are terrified of that. They don\u2019t want their candidates to go bad during a negotiation. Hence why they hire professional recruiters to manage the process and make sure they remain amicable. You and the recruiter share the same interest in that regard. If a company feels like you\u2019ve gone bad, suddenly they\u2019re a lot less willing to pay for you.</p><p>So despite whatever is happening in the negotiation, give the company the impression that 1) you still like the company, and that 2) you\u2019re still excited to work there, even if the numbers or the money or the timing is not working out. Generally the most convincing thing to signal this is to reiterate you love the mission, the team, or the problem they\u2019re working on, and really want to see things work out.</p><h1>Don\u2019t be the decision-maker</h1><p>You can wrap up the conversation now by saying:</p><p>\u201cI\u2019ll look over some of these details and discuss it with my [FAMILY / CLOSE_FRIENDS / SIGNIFICANT_OTHER]. I\u2019ll reach out to you if I have any questions. Thanks so much for sharing the good news with me, and I\u2019ll be in touch!\u201d</p><p>So not only are you ending the conversation with the power all in your hands, but note there\u2019s another important move here: you\u2019re roping in other decision-makers.</p><p>Rule #5 of negotiation: don\u2019t be the decision-maker. Even if you don\u2019t particularly care what your friends/family/husband/mother thinks, by mentioning them, you\u2019re no longer the only person the recruiter needs to win over. There\u2019s no point in them trying to bully and intimidate you; the \u201ctrue decision-maker\u201d is beyond their reach.</p><p>This is a classic technique in customer support and remediation. It\u2019s never the person on the phone\u2019s fault, they\u2019re just some poor schmuck doing their job. It\u2019s not their decision to make. This helps to defuse tension and give them more control of the situation.</p><p>It\u2019s much harder to pressure someone if they\u2019re not the final decision-maker. So take advantage of that.</p><p>Okay!</p><p>We have our first offer. Send a follow-up e-mail confirming all of the details you discussed with your recruiter so you have a paper trail. Just say \u201cjust wanted to confirm I had all the details right.\u201d</p><p>Groovy. Next step is to leverage this to land other offers and find the best deal we can find in the job market.</p><h1>Getting other offers</h1><p>Turns out, it doesn\u2019t matter that much where your first offer is from, or even how much they\u2019re offering you. Just having an offer in hand will get the engine running.</p><p>If you\u2019re already in the pipeline with other companies (which you should be if you\u2019re doing it right), you should proactively reach out and let them know that you\u2019ve just received an offer. Try to build a sense of urgency. Regardless of whether you know the expiration date, all offers expire at some point, so take advantage of that.</p><p>\u201cHello [PERSON],</p><p>I just wanted to update you on my own process. I\u2019ve just received an offer from [COMPANY] which is quite strong. That said, I\u2019m really excited about [YOUR AMAZING COMPANY] and really want to see if we can make it work. Since my timeline is now compressed, is there anything you can do to expedite the process?\u201d</p><p>Should you specifically mention the company that gave you an offer? Depends. If it\u2019s a well-known company or a competitor, then definitely mention it. If it\u2019s a no-name or unsexy company, you should just say you received an offer. If it\u2019s expiring soon, you should mention that as well.</p><p>Either way, send out a letter like this to every single company you\u2019re talking to. No matter how hopeless or pointless you think your application is, you want to send this signal to everyone who is considering you in the market.</p><p>Second, if there are any other companies you are looking to apply to (whether through referral or cold application), or even companies at which you\u2019ve already applied but haven\u2019t heard back, I would also follow up with a similar e-mail.</p><p>So why do this? Isn\u2019t this tacky, annoying, or even desperate?</p><p>None of the above. It is the oldest method in history to galvanize a marketplace \u2014 show that supplies are limited and build urgency. Demand breeds demand. Not every company will respond to this, but many will.</p><p>Isn\u2019t it stupid that companies respond to this though?</p><h1>Why companies care about other offers</h1><p>When I wrote about the story of my own job search, I mentioned how having an offer from Google made companies turn around and expedite me through their funnels. Many commentators lamented at the capriciousness of these companies. If Uber or Twitch only talked to me because of Google and until then weren\u2019t willing to look at me, what did that say about their hiring processes? What legitimately are they evaluating, if anything at all?</p><p>I think this response is totally backwards. The behavior of tech companies here is actually very rational, and you would do well to understand it.</p><p>First, you must realize what a company\u2019s goal is. A company\u2019s goal is to hire someone who will become an effective employee and produce more value than their cost. How do you figure out who will do that? Well, you can\u2019t know for certain without actually hiring them, but there are a few proxies. Pedigree is the strongest signal; if they did it at other companies, they can probably do it at yours. And if someone trusted within the organization can vouch for them, that\u2019s often a strong signal as well.</p><p>But turns out, almost everything else is a weak signal. Weak in the sense that it\u2019s just not very reliable. Interviews, if you think about it, are long, sweaty, uncomfortable affairs that only glancingly resemble actual employment. They\u2019re weird and can\u2019t tell you that much about whether an individual will be good at their job. There\u2019s no way around this. There are a few stronger signals, like bringing someone in for a week or two on a contract-to-hire position, but strong candidates won\u2019t consider this. So candidates as a whole have effectively forced companies to assume almost all of the risk in hiring.</p><p>The truth is, knowing that someone has passed your interview just doesn\u2019t say that much about whether they\u2019ll be a good employee. It\u2019s as though you knew nothing about a student other than their SAT score. It\u2019s just not a lot of data to go off.</p><p>Nobody has solved this problem. Not Google nor anyone else.</p><p>And this is precisely why it\u2019s rational for companies to care that you\u2019ve received other offers. They care because each company knows that their own process is noisy, and the processes of most other companies are also noisy. But a candidate having multiple offers means that they have multiple weak signals in their favor. Combined, these converge into a much stronger signal than any single interview. It\u2019s like knowing that a student has a strong SAT score, and GPA, and won various scholarships. Sure, it\u2019s still possible that they\u2019re a dunce, but it\u2019s much harder for that to be true.</p><p>This is not to say that companies respond proportionally to these signals, or that they don\u2019t overvalue credentials and brands. They do. But caring about whether you have other offers and valuing you accordingly is completely rational.</p><p>So this is all to say \u2014 tell other companies that you\u2019ve received offers. Give them more signal so that they know you\u2019re a valued and compelling candidate. And understand why this changes their mind about whether to interview you.</p><p>As you continue interviewing, remember to keep practicing your interview skills. The single strongest determinant of your final offer will be the number and strength of offers that you receive.</p><h1>Some advice on timing</h1><p>You want to be strategic about the timing of your offers. Generally, you should try to start interviewing at larger companies earlier. Their processes are slower and their offer windows are wider (meaning they allow you more time to decide). Startups are the other way around.</p><p>Your goal should be to have as many offers overlapping at the same time as possible. This will maximize your window for negotiating.</p><p>When you receive an offer, often the first thing you should ask for is more time to make your decision. Especially in your first offer, more time is by far the most valuable thing you can ask for. It\u2019s time that enables you to activate other companies and end up with the strongest possible offer. So be prepared to fight for time.</p><h1>How to approach exploding offers</h1><p>Hoo boy.</p><p>Exploding offers are offers that expire within 24\u201372 hours. You won\u2019t see this much at big companies, but they\u2019re becoming increasingly common among startups and mid-sized companies.</p><p>Exploding offers suck, and I share most people\u2019s disdain for this practice. But I do understand it. Exploding offers are a natural weapon for employers to combat a strong hiring market for tech workers. Companies know exactly what they\u2019re doing with exploding offers \u2014 they play on fear and limit your ability to seek out counteroffers.</p><p>In a sense, it\u2019s unsurprising that if startups have more difficulty attracting and securing talent, they\u2019d resort to this practice. What I don\u2019t like is the dishonesty about it. Employers often justify this by saying:</p><p>\u201cIf you need more time than this, then that\u2019s a sign you\u2019re not the kind of person we\u2019re looking for.\u201d</p><p>Please don\u2019t buy this crap or feel guilty over it. They\u2019re simply doing this to improve their chance of closing candidates. Needing more than three days to make a life decision isn\u2019t a sign of anything other than thoughtfulness.</p><p>So what should you do if you receive an exploding offer?</p><p>Exploding offers are anathema to your ability to effectively navigate the labor market. Thus, there is only one thing to do. Treat the offer as a non-offer unless the expiration window is widened.</p><p>In no uncertain terms, convey that if the offer is exploding, it\u2019s useless to you.</p><p>Example conversation:</p><p>\u201cI have one big concern. You mentioned that this offer explodes in 48 hours. I\u2019m afraid this doesn\u2019t work at all for me. There\u2019s no way that I can make a decision on this offer within a 48 hour window. I\u2019m currently wrapping up my interview process at a few other companies, which is likely to take me another week or so. So I\u2019m going to need more time to make an informed decision.\u201d</p><p>If they push back and say this is the best they can do, then politely reply:</p><p>\u201cThat\u2019s really unfortunate. I like [YOUR COMPANY] and was really excited about the team, but like I said, there\u2019s no way I can consider this offer. 48 hours is just too unreasonable of a window. The next company I join will be a big life decision for me, and I take my commitments very seriously. I also need to consult with my [EXTERNAL_DECISION_MAKER]. There\u2019s no way that I can make a decision I\u2019m comfortable with in this short an amount of time.\u201d</p><p>Pretty much any company will relent at this point. If they persist, don\u2019t be afraid to walk away over it. (They probably won\u2019t let that happen, and will come grab you as you\u2019re walking out the door. But if they don\u2019t, then honestly, screw \u2018em.)</p><p>I was given several exploding offers during my job search. And every time, I did essentially this. Every single offer immediately widened to become more reasonable, sometimes by several weeks.</p><p>I want to emphasize, lest I be misunderstood here \u2014 what I\u2019m saying is not to just silently let an exploding offer expire, and assume that everything will be fine and they\u2019ll still hire you. They won\u2019t. For exploding offers to be a credible weapon, a company has to have a reputation of enforcing them. I\u2019m saying explicitly call this out as an issue when they make the offer.</p><p>Don\u2019t let a company bully you into giving away your negotiating power.</p><h1>The Negotiating Mindset</h1><p>Before we enter into the actual back-and-forth, I want to examine the mindset you should have as a negotiator. This applies not just to how you approach the conversation, but also to how you think about the company.</p><p>Do not fall into the trap of valuing companies solely along one dimension. That means don\u2019t just value companies based on salary, equity, or even on prestige. Those are all important dimensions, but so are cultural fit, the challenge of the work, learning potential, later career options, quality of life, growth potential, and just overall happiness. None of these inherently trump any of the other. Anyone who tells you \u201cjust choose wherever you think you\u2019ll be happiest\u201d is being just as simplistic as someone who says \u201cjust choose the one that offers the most money.\u201d All of these things matter, and your decision should be genuinely multi-dimensional.</p><p>Be open to being surprised as you explore different companies.</p><p>It\u2019s also important to understand that companies don\u2019t all value you along the same dimension either. That is, different companies are genuinely looking for different skills, and there are some companies at which you will be more and less valuable. Even at peer companies this is true, especially so if you have a specialized skill-set.</p><p>The more companies you talk to, the more likely you are to find a company to which you are significantly more valuable than the rest. Chances are this is where you\u2019ll be able to negotiate your strongest offer. It might surprise you which company this turns out to be; keep an open mind, and remember that a job search is a 2-sided process.</p><p>One of the most valuable things you can do for yourself in this process is to really try to understand how employers think and what motivates them. Understanding your interlocutor is extremely important in negotiation, and we\u2019ll be exploring that a lot in the next blog post.</p><p>But most of all I want to emphasize: be curious about the other side. Try to understand why employers think the way they do. Be sympathetic toward them. Care about what they want and help them try to get it. Adopting this mindset will make you a much stronger negotiator, and accordingly, a much better employee and team member.</p><p>Okay. That\u2019s as far as we\u2019re going for today. In the next blog post, I\u2019m going to cover the last four rules of negotiation. I\u2019ll also go over the actual back-and-forth process \u2014 how to ask for what you want, how to strengthen offers, and how to dismantle the tricks that companies will try to pull on you. Also a lot more on the theory of negotiation, which I really dig.</p><p>Do share this post if you found it useful! And follow me on Twitter for updates.</p><p>Update: You can read part 2 here!</p><p>Until next time,</p><p>Haseeb</p><p>(This was originally posted on haseebq.com. You can read more of my stuff there, including my advice on how to break into the tech industry.)</p>", "tags": ["Startup", "Tech", "Jobs", "Careers", "Programming"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*UcpODv1lxR_Bt3MyaOvYWA.jpeg"], "url": "https://medium.com/free-code-camp/the-code-im-still-ashamed-of-e4c021dff55e", "dateCreated": "2016-11-13T18:12:42.269Z", "datePublished": "2016-11-13T18:12:42.269Z", "dateModified": "2018-06-21T12:32:14.898Z", "headline": "The code I\u2019m still ashamed of - We\u2019ve moved to freeCodeCamp.org/news - Medium", "name": "The code I\u2019m still ashamed of - We\u2019ve moved to freeCodeCamp.org/news - Medium", "description": "If you write code for a living, there\u2019s a chance that at some point in your career, someone will ask you to code something a little deceitful \u2013 if not outright unethical. I wrote my first line of\u2026", "identifier": "e4c021dff55e", "author": {"@type": "Person", "name": "Bill Sourour", "url": "https://medium.com/@BillSourour"}, "creator": ["Bill Sourour"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/the-code-im-still-ashamed-of-e4c021dff55e"}, "content": "<h1>The code I\u2019m still ashamed of</h1><a></a><a>Bill Sourour</a><a>Nov 13, 2016</a><p>If you write code for a living, there\u2019s a chance that at some point in your career, someone will ask you to code something a little deceitful \u2013 if not outright unethical.</p><p>This happened to me back in the year 2000. And it\u2019s something I\u2019ll never be able to forget.</p><p>I wrote my first line of code at 6 years old. I\u2019m no prodigy though. I had a lot of help from my dad at the time. But I was hooked. I loved it.</p><p>By the time I was 15, I was working part-time for my dad\u2019s consulting firm. I built websites and coded small components for business apps on weekends and in the summer.</p><p>I was woefully underpaid. But as my dad still likes to point out, I got free room and board, and some pretty valuable work experience.</p><p>Later, I managed to help fund a part of my education through a few freelance coding gigs. I built a couple of early e-commerce sites for some local small businesses.</p><p>By age 21, I managed to land a full-time coding job with an interactive marketing firm in Toronto, Canada.</p><p>The firm had been founded by a medical doctor and many of its clients were large pharmaceutical companies.</p><p>In Canada, there are strict limits on how pharmaceutical companies can advertise prescription drugs directly to consumers.</p><p>As a result, these companies would create websites that present general information about whatever symptoms their drugs were meant to address. Then, if a visitor could prove they had a prescription, they were given access to a patient portal with more specific info about the drug.</p><a>home page</a><p>One of the projects I was assigned to involved a drug that was targeted at women. The graphics and general style of the website made it clear that the client wanted to specifically target teenage girls.</p><p>One of the features of this website was a quiz that asked girls a series of questions and recommended a type of drug based on their answers.</p><p>Remember, this website was posing as a general information site. It was not clearly an advertisement for any particular drug.</p><p>When I received the requirements, they contained the questions for the quiz, along with multiple choice answers for each question.</p><p>Missing from the requirements was any indication of what I should do with the answers at the end of the quiz. So what rules determined what treatment the quiz would recommend?</p><p>I spoke to the Account Manager about this. She emailed the client and got me the requirements. With those, I proceeded to code up the quiz.</p><p>Before submitting the website to the client, my project manager decided to give it a quick test. She tried the quiz, then came over to my desk:</p><p>\u201cThe quiz doesn\u2019t work,\u201d she said.</p><p>\u201cOh. What\u2019s broken?\u201d I asked.</p><p>\u201cWell, it seems that no matter what I do, the quiz recommends the client\u2019s drug as the best possible treatment. The only exception is if I say I\u2019m allergic. Or if I say I am already taking it.\u201d</p><p>\u201cYes. That\u2019s what the requirements say to do. Everything leads to the client\u2019s drug.\u201d</p><p>\u201cOh. Okay. Cool.\u201d</p><p>And she was off.</p><p>I wish I could tell you that when I first saw those requirements they bothered me. I wish I could tell you that it felt wrong to code something that was basically designed to trick young girls. But the truth is, I didn\u2019t think much of it at the time. I had a job to do, and I did it.</p><p>Nothing that we were doing was illegal. As the youngest developer on my team, I was making good money for my age. And in the end, I understood that the real purpose of the site was to push a particular drug. So, I chalked this tactic up to \u201cmarketing.\u201d</p><p>The client was extremely pleased with the site. So much so that their rep invited me and the entire team out to a fancy steak dinner.</p><p>The day of the dinner, shortly before leaving the office, a colleague emailed me a link to a news report online. It was about a young girl who had taken the drug I\u2019d built the website for.</p><p>She had killed herself.</p><p>It turned out that among the main side effects of that drug were severe depression and suicidal thoughts.</p><p>The colleague who had emailed me didn\u2019t show up to dinner.</p><p>I still went. It was difficult and awkward. I never mentioned the news report. I just ate my steak quietly and tried to force a smile when I could.</p><p>The next day, I called my sister. She was 19 at the time. We had discovered while working on the project that she had actually been prescribed the very drug I was building a site for.</p><p>When we first talked about it, we thought the whole thing was a neat coincidence. Now, the tone of our conversation was very different. I advised her to get off the drug ASAP. Thankfully, she listened.</p><p>There are a million and one ways for me to rationalize my part in later suicides and severe depression. Even today, there is ongoing litigation with former patients.</p><p>It\u2019s easy to make an argument that I had no part in it at all. Still, I\u2019ve never felt okay about writing that code.</p><p>Not long after that dinner, I resigned.</p><p>As developers, we are often one of the last lines of defense against potentially dangerous and unethical practices.</p><p>We\u2019re approaching a time where software will drive the vehicle that transports your family to soccer practice. There are already AI programs that help doctors diagnose disease. It\u2019s not hard to imagine them recommending prescription drugs soon, too.</p><p>The more software continues to take over every aspect of our lives, the more important it will be for us to take a stand and ensure that our ethics are ever-present in our code.</p><p>Since that day, I always try to think twice about the effects of my code before I write it. I hope that you will too.</p><p>These days, I spend a portion of my time writing and sending a regular newsletter that aims to help developers master their craft and advance their careers. Please sign up below to receive it.</p><p>UPDATE 2018: I am now a member of the Association for Computing Machinery and adhere to their 2018 Code of Ethics and Professional Conduct. I hope that you and the organization(s) you work with will consider doing the same.</p><p>If this article touched you in any way, please use the applause icon to help spread the word.</p>", "tags": ["Programming", "Web Development", "Tech", "Life Lessons", "Life"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*_xiC6icpxVB09SO6d4VsgQ.jpeg"], "url": "https://medium.com/free-code-camp/why-i-studied-full-time-for-8-months-for-a-google-interview-cc662ce9bb13", "dateCreated": "2016-12-13T16:42:40.576Z", "datePublished": "2016-12-13T16:42:40.576Z", "dateModified": "2018-06-21T12:55:30.367Z", "headline": "Why I studied full-time for 8 months for a Google interview", "name": "Why I studied full-time for 8 months for a Google interview", "description": "It\u2019s true. I\u2019ve spent thousands of hours reading books, writing code, and watching computer science lectures, all to prepare for the Google software engineer interview. I started programming in\u2026", "identifier": "cc662ce9bb13", "author": {"@type": "Person", "name": "Googley as Heck", "url": "https://medium.com/@googleyasheck"}, "creator": ["Googley as Heck"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/why-i-studied-full-time-for-8-months-for-a-google-interview-cc662ce9bb13"}, "content": "<h1>Why I studied full-time for 8 months for a Google interview</h1><a></a><a>Googley as Heck</a><a>Dec 13, 2016</a><p>It\u2019s true. I\u2019ve spent thousands of hours reading books, writing code, and watching computer science lectures, all to prepare for the Google software engineer interview.</p><p>If you\u2019d like to prepare for a Google interview, here\u2019s my study plan:</p><a>jwasham/google-interview-universitygoogle-interview-university - A complete daily plan for studying to become a Google software engineer.github.com</a><h1>How I Got Here</h1><p>I started programming in middle school, but when it came time for college I pursued a degree in Economics. My rationale was that there would be too many programmers looking for jobs by the time I graduated. Boy, I was wrong.</p><p>Later, I joined the Army to become a programmer, but the recruiter talked me into a military intelligence position, and I spent the next two years studying the Korean language. I served in South Korea for 2 years afterward.</p><p>Before I left the Army, I attempted to get back into programming and was surprised at the difficulty. I had learned BASIC in middle school and kept programming it through high school. But I restarted my programming studies with C++, and the leap was too large. I just couldn\u2019t grasp it.</p><p>I did enjoy making websites, however, but I used software with a Word-like interface that I used to publish my websites. I didn\u2019t know how to make websites from scratch.</p><p>After the Army, I decided to stay in Korea for a year and teach English. I used my nights and weekends to study web programming, using Perl, HTML, CSS (which was new at the time), JavaScript, and SQL.</p><p>After a year of intense study, I landed a job in the Seattle area, and I\u2019ve been here ever since.</p><p>I\u2019ve been a web developer now for 15 years. I\u2019ve started 3 companies, 2 of which are still running and generating revenue. I\u2019ve worked at large and small companies, helped startups launch and grow, and recruited and managed teams. I\u2019ve been a product manager, a CEO, a designer, and a marketer.</p><p>I\u2019ve had a successful career and learned a lot along the way. But I\u2019m not done yet.</p><h1>Seeking a Career Change</h1><p>Remember the part where I didn\u2019t get a computer science degree? It has made a difference.</p><p>A few years ago, I thought I could get hired anywhere. I thought I was hot stuff: the elusive full-stack web developer. But during my job search in 2013, I realized my skills were lacking. I had spent so much time chasing dollars by running startups in my spare time, that I had let my skills atrophy. I hadn\u2019t kept up with technology.</p><p>For years, I had learned just enough to get by. I had a wide skill set but wasn\u2019t an expert in anything.</p><p>Don\u2019t get me wrong, I could still get hired, but not in the technologies or areas I wanted to work in. I could get hired for areas where the tech stack was somewhat outdated, like me. There\u2019s big money in there, but I didn\u2019t see exciting prospects.</p><p>The realization reached its peak last year at a career fair. I was interested in perhaps working for one of the local companies that were startup labs run by venture capital firms. However, the fact that I lacked a computer science degree, and the skills and knowledge that accompany such a degree, meant I didn\u2019t have a chance.</p><p>I was working full-time on my businesses at the time, and still am today.</p><p>At the beginning of 2016, I decided it was time to make a career change from web developer to software engineer. I would need to study hard and practice in order to compress a computer science degree into a few months, but once I did, I could start a new career.</p><p>You may not see web development and software engineering as different positions. Both involve programming and craftsmanship, but software engineering adds to it knowledge of data structures and algorithms, compiled languages, memory considerations, and understanding the impact of coding and architecture decisions on the machines where they reside.</p><p>Large companies that hire for software engineering positions expect candidates to have this knowledge.</p><p>I reached out to an acquaintance who works at Google and asked him questions about his experience at the company. I had been reading How Google Works and was pretty familiar with Google already.</p><p>Through another contact, I received a copy of Google\u2019s coaching notes that are provided to interview candidates. This became the basis of my study plan.</p><p>Google is a pretty awesome place to work, but before I even knew that, Google was my goal.</p><h1>Why Google?</h1><p>Google sets a very high bar for hiring. They want to hire only the best. So if I set my sights high (getting hired at Google), I\u2019ll still be quite hireable elsewhere even if I\u2019m not selected.</p><p>The more I learn about Google, the more I want to work there.</p><p>In brief, Google is a company that hires smart, creative people, and treats them well. Google rewards merit, encourages big ideas, and gives employees the freedom to make good decisions for the user.</p><p>The hiring process is calibrated to bring in smart, passionate people. Google has honed the recruitment and interview process over the years. The brain teaser questions are long gone. Nowadays candidates are chosen based on coding ability, technical knowledge, and Googleyness. There\u2019s a lot going on in that one word.</p><p>Management is different. Managers don\u2019t micro-manage. They trust engineers to make the right decisions. Trusting employees changes the role of managers at Google from what most folks envision when they think of management. In addition, managers can\u2019t unilaterally, hire, fire, or promote. Many of the important management decisions that could be perceived as office politics are handled by a committee to remove that danger.</p><p>Google\u2019s people operations (HR) has learned what works over time, and they use data and employee feedback to improve evaluation systems, the hiring process, promotions, compensation, benefits, and more. Read Work Rules! by Laszlo Bock (SVP, People Operations) for more.</p><p>Yes, the benefits are amazing. I went on a tour of the Google office in Kirkland, WA, and it surpassed my expectations. And my expectations were already high.</p><h1>Google Interview University</h1><p>Remember the coaching notes I received telling me what to study? The list of topics seemed manageable, even though I didn\u2019t know anything on the list.</p><p>I turned the topics on the notes into an outline and started filling in the topics with YouTube videos of lectures from MIT and UC Berkeley. A video on linked lists in one place, a video about queues in another. The list started to grow.</p><p>I published the list on Github because my Github account was pretty empty. Since all the code I wrote for my businesses and work was private, my Github account made it look like I didn\u2019t code at all. I needed to build up a portfolio. I originally called the project \u201cProject 9894\u201d. Google launched on Sept 4, 1998. Hence the name. I later renamed it to \u201cGoogle Interview University\u201d.</p><p>Over time I added some optional topics that I discovered along the way.</p><p>I was pretty amazed I had gotten so far in my career without even knowing how a CPU processed a program, how memory worked, or any of it. I had known \u201cjust enough\u201d to be a success.</p><p>My little Github project started getting a few stars, and I published a blog post celebrating 20 stars.</p><p>One morning, I awoke to find it had grown to 120 stars. Someone famous had tweeted about it during the night, and that led to it ending up on the Github daily trending report. I was #1 trending on Github for a few days.</p><p>Many kind people reached out to thank and encourage me. It turns out there are thousands of people who want to not only work at Google but want to work as a software engineer, and this list was just the to-do list they needed.</p><p>It\u2019s now at over 21,000 stars.</p><p>I still can\u2019t believe it.</p><h1>What If I Don\u2019t Get the Job?</h1><p>It won\u2019t be the end of the world.</p><p>I\u2019ve put the time and dedication into my studies for the goal of getting hired as a Google software engineer, but even if I fail, I\u2019ll still be armed with the skills and knowledge required to work as a software engineer at any company.</p><p>Wherever I end up, I\u2019m going in as an entry-level software engineer. I\u2019m not going in with 15 years of software engineering experience because I simply don\u2019t have it. When it comes to this stuff, I\u2019m the equivalent of a fresh CS grad.</p><p>But I have the enthusiasm of a new grad, too. This is a new world for me. I\u2019m just getting started. I\u2019m not afraid to make mistakes. I know I will. I also want to learn everything I can and be an excellent addition to any team.</p><h1>Don\u2019t Study As Much As I Did</h1><p>Yes, I took 8 months. But I could have abbreviated the process. Like any startup with a big goal, you make mistakes and do things that waste time. There are many things I wish I go back and do differently.</p><p>I studied topics I didn\u2019t need to, some because I thought I would need them for the interview, and some because I wanted to have the knowledge on hand for when I started working. I didn\u2019t want to be a burden on the team I\u2019m assigned to. It turns out I simply over-prepared.</p><p>I spent 3 weeks reading a 1,000-page book on C++. I don\u2019t remember 1,000 pages worth, but I know a good bit about C++ now. As it turns out, I\u2019m using Python for the interview, not C++. I had assumed I needed C++, C, or Java, but I was wrong. It\u2019s good to ask, not assume.</p><p>I read way more books than I needed to. There are only 3 or 4 books I should have read.</p><p>I have a code catalog of dozens of algorithms that I review, most of which I wouldn\u2019t expect in an interview. You don\u2019t need to do that.</p><p>I watched many hours of YouTube videos but could have watched far less, and spread out topics over time.</p><p>I should have stopped reading books and watching videos earlier and started on coding problems sooner. I would have been able to spend more time applying the topics I learned.</p><p>Spaced repetition is the key to memorization. Once you learn something, review it again later, and again even later. At each repetition, you reinforce your learning. Spending hours and hours at one time on priority queues won\u2019t make you an expert. You become an expert by revisiting and reviewing over time. If you do so, you\u2019ll get to the point where can\u2019t forget details.</p><p>To help review, I made 1,792 flashcards (digital flashcards). This is way too many. I review them on my phone or tablet whenever I get a spare moment (such as during Christmas shopping). Flash cards and spaced repetition go hand-in-hand. Once I get an answer on a flashcard right, I don\u2019t mark it as known. I keep it in the deck and once I\u2019ve seen it and answered it correctly many times, then I mark it as known.</p><p>My sense of fear (\u201cWhat if they ask me a question about red-black trees?\u201d) led me to study far more topics than I needed to.</p><p>But I didn\u2019t want to just prepare for the interview, I wanted to prepare for a career at Google, solving large-scale problems. That means knowing algorithms that will save computing resources of time, space, and I/O.</p><p>I may never need to know a maximum flow algorithm (Ford-Fulkerson), but it\u2019s nice to know I have that tool available if the situation arises (without memorizing the implementation), and can recognize its application to a problem space.</p><h1>Conclusion</h1><p>Early on, I wished I could skip all this learning, and just hurry up and get hired so I could instead spend my time learning the languages and tools for the team I join. But along the way, I realized how important this knowledge is, and even though most of it may not be applicable on a daily basis, I\u2019m glad I put in the effort. I have a new appreciation of the history of computing, the greats in the field, data structures and algorithms (and how they complement each other), and how computer systems work at low-level.</p><p>I\u2019ll be putting in my application soon. It\u2019s been a long journey getting to this point \u2014 almost an entire year. It began back in January, but I wasn\u2019t able to commit to full-time study until April.</p><p>I\u2019m about as prepared as I can be. I can\u2019t keep studying and putting off the application forever. At some point, I have to take the leap.</p><p>I see a bright future ahead.</p><p>Thanks for taking the time to read my story.</p><p>Article also available in Arabic, Vietnamese, and Korean.</p><h1>Update: January 10, 2017</h1><p>I didn\u2019t get hired. Read on. Thanks to everyone for your amazing, overwhelming support.</p><h1>Update: March 6, 2017</h1><p>The story has a happy ending! I\u2019ve been hired by Amazon to work as a Software Development Engineer on Amazon Web Services!</p><h1>Where to Find Me</h1><p>I blog over at Startup Next Door.</p><p>Google Interview University on Github:</p><a>jwasham/google-interview-universitygoogle-interview-university - A complete daily plan for studying to become a Google software engineer.github.com</a>", "tags": ["Computer Science", "Google", "Programming", "Tech", "Life Lessons"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*fRjwkIB-jmyiuLzpOHvYSg.jpeg"], "url": "https://medium.com/coderbyte/a-guide-to-becoming-a-full-stack-developer-in-2017-5c3c08a1600c", "dateCreated": "2017-04-01T14:32:46.003Z", "datePublished": "2017-04-01T14:32:46.003Z", "dateModified": "2018-12-11T06:04:54.228Z", "headline": "A Guide to Becoming a Full-Stack Developer in 2017 - Tech x Talent - Medium", "name": "A Guide to Becoming a Full-Stack Developer in 2017 - Tech x Talent - Medium", "description": "Full-Stack Web Development, according to the Stack Overflow 2016 Developer Survey, is the most popular developer occupation today. It\u2019s no wonder then that there are dozens of online and in-person\u2026", "identifier": "5c3c08a1600c", "author": {"@type": "Person", "name": "Daniel Borowski", "url": "https://medium.com/@mrdaniel"}, "creator": ["Daniel Borowski"], "publisher": {"@type": "Organization", "name": "Tech x Talent", "url": "https://medium.com/coderbyte", "logo": {"@type": "ImageObject", "width": 453, "height": 60, "url": "https://miro.medium.com/max/906/1*sE4LVdGJ-QjKGtws3-0OPA.png"}}, "mainEntityOfPage": "https://medium.com/coderbyte/a-guide-to-becoming-a-full-stack-developer-in-2017-5c3c08a1600c"}, "content": "<h1>A Guide to Becoming a Full-Stack Developer in 2017</h1><a></a><a>Daniel Borowski</a><a>Apr 1, 2017</a><p>Full-Stack Web Development, according to the Stack Overflow 2016 Developer Survey, is the most popular developer occupation today. It\u2019s no wonder then that there are dozens of online and in-person programs that will help people become Full-Stack Developers and then even assist these new developers land high-paying programming jobs.</p><p>Some popular online programs can be found on Lynda, Udacity, Coursera, Thinkful, General Assembly, and so much more. Aside from these online programs, there are also in-person coding bootcamps that are teaching people the skills required to become web developers.</p><p>In this article I won\u2019t be discussing which websites or coding bootcamps have the best web development programs, instead I will be providing a definitive guide to what I believe are the most important skills required to become a Full-Stack Web Developer today and land a job if you\u2019ve never coded before. I will be basing the list off of three things:</p><ol><li>A combination of what most programs in 2017 are teaching students.</li><li>My own personal experiences from interviewing at companies for developer positions in the past and also interviewing potential candidates for current Full-Stack Developer positions at my current company.</li><li>Stories and feedback from people on Coderbyte who have been accepted to coding bootcamps and then proceeded to get programming jobs (see below).</li></ol><h1>The Definitive Guide</h1><p>A Full-Stack Web Developer is someone who is able to work on both the front-end and back-end portions of an application. Front-end generally refers to the portion of an application the user will see or interact with, and the back-end is the part of the application that handles the logic, database interactions, user authentication, server configuration, etc. Being a Full-Stack Developer doesn\u2019t mean that you have necessarily mastered everything required to work with the front-end or back-end, but it means that you are able to work on both sides and understand what is going on when building an application.</p><p>If you want to become a Full-Stack Web Developer in 2017 and land your first job, below is a reference guide with a list of things you should learn.</p><h1>1. HTML/CSS</h1><p>Almost every single program, whether online or in-person, that is teaching you how to be a web developer will start with HTML and CSS because they are the building blocks of the web. Simply put, HTML allows you to add content to a website and CSS is what allows you to style your content. The following topics related to HTML/CSS come up often in interviews and on the actual job when you\u2019re working:</p><ul><li>Semantic HTML.</li><li>Be able to explain the CSS Box Model.</li><li>Benefits of CSS preprocessors (you don\u2019t necessarily need to understand how to use one on a deep level, but you should to understand what they are for and how they help with development).</li><li>CSS Media Queries to target different devices and write responsive CSS.</li><li>Bootstrap (a framework for helping design and layout content on a page and while many online programs or schools focus heavily on teaching Bootstrap, in reality it\u2019s more important to have a deep knowledge of fundamental CSS than specific Bootstrap features and methods).</li></ul><h1>2. JavaScript</h1><p>The JavaScript language is growing more popular every year and new libraries, frameworks, and tools are constantly being released. Based on the Stack Overflow 2016 Developer Survey, JavaScript is the most popular language in both Full-Stack, Front-end, and Back-end Development. It\u2019s the only language that runs natively in the browser, and can double up as a server-side language as well (as you\u2019ll see below with Node.js). Below are some topics you need to understand as a Full-Stack Developer:</p><ul><li>Understand how to work with the DOM. Also know what JSON is and how to manipulate it.</li><li>Important language features such as functional composition, prototypal inheritance, closures, event delegation, scope, higher-order functions.</li><li>Asynchronous control flow, promises, and callbacks.</li><li>Learn how to properly structure your code and modularize parts of it, things like webpack, browserify, or build tools like gulp will definitely be helpful to know.</li><li>Know how to use at least one popular framework (many programs will focus heavily on teaching you a library or framework like React or AngularJS, but in reality it\u2019s much more important to have a deep understanding of the JavaScript language and not focus so much on framework-specific features. Once you have a good understanding of JavaScript, picking up a framework that sits on top of it won\u2019t be too hard anyway).</li><li>Although some may argue that you should be using this less or that it\u2019s slowly dying, jQuery code still exists in most applications and a solid understanding of it will be helpful.</li><li>Some knowledge on testing frameworks and why they\u2019re important (some may even claim that this topic should be optional).</li><li>Learn about some important new ES6 features (optional).</li></ul><h1>3. Back-End Language</h1><p>Once you feel you\u2019ve gotten a good grasp on HTML/CSS and JavaScript, you\u2019ll want to move on to a back-end language that will handle things like database operations, user authentication, and application logic. All online programs and bootcamps usually focus on a specific back-end language, and in reality in doesn\u2019t matter which one you learn so much as long as you understand what is going on and you learn the nuances of your chosen language. You\u2019ll get a ton of different responses if you ask someone which back-end language is the best to learn, so below I\u2019ve listed a few popular combinations. An important note: whichever you decide to learn, just stick with it and learn as much as you can about it \u2014 there are jobs out there for all the languages listed below.</p><ul><li>Node.js: This is a great option because Node.js is itself just a JavaScript environment which means you don\u2019t need to learn a new language. This is a big reason why a lot of online programs and bootcamps choose to teach Node.js. The most popular framework you\u2019d most likely learn to aid you in developing web applications is Express.</li><li>Ruby: Some popular frameworks for developing in Ruby are Rails and Sinatra. Plenty of programs teach Ruby as a first back-end language.</li><li>Python: Some popular frameworks for developing in Python are Django and Flask.</li><li>Java: The Java language isn\u2019t taught so much these days when it comes to Full-Stack Web Development, but some companies do use Java as their back-end and it is still a very in-demand language (see image above).</li><li>PHP: PHP is rarely taught in programs these days, but just like with Java, it is still very in-demand and it is a cornerstone of the web today.</li></ul><h1>4. Databases & Web Storage</h1><p>When learning to build web applications, at some point you\u2019ll probably want to store data somewhere and then access it later. You should have a good grasp on the following topics related to databases and storage.</p><ul><li>Understand the benefits of relational data, e.g. SQL.</li><li>Learn about NoSQL databases, e.g. MongoDB.</li><li>Understand which would be better in certain situations.</li><li>Know how to connect a database with your chosen back-end language (e.g. Node.js + MongoDB).</li><li>Understand the benefits of in-memory data stores like Redis or memcached.</li><li>Web storage to store sessions, cookies, and cached data in the browser.</li><li>Scaling databases, ACID, and ORM (all optional).</li></ul><h1>5. HTTP & REST</h1><p>HTTP is a stateless application protocol on the Internet \u2014 it\u2019s what allows clients to communicate with servers (e.g. your JavaScript code can make an AJAX request to some back-end code you have running on a server which will happen via HTTP). Some important topics you should learn about are listed below:</p><ul><li>What is REST and why is it important in regards to the HTTP protocol and web applications.</li><li>Best practices for designing a RESTful API. POST/GET requests.</li><li>Learning how to use Chrome DevTools can be extremely helpful.</li><li>What are SSL Certificates.</li><li>HTTP/2 & SPDY (optional).</li><li>WebSockets, Web Workers, and Service Workers (all optional).</li></ul><h1>6. Web Application Architecture</h1><p>Once you think you have a grasp on HTML/CSS, JavaScript, back-end programming, databases, and HTTP/REST, then comes the tricky part. At this point if you want to create a somewhat complex web application, you\u2019ll need to know how to structure your code, how to separate your files, where to host your large media files, how to structure the data in your database, where to perform certain computational tasks (client-side vs server-side), and much more.</p><p>There are best practices that you can read about online on, but the best way to actually learn about application architecture is by working on a large application yourself that contains several moving parts \u2014 or even better, working on a team and together developing a somewhat large/complex application.</p><p>This is why, for example, someone with 7+ years of experience may not necessarily know CSS or JavaScript better than someone with 2 years of experience, but over all of those years they\u2019ve presumably worked with all sorts of different applications and websites and have learned how to architect and design applications (among learning other important things) to be most efficient and can see the \u201cbig picture\u201d when it comes to development. Below are some things you can read that will help you learn how to architect your web applications efficiently:</p><ul><li>Learn about common platforms as a service, e.g. Heroku and AWS. Heroku allows you to easily upload your code and have an application up and running with very little configuration or server maintenance and AWS offers dozens of products and services to help with storage, video processing, load balancing, and much more.</li><li>Performance optimization for applications and modern browsers.</li><li>Some opinions on what a web application architecture should include.</li><li>Designing Web Applications by Microsoft.</li><li>MVC.</li><li>Most importantly though you should try to work on projects with people, look at codebases of popular projects on GitHub, and learn as much as you can from senior developers.</li></ul><h1>7. Git</h1><p>Git is a version control system that allows developers working on a team to keep track of all the changes being made to a codebase. It\u2019s important to know a few important things related to Git so that you understand how to properly get the latest code that you\u2019ve missed, update parts of the code, make fixes, and change other people\u2019s code without breaking things. You should definitely learn the concept behind Git and play around with it yourself.</p><ul><li>Here\u2019s a reference list of some common git commands you\u2019ll likely use.</li><li>Here\u2019s a tutorial on using Git and GitHub for beginners.</li></ul><h1>8. Basic Algorithms & Data Structures</h1><p>This topic is somewhat polarizing in the development world because there are developers who don\u2019t think there should be such a heavy focus on computer science topics like tree traversal, sorting, algorithm analysis, matrix manipulation, etc. in web development. However, there are companies like Google that are notorious for asking these types of questions in their interviews. As someone said about the Front-End engineering interview at Google:</p><p>That said, as Ryan McGrath mentions, our front-end (FE) engineers are expected to have a solid CS background, like all our engineers.</p><p>While there are companies that practically require applicants to have a computer science degree or equivalent, there are plenty of companies that will hire people without this technical qualification if they can prove that they know how to develop applications and show an understanding of the whole domain. But part of being a competent developer and not writing inefficient code or using the wrong tools is an understanding of some basic algorithms and data structures and being able to analyze trade-offs. So here are some things you should definitely learn:</p><ul><li>Improving your Algorithms & Data Structure Skills Article</li><li>Study hash tables and try to understand them on a deeper level. This data structure underlies objects in JavaScript (dictionaries in Python and hashes in Ruby).</li><li>Understand how trees and graphs can be beneficial as data structures.</li><li>Understand the basics of Big-O analysis so you don\u2019t do silly things like create a nested loop 3 levels down if you don\u2019t need to!</li><li>Know when to use an object vs an array and understand the trade-offs.</li><li>Learn why caching is so important when working with a large amount of data. Also learn the pros and cons of in-memory vs disk storage.</li><li>Learn the difference between queues and stacks.</li></ul><p>It\u2019ll be hard work learning all of this, but it\u2019s rewarding in the end and Full-Stack Development is fun! Leave your comments below, and check out Coderbyte for some algorithm practice.</p>", "tags": ["Programming", "Web Development", "Full Stack", "JavaScript", "Coding"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*1p1PAJXEmxbzE4TJ_w81cQ.jpeg"], "url": "https://towardsdatascience.com/random-forest-in-python-24d0893d51c0", "dateCreated": "2017-12-27T17:19:54.597Z", "datePublished": "2017-12-27T17:19:54.597Z", "dateModified": "2019-12-10T23:34:59.143Z", "headline": "Random Forest in Python - Towards Data Science", "name": "Random Forest in Python - Towards Data Science", "description": "There has never been a better time to get into machine learning. With the learning resources available online, free open-source tools with implementations of any algorithm imaginable, and the cheap\u2026", "identifier": "24d0893d51c0", "author": {"@type": "Person", "name": "Will Koehrsen", "url": "https://williamkoehrsen.medium.com"}, "creator": ["Will Koehrsen"], "publisher": {"@type": "Organization", "name": "Towards Data Science", "url": "towardsdatascience.com", "logo": {"@type": "ImageObject", "width": 165, "height": 60, "url": "https://miro.medium.com/max/330/1*mG6i4Bh_LgixUYXJgQpYsg@2x.png"}}, "mainEntityOfPage": "https://towardsdatascience.com/random-forest-in-python-24d0893d51c0"}, "content": "<h1>Random Forest in Python</h1><a></a><a>Will Koehrsen</a><a>Dec 27, 2017\u00b721 min read</a><a></a><p>A Practical End-to-End Machine Learning Example</p><p>There has never been a better time to get into machine learning. With the learning resources available online, free open-source tools with implementations of any algorithm imaginable, and the cheap availability of computing power through cloud services such as AWS, machine learning is truly a field that has been democratized by the internet. Anyone with access to a laptop and a willingness to learn can try out state-of-the-art algorithms in minutes. With a little more time, you can develop practical models to help in your daily life or at work (or even switch into the machine learning field and reap the economic benefits). This post will walk you through an end-to-end implementation of the powerful random forest machine learning model. It is meant to serve as a complement to my conceptual explanation of the random forest, but can be read entirely on its own as long as you have the basic idea of a decision tree and a random forest. A follow-up post details how we can improve upon the model built here.</p><p>There will of course be Python code here, however, it is not meant to intimate anyone, but rather to show how accessible machine learning is with the resources available today! The complete project with data is available on GitHub, and the data file and Jupyter Notebook can also be downloaded from Google Drive. All you need is a laptop with Python installed and the ability to start a Jupyter Notebook and you can follow along. (For installing Python and running a Jupyter notebook check out this guide). There will be a few necessary machine learning topics touched on here, but I will try to make them clear and provide resources for learning more for those interested.</p><h1>Problem Introduction</h1><p>The problem we will tackle is predicting the max temperature for tomorrow in our city using one year of past weather data. I am using Seattle, WA but feel free to find data for your own city using the NOAA Climate Data Online tool. We are going to act as if we don\u2019t have access to any weather forecasts (and besides, it\u2019s more fun to make our own predictions rather than rely on others). What we do have access to is one year of historical max temperatures, the temperatures for the previous two days, and an estimate from a friend who is always claiming to know everything about the weather. This is a supervised, regression machine learning problem. It\u2019s supervised because we have both the features (data for the city) and the targets (temperature) that we want to predict. During training, we give the random forest both the features and targets and it must learn how to map the data to a prediction. Moreover, this is a regression task because the target value is continuous (as opposed to discrete classes in classification). That\u2019s pretty much all the background we need, so let\u2019s start!</p><h1>Roadmap</h1><p>Before we jump right into programming, we should lay out a brief guide to keep us on track. The following steps form the basis for any machine learning workflow once we have a problem and model in mind:</p><ol><li>State the question and determine required data</li><li>Acquire the data in an accessible format</li><li>Identify and correct missing data points/anomalies as required</li><li>Prepare the data for the machine learning model</li><li>Establish a baseline model that you aim to exceed</li><li>Train the model on the training data</li><li>Make predictions on the test data</li><li>Compare predictions to the known test set targets and calculate performance metrics</li><li>If performance is not satisfactory, adjust the model, acquire more data, or try a different modeling technique</li><li>Interpret model and report results visually and numerically</li></ol><p>Step 1 is already checked off! We have our question: \u201ccan we predict the max temperature tomorrow for our city?\u201d and we know we have access to historical max temperatures for the past year in Seattle, WA.</p><h1>Data Acquisition</h1><p>First, we need some data. To use a realistic example, I retrieved weather data for Seattle, WA from 2016 using the NOAA Climate Data Online tool. Generally, about 80% of the time spent in data analysis is cleaning and retrieving data, but this workload can be reduced by finding high-quality data sources. The NOAA tool is surprisingly easy to use and temperature data can be downloaded as clean csv files which can be parsed in languages such as Python or R. The complete data file is available for download for those wanting to follow along.</p><p>The following Python code loads in the csv data and displays the structure of the data:</p><p>The information is in the tidy data format with each row forming one observation, with the variable values in the columns.</p><p>Following are explanations of the columns:</p><p>year: 2016 for all data points</p><p>month: number for month of the year</p><p>day: number for day of the year</p><p>week: day of the week as a character string</p><p>temp_2: max temperature 2 days prior</p><p>temp_1: max temperature 1 day prior</p><p>average: historical average max temperature</p><p>actual: max temperature measurement</p><p>friend: your friend\u2019s prediction, a random number between 20 below the average and 20 above the average</p><h1>Identify Anomalies/ Missing Data</h1><p>If we look at the dimensions of the data, we notice only there are only 348 rows, which doesn\u2019t quite agree with the 366 days we know there were in 2016. Looking through the data from the NOAA, I noticed several missing days, which is a great reminder that data collected in the real-world will never be perfect. Missing data can impact an analysis as can incorrect data or outliers. In this case, the missing data will not have a large effect, and the data quality is good because of the source. We also can see there are nine columns which represent eight features and the one target (\u2018actual\u2019).</p><p>To identify anomalies, we can quickly compute summary statistics.</p><p>There are not any data points that immediately appear as anomalous and no zeros in any of the measurement columns. Another method to verify the quality of the data is make basic plots. Often it is easier to spot anomalies in a graph than in numbers. I have left out the actual code here, because plotting is Python is non-intuitive but feel free to refer to the notebook for the complete implementation (like any good data scientist, I pretty much copy and pasted the plotting code from Stack Overflow).</p><p>Examining the quantitative statistics and the graphs, we can feel confident in the high quality of our data. There are no clear outliers, and although there are a few missing points, they will not detract from the analysis.</p><h1>Data Preparation</h1><p>Unfortunately, we aren\u2019t quite at the point where you can just feed raw data into a model and have it return an answer (although people are working on this)! We will need to do some minor modification to put our data into machine-understandable terms. We will use the Python library Pandas for our data manipulation relying, on the structure known as a dataframe, which is basically an excel spreadsheet with rows and columns.</p><p>The exact steps for preparation of the data will depend on the model used and the data gathered, but some amount of data manipulation will be required for any machine learning application.</p><p>One-Hot Encoding</p><p>The first step for us is known as one-hot encoding of the data. This process takes categorical variables, such as days of the week and converts it to a numerical representation without an arbitrary ordering. Days of the week are intuitive to us because we use them all the time. You will (hopefully) never find anyone who doesn\u2019t know that \u2018Mon\u2019 refers to the first day of the workweek, but machines do not have any intuitive knowledge. What computers know is numbers and for machine learning we must accommodate them. We could simply map days of the week to numbers 1\u20137, but this might lead to the algorithm placing more importance on Sunday because it has a higher numerical value. Instead, we change the single column of weekdays into seven columns of binary data. This is best illustrated pictorially. One hot encoding takes this:</p><p>and turns it into</p><p>So, if a data point is a Wednesday, it will have a 1 in the Wednesday column and a 0 in all other columns. This process can be done in pandas in a single line!</p><p>Snapshot of data after one-hot encoding:</p><p>The shape of our data is now 349 x 15 and all of the column are numbers, just how the algorithm likes it!</p><p>Features and Targets and Convert Data to Arrays</p><p>Now, we need to separate the data into the features and targets. The target, also known as the label, is the value we want to predict, in this case the actual max temperature and the features are all the columns the model uses to make a prediction. We will also convert the Pandas dataframes to Numpy arrays because that is the way the algorithm works. (I save the column headers, which are the names of the features, to a list to use for later visualization).</p><p>Training and Testing Sets</p><p>There is one final step of data preparation: splitting data into training and testing sets. During training, we let the model \u2018see\u2019 the answers, in this case the actual temperature, so it can learn how to predict the temperature from the features. We expect there to be some relationship between all the features and the target value, and the model\u2019s job is to learn this relationship during training. Then, when it comes time to evaluate the model, we ask it to make predictions on a testing set where it only has access to the features (not the answers)! Because we do have the actual answers for the test set, we can compare these predictions to the true value to judge how accurate the model is. Generally, when training a model, we randomly split the data into training and testing sets to get a representation of all data points (if we trained on the first nine months of the year and then used the final three months for prediction, our algorithm would not perform well because it has not seen any data from those last three months.) I am setting the random state to 42 which means the results will be the same each time I run the split for reproducible results.</p><p>The following code splits the data sets with another single line:</p><p>We can look at the shape of all the data to make sure we did everything correctly. We expect the training features number of columns to match the testing feature number of columns and the number of rows to match for the respective training and testing features and the labels :</p><p>It looks as if everything is in order! Just to recap, to get the data into a form acceptable for machine learning we:</p><ol><li>One-hot encoded categorical variables</li><li>Split data into features and labels</li><li>Converted to arrays</li><li>Split data into training and testing sets</li></ol><p>Depending on the initial data set, there may be extra work involved such as removing outliers, imputing missing values, or converting temporal variables into cyclical representations. These steps may seem arbitrary at first, but once you get the basic workflow, it will be generally the same for any machine learning problem. It\u2019s all about taking human-readable data and putting it into a form that can be understood by a machine learning model.</p><h1>Establish Baseline</h1><p>Before we can make and evaluate predictions, we need to establish a baseline, a sensible measure that we hope to beat with our model. If our model cannot improve upon the baseline, then it will be a failure and we should try a different model or admit that machine learning is not right for our problem. The baseline prediction for our case can be the historical max temperature averages. In other words, our baseline is the error we would get if we simply predicted the average max temperature for all days.</p><p>We now have our goal! If we can\u2019t beat an average error of 5 degrees, then we need to rethink our approach.</p><h1>Train Model</h1><p>After all the work of data preparation, creating and training the model is pretty simple using Scikit-learn. We import the random forest regression model from skicit-learn, instantiate the model, and fit (scikit-learn\u2019s name for training) the model on the training data. (Again setting the random state for reproducible results). This entire process is only 3 lines in scikit-learn!</p><h1>Make Predictions on the Test Set</h1><p>Our model has now been trained to learn the relationships between the features and the targets. The next step is figuring out how good the model is! To do this we make predictions on the test features (the model is never allowed to see the test answers). We then compare the predictions to the known answers. When performing regression, we need to make sure to use the absolute error because we expect some of our answers to be low and some to be high. We are interested in how far away our average prediction is from the actual value so we take the absolute value (as we also did when establishing the baseline).</p><p>Making predictions with out model is another 1-line command in Skicit-learn.</p><p>Our average estimate is off by 3.83 degrees. That is more than a 1 degree average improvement over the baseline. Although this might not seem significant, it is nearly 25% better than the baseline, which, depending on the field and the problem, could represent millions of dollars to a company.</p><h1>Determine Performance Metrics</h1><p>To put our predictions in perspective, we can calculate an accuracy using the mean average percentage error subtracted from 100 %.</p><p>That looks pretty good! Our model has learned how to predict the maximum temperature for the next day in Seattle with 94% accuracy.</p><h1>Improve Model if Necessary</h1><p>In the usual machine learning workflow, this would be when start hyperparameter tuning. This is a complicated phrase that means \u201cadjust the settings to improve performance\u201d (The settings are known as hyperparameters to distinguish them from model parameters learned during training). The most common way to do this is simply make a bunch of models with different settings, evaluate them all on the same validation set, and see which one does best. Of course, this would be a tedious process to do by hand, and there are automated methods to do this process in Skicit-learn. Hyperparameter tuning is often more engineering than theory-based, and I would encourage anyone interested to check out the documentation and start playing around! An accuracy of 94% is satisfactory for this problem, but keep in mind that the first model built will almost never be the model that makes it to production.</p><h1>Interpret Model and Report Results</h1><p>At this point, we know our model is good, but it\u2019s pretty much a black box. We feed in some Numpy arrays for training, ask it to make a prediction, evaluate the predictions, and see that they are reasonable. The question is: how does this model arrive at the values? There are two approaches to get under the hood of the random forest: first, we can look at a single tree in the forest, and second, we can look at the feature importances of our explanatory variables.</p><h2>Visualizing a Single Decision Tree</h2><p>One of the coolest parts of the Random Forest implementation in Skicit-learn is we can actually examine any of the trees in the forest. We will select one tree, and save the whole tree as an image.</p><p>The following code takes one tree from the forest and saves it as an image.</p><p>Let\u2019s take a look:</p><p>Wow! That looks like quite an expansive tree with 15 layers (in reality this is quite a small tree compared to some I\u2019ve seen). You can download this image yourself and examine it in greater detail, but to make things easier, I will limit the depth of trees in the forest to produce an understandable image.</p><p>Here is the reduced size tree annotated with labels</p><p>Based solely on this tree, we can make a prediction for any new data point. Let\u2019s take an example of making a prediction for Wednesday, December 27, 2017. The (actual) variables are: temp_2 = 39, temp_1 = 35, average = 44, and friend = 30. We start at the root node and the first answer is True because temp_1 \u2264 59.5. We move to the left and encounter the second question, which is also True as average \u2264 46.8. Move down to the left and on to the third and final question which is True as well because temp_1 \u2264 44.5. Therefore, we conclude that our estimate for the maximum temperature is 41.0 degrees as indicated by the value in the leaf node. An interesting observation is that in the root node, there are only 162 samples despite there being 261 training data points. This is because each tree in the forest is trained on a random subset of the data points with replacement (called bagging, short for bootstrap aggregating). (We can turn off the sampling with replacement and use all the data points by setting bootstrap = False when making the forest). Random sampling of data points, combined with random sampling of a subset of the features at each node of the tree, is why the model is called a \u2018random\u2019 forest.</p><p>Furthermore, notice that in our tree, there are only 2 variables we actually used to make a prediction! According to this particular decision tree, the rest of the features are not important for making a prediction. Month of the year, day of the month, and our friend\u2019s prediction are utterly useless for predicting the maximum temperature tomorrow! The only important information according to our simple tree is the temperature 1 day prior and the historical average. Visualizing the tree has increased our domain knowledge of the problem, and we now know what data to look for if we are asked to make a prediction!</p><h2>Variable Importances</h2><p>In order to quantify the usefulness of all the variables in the entire random forest, we can look at the relative importances of the variables. The importances returned in Skicit-learn represent how much including a particular variable improves the prediction. The actual calculation of the importance is beyond the scope of this post, but we can use the numbers to make relative comparisons between variables.</p><p>The code here takes advantage of a number of tricks in the Python language, namely list comprehensive, zip, sorting, and argument unpacking. It\u2019s not that important to understand these at the moment, but if you want to become skilled at Python, these are tools you should have in your arsenal!</p><p>At the top of the list is temp_1, the max temperature of the day before. This tells us the best predictor of the max temperature for a day is the max temperature of the day before, a rather intuitive finding. The second most important factor is the historical average max temperature, also not that surprising. Your friend turns out to not be very helpful, along with the day of the week, the year, the month, and the temperature 2 days prior. These importances all make sense as we would not expect the day of the week to be a predictor of maximum temperature as it has nothing to do with weather. Moreover, the year is the same for all data points and hence provides us with no information for predicting the max temperature.</p><p>In future implementations of the model, we can remove those variables that have no importance and the performance will not suffer. Additionally, if we are using a different model, say a support vector machine, we could use the random forest feature importances as a kind of feature selection method. Let\u2019s quickly make a random forest with only the two most important variables, the max temperature 1 day prior and the historical average and see how the performance compares.</p><p>This tells us that we actually do not need all the data we collected to make accurate predictions! If we were to continue using this model, we could only collect the two variables and achieve nearly the same performance. In a production setting, we would need to weigh the decrease in accuracy versus the extra time required to obtain more information. Knowing how to find the right balance between performance and cost is an essential skill for a machine learning engineer and will ultimately depend on the problem!</p><p>At this point we have covered pretty much everything there is to know for a basic implementation of the random forest for a supervised regression problem. We can feel confident that our model can predict the maximum temperature tomorrow with 94% accuracy from one year of historical data. From here, feel free to play around with this example, or use the model on a data set of your choice. I will wrap up this post by making a few visualizations. My two favorite parts of data science are graphing and modeling, so naturally I have to make some charts! In addition to being enjoyable to look at, charts can help us diagnose our model because they compress a lot of numbers into an image that we can quickly examine.</p><h2>Visualizations</h2><p>The first chart I\u2019ll make is a simple bar plot of the feature importances to illustrate the disparities in the relative significance of the variables. Plotting in Python is kind of non-intuitive, and I end up looking up almost everything on Stack Overflow when I make graphs. Don\u2019t worry if the code here doesn\u2019t quite make sense, sometimes fully understanding the code isn\u2019t necessary to get the end result you want!</p><p>Next, we can plot the entire dataset with predictions highlighted. This requires a little data manipulation, but its not too difficult. We can use this plot to determine if there are any outliers in either the data or our predictions.</p><p>A little bit of work for a nice looking graph! It doesn\u2019t look as if we have any noticeable outliers that need to be corrected. To further diagnose the model, we can plot residuals (the errors) to see if our model has a tendency to over-predict or under-predict, and we can also see if the residuals are normally distributed. However, I will just make one final chart showing the actual values, the temperature one day previous, the historical average, and our friend\u2019s prediction. This will allow us to see the difference between useful variables and those that aren\u2019t so helpful.</p><p>It is a little hard to make out all the lines, but we can see why the max temperature one day prior and the historical max temperature are useful for predicting max temperature while our friend is not (don\u2019t give up on the friend yet, but maybe also don\u2019t place so much weight on their estimate!). Graphs such as this are often helpful to make ahead of time so we can choose the variables to include, but they also can be used for diagnosis. Much as in the case of Anscombe\u2019s quartet, graphs are often more revealing than quantitative numbers and should be a part of any machine learning workflow.</p><h1>Conclusions</h1><p>With those graphs, we have completed an entire end-to-end machine learning example! At this point, if we want to improve our model, we could try different hyperparameters (settings) try a different algorithm, or the best approach of all, gather more data! The performance of any model is directly proportional to the amount of valid data it can learn from, and we were using a very limited amount of information for training. I would encourage anyone to try and improve this model and share the results. From here you can dig more into the random forest theory and application using numerous online (free) resources. For those looking for a single book to cover both theory and Python implementations of machine learning models, I highly recommend Hands-On Machine Learning with Scikit-Learn and Tensorflow. Moreover, I hope everyone who made it through has seen how accessible machine learning has become and is ready to join the welcoming and helpful machine learning community.</p><p>As always, I welcome feedback and constructive criticism! My email is wjk68@case.edu.</p>", "tags": ["Machine Learning", "Data Science", "Random Forest", "Python", "Programming"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*Oy2Z6sUhmdlSbUCR2-pGCw.png"], "url": "https://johnnylin.medium.com/how-to-make-80-000-per-month-on-the-apple-app-store-bdb943862e88", "dateCreated": "2017-06-09T17:54:59.118Z", "datePublished": "2017-06-09T17:54:59.118Z", "dateModified": "2020-12-16T02:43:34.355Z", "headline": "How to Make $80,000 Per Month on the Apple App Store", "name": "How to Make $80,000 Per Month on the Apple App Store", "description": "At WWDC, Apple reported that they\u2019ve paid out $70 billion to developers, with 30% of that ($21 billion!) in the last year. That\u2019s a huge spike, and surprising to me because it didn\u2019t seem like my\u2026", "identifier": "bdb943862e88", "author": {"@type": "Person", "name": "Johnny Lin", "url": "https://johnnylin.medium.com"}, "creator": ["Johnny Lin"], "publisher": {"@type": "Organization", "name": "Medium", "url": "https://johnnylin.medium.com/", "logo": {"@type": "ImageObject", "width": 308, "height": 60, "url": "https://miro.medium.com/max/616/1*OMF3fSqH8t4xBJ9-6oZDZw.png"}}, "mainEntityOfPage": "https://johnnylin.medium.com/how-to-make-80-000-per-month-on-the-apple-app-store-bdb943862e88"}, "content": "<h1>How to Make $80,000 Per Month on the Apple App Store</h1><h2>It\u2019s far easier than you think. No luck or perseverance necessary.</h2><a></a><a>Johnny Lin</a><a>Jun 9, 2017\u00b710 min read</a><h1>\u27a1\ufe0f This story has been updated and moved to the \u201cTransparency Matters\u201d blog.</h1><p>Read the story here:</p><a>How to Make $80,000 Per Month on the Apple App StoreNote: I originally published this story on Medium, where it received 45,000 likes (#52 overall that year). I'm\u2026blog.lockdownprivacy.com</a><p>\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800</p><p>At WWDC, Apple reported that they\u2019ve paid out $70 billion to developers, with 30% of that ($21 billion!) in the last year. That\u2019s a huge spike, and surprising to me because it didn\u2019t seem like my friends and I were spending more on apps last year. But that\u2019s anecdotal, so I wondered: Where are these revenues coming from? I opened App Store to browse the top grossing apps.</p><h1>Step 1: Follow The Money</h1><p>I scrolled down the list in the Productivity category and saw apps from well-known companies like Dropbox, Evernote, and Microsoft. That was to be expected. But what\u2019s this? The #10 Top Grossing Productivity app (as of June 7th, 2017) was an app called \u201cMobile protection :Clean & Security VPN\u201d.</p><p>Given the terrible title of this app (inconsistent capitalization, misplaced colon, and grammatically nonsensical \u201cClean & Security VPN?\u201d), I was sure this was a bug in the rankings algorithm. So I check Sensor Tower for an estimate of the app\u2019s revenue, which showed\u2026 $80,000 per month?? That couldn\u2019t possibly be right. Now I was really curious.</p><p>I tap into the app details to see that the developer is \u201cNgan Vo Thi Thuy\u201d. Wait so, this is a VPN service offered by an independent developer who didn\u2019t even bother to incorporate a company? That\u2019s a huge red flag. For those of you who don\u2019t know why this is bad, a VPN basically routes all your internet traffic through a third party server. So in this case, a random person who couldn\u2019t piece together a grammatically correct title, who also didn\u2019t bother to incorporate a company, wants access to all your internet traffic.</p><p>Another red flag was this comically terrible app description:</p><p>According to this, \u201cMobile protection :Clean & Security VPN\u201d is \u201cFull of features\u201d \u2014 well, it\u2019s certainly full of something. Apparently, \u201cMobile protection\u201d includes protecting you from \u201cdupplicate\u201d contacts. And these \u201cscans\u201d are what the screenshots claim as \u201cQuick & Full Scan Internet Security\u201d. Five internets to anyone who can figure out the relationship between Internet Security and duplicate contacts.</p><p>All these red flags \u2014 and I haven\u2019t even downloaded the app yet. I check the Reviews tab to find some vague, fake-looking 5-star reviews:</p><p>Seeing the dates on these reviews brought up another question. How long has this app been up? Well, according to Sensor Tower, \u201cMobile protection :Clean & Security VPN\u201d has been a top 20 grossing Productivity app since at least April 20th (almost 2 months now).</p><h1>Step 2: Duplicitous Behavior</h1><p>Out of curiosity about this supposedly top grossing app, I download it. Here\u2019s what happens when I open it for the first time:</p><p>Yes, \u201cThis app need to cccess to your Contact to scan your Contact first.\u201d The only option here is to tap Agree, and then iOS asks me if I want to give this app \u201ccccess\u201d to my contacts. Uhm, no thank you?</p><p>After skipping that, the app tells me my device is at risk. Of course it is. It\u2018s also ready to \u201cDevice Analyze\u201d, Quick and Full Scan, and secure my internet (I can\u2019t wait!).</p><p>Tapping \u201cDevice Analyze\u201d shows my iPhone\u2019s free memory and storage \u2014 a useless and irrelevant feature.</p><p>Tapping both Quick Scan and Full Scan shows:</p><p>\u201cYour contact is cleaned. No dupplicated found.\u201d</p><p>Oh good \u2014 no duplicates, except for the extra \u201cp\u201d in \u201cdupplicated\u201d, I guess? \ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f</p><p>Okay, so let me finally secure my internet by tapping \u201cSecure Internet\u201d. Hmm, what\u2019s this\u2014?</p><p>Up comes this incredibly generous offer to play a bubble shooter game without installing! Not sure what I did to deserve this amazing free gift, but it will have to wait. I tap the \u201cX\u201d to return to securing my internet.</p><p>Here\u2019s the next screen:</p><p>And obviously, I jump at the opportunity to \u201cInstantly use full of smart anti-virus\u201d by tapping \u201cFREE TRIAL\u201d. It\u2019s free, after all.</p><p>Touch ID? Okay! Wait\u2026 let\u2019s read the fine print:</p><p>\u201cFull Virus, Malware scanner\u201d: What? I\u2019m pretty sure it\u2019s impossible for any app to scan my iPhone for viruses or malware, since third party apps are sandboxed to their own data, but let\u2019s keep reading\u2026</p><p>\u201cYou will pay $99.99 for a 7-day subscription\u201d</p><p>Uhh\u2026 come again?</p><p>Buried on the third line in a paragraph of text in small font, iOS casually tells me that laying my finger on the home button means I agree to start a $100 subscription. And not only that, but it\u2019s $100 PER WEEK? I was one Touch ID away from a $400 A MONTH subscription to reroute all my internet traffic to a scammer?</p><p>I guess I was lucky I actually read the entire fine print. But what about other people?</p><h1>Step 3: It\u2019s All Starting to \u201cAd\u201d Up\u2026 to Profit</h1><p>It suddenly made a lot of sense how this app generates $80,000 a month. At $400/month per subscriber, it only needs to scam 200 people to make $80,000/month, or $960,000 a year. Of that amount, Apple takes 30%, or $288,000 \u2014 from just this one app.</p><p>At this point, you might still be in disbelief. Maybe you\u2019re thinking: \u201cSure, just 200 people, but still, it seems highly unlikely that even one person would download this scammy looking app, much less pay for it.\u201d</p><p>Maybe you wouldn\u2019t download it. I certainly wouldn\u2019t. But I\u2019ve also never clicked on a Google Ad, yet Google somehow rode Adwords to $700 billion dollars today. \u201cMobile protection :Clean & Security VPN\u201d is currently ranked #144 in most downloaded free productivity apps in the App Store, with an estimated 50,000 downloads in April.</p><p>To get 200 subscribers from 50,000 downloads, they just need to convert 0.4% to purchases \u2014 or maybe even fewer, because these subscriptions are automatically renewing, so the subscribers stack month over month. Can you really not imagine one of your tech-illiterate relatives accidentally (or even intentionally) subscribing to this \u201cfree trial\u201d to protect their iPad from viruses?</p><p>But how did this app get 50,000 downloads in the first place?</p><p>I remembered reading that a large percentage of apps were discovered through app store search. So maybe, this app somehow had really good App Search Optimization. I searched the app store for \u201cvirus scanner\u201d:</p><p>The first result is an ad for \u201cProtection for iPhone \u2014 Mobile Security VPN\u201d. Well, that sounds familiar. This isn\u2019t the same app, but this one\u2019s In-App Purchase is \u201cFree Trial to Premium Protection\u201d for $99.99, and it\u2019s ranked #33 for Top Grossing in the Business category.</p><p>Turns out, scammers are abusing Apple\u2019s relatively new and immature App Store Search Ads product. They\u2019re taking advantage of the fact that there\u2019s no filtering or approval process for ads, and that ads look almost indistinguishable from real results, and some ads take up the entire search result\u2019s first page.</p><p>Later, I dug deeper to find that unfortunately, these aren\u2019t isolated incidents \u2014 they\u2019re fairly common in the app store\u2019s top grossing lists. And this isn\u2019t just happening with security related keywords. It seems like scammers are bidding on many other keywords. Here\u2019s a search for \u201cwifi\u201d:</p><p>The top result is an ad for \u201cWEP Password Generator\u201d, a simple random string generator that charges $50/month. It\u2019s already making $10,000 per month, despite being released in April. It\u2019s likely a clone of this app, which indicates that yes, this scheme has become so large that scammers are copying each other.</p><h1>Fixing the App Store: What You Can Do</h1><p>Well first, if you\u2019re reading this as a developer who also happens to have a less-than-average sense of morality, congratulations! You\u2019ve just learned a (relatively) easy way to make tens of thousands of dollars on Apple\u2019s App Store \u2014 at least until they change something. Otherwise, here\u2019s a few suggestions:</p><ol><li>Teach your less tech-savvy friends and relatives how to check and disable subscriptions. If they\u2019re affected, have them get refunds.</li><li>Report scam apps when you see them with the iTunes Connect Contact Us form. Select \u201cFeedback and Concerns\u201d and \u201cReport a Fraud Concern\u201d.</li><li>Signal boost until Apple fixes this by clicking the heart icon (\u201cRecommend\u201d) at the bottom of this article, and by sharing to FB/Twitter.</li></ol><h1>Fixing the App Store: What Apple Should Do</h1><p>It\u2019s somewhat hard to believe that Apple isn\u2019t aware of this problem, since these apps aren\u2019t small frys \u2014 they\u2019re all over the top lists on the App Store. It could be that they simply don\u2019t consider it a big enough problem to deal with it, or that it just happens to be a very profitable problem for their Search Ads and App Store platforms. Either way, here are some suggestions:</p><ol><li>Remove Scams and Refund Users: The most obvious. Simply hire someone to proactively and regularly scroll through top apps and remove scams. As you can tell from above, these are not hard to spot at all. And for people who have purchased scam subscriptions, automatically and fully refund all of those past purchases.</li><li>Better UI on Touch ID Subscriptions: Don\u2019t use small, fine print with the price buried in the text (see \u201cFree Trial\u201d screenshot above). The price should be much more prominent, with possibly a required 5-second delay before a purchase can be made. As a bonus, maybe show the app\u2019s most useful/recent ratings or reviews here.</li><li>Stricter Review of Subscriptions: How do in-app purchases called \u201cFull Virus, Malware Scanner\u201d get approved by app review for $400 per month? Is anyone home? When a layperson sees this name in an email receipt with a slick green badge icon, they probably don\u2019t cancel it because it looks as official as their Apple Music receipts. And for some apps like this one, despite its in-app purchase being named \u201cFree Trial to Premium\u201d, it wasn\u2019t a trial at all \u2014 it was an immediate purchase.</li><li>Prompt for Delete Subscription on App Deletion: Many 1-star reviewers on scam apps said they were getting charged even though they deleted the app. To most people, that\u2019s the way it should work \u2014 so why doesn\u2019t it work that way? When a user deletes an app, ask the user if they want to also cancel their subscription. Of course, confirm it again so they don\u2019t accidentally cancel their Netflix.</li><li>Easier Cancellation of Subscriptions: Subscriptions are so difficult to cancel, it\u2019s almost as if the design-focused Apple intentionally made it hard. On iOS 10, cancelling a subscription is literally a nine step process. Even installing a third-party keyboard is easier (six steps). Make this simpler, please. And no, the tiny \u201cReport a Problem\u201d button on email receipts isn\u2019t enough. (Update: I\u2019m actually unable to refund one of the scam subscriptions, even through the official Apple links.)</li><li>Fraud- and Abuse-Proof Search Ads: Part of what makes this scam easy to run is the how new Store Search Ads are. Many regular users probably don\u2019t even know they\u2019re clicking an ad. At the least, Apple should review ads for potential fraud before running them (Facebook and Google both do this), and make it more obvious that the top result is an ad.</li><li>Fine and Take Legal Action: This suggestion is last because it\u2019s unlikely Apple will do it. There\u2019s currently no incentive not to build scam apps. The worst that can happen is getting your account deleted \u2014 which doesn\u2019t matter, because you still keep the ill-gotten profits, and you can still make a new account and do it again. Create a deterrent effect by fining and taking legal action against the worst offenders.</li></ol><h1>Final Note</h1><p>App developers take pride in the fact that if their creation adds value, or improves peoples\u2019 lives in some way, then people will be happy to pay for it, and everybody benefits. Not only that, but making good apps requires design, engineering, and sales skills, as well as a ton of dedication and hard work.</p><p>So, aside from the obvious moral wrongs of exploiting the vulnerable for profit, it\u2019s extremely disheartening to know that some developers are becoming financially successful the easy and unethical way \u2014 by making bogus apps that take a few hours to code, and whose functionality is purely to steal from the less well-informed.</p><p>If anyone at Apple is reading this, please do the right thing.</p><p>UPDATE: We received an incredible user response to this story and we\u2019re now reviewing the privacy of top-ranked apps in the App Store at a new site, Privacy Review (privacyreview.co), with new reviews added every week.</p>", "tags": ["Apple", "Technology", "Startup", "Entrepreneurship", "Programming"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*V3JWBvxB92Uo116Bpxa3Tw.png"], "url": "https://towardsdatascience.com/a-one-stop-shop-for-principal-component-analysis-5582fb7e0a9c", "dateCreated": "2017-04-17T20:40:48.450Z", "datePublished": "2017-04-17T20:40:48.450Z", "dateModified": "2019-12-10T22:34:19.441Z", "headline": "A One-Stop Shop for Principal Component Analysis - Towards Data Science", "name": "A One-Stop Shop for Principal Component Analysis - Towards Data Science", "description": "At the beginning of the textbook I used for my graduate stat theory class, the authors (George Casella and Roger Berger) explained in the preface why they chose to write a textbook: I apply the\u2026", "identifier": "5582fb7e0a9c", "author": {"@type": "Person", "name": "Matt Brems", "url": "https://matthew-brems.medium.com"}, "creator": ["Matt Brems"], "publisher": {"@type": "Organization", "name": "Towards Data Science", "url": "towardsdatascience.com", "logo": {"@type": "ImageObject", "width": 165, "height": 60, "url": "https://miro.medium.com/max/330/1*mG6i4Bh_LgixUYXJgQpYsg@2x.png"}}, "mainEntityOfPage": "https://towardsdatascience.com/a-one-stop-shop-for-principal-component-analysis-5582fb7e0a9c"}, "content": "<h1>A One-Stop Shop for Principal Component Analysis</h1><a></a><a>Matt Brems</a><a>Apr 17, 2017\u00b715 min read</a><a></a><p>At the beginning of the textbook I used for my graduate stat theory class, the authors (George Casella and Roger Berger) explained in the preface why they chose to write a textbook:</p><p>\u201cWhen someone discovers that you are writing a textbook, one or both of two questions will be asked. The first is \u201cWhy are you writing a book?\u201d and the second is \u201cHow is your book different from what\u2019s out there?\u201d The first question is fairly easy to answer. You are writing a book because you are not entirely satisfied with the available texts.\u201d</p><p>I apply the authors\u2019 logic here. Principal component analysis (PCA) is an important technique to understand in the fields of statistics and data science\u2026 but when putting a lesson together for my General Assembly students, I found that the resources online were too technical, didn\u2019t fully address our needs, and/or provided conflicting information. It\u2019s safe to say that I\u2019m not \u201centirely satisfied with the available texts\u201d here.</p><p>As a result, I wanted to put together the \u201cWhat,\u201d \u201cWhen,\u201d \u201cHow,\u201d and \u201cWhy\u201d of PCA as well as links to some of the resources that can help to further explain this topic. Specifically, I want to present the rationale for this method, the math under the hood, some best practices, and potential drawbacks to the method.</p><p>While I want to make PCA as accessible as possible, the algorithm we\u2019ll cover is pretty technical. Being familiar with some or all of the following will make this article and PCA as a method easier to understand: matrix operations/linear algebra (matrix multiplication, matrix transposition, matrix inverses, matrix decomposition, eigenvectors/eigenvalues) and statistics/machine learning (standardization, variance, covariance, independence, linear regression, feature selection). I\u2019ve embedded links to illustrations of these topics throughout the article, but hopefully these will serve as a reminder rather than required reading to get through the article.</p><h1>What is PCA?</h1><p>Let\u2019s say that you want to predict what the gross domestic product (GDP) of the United States will be for 2017. You have lots of information available: the U.S. GDP for the first quarter of 2017, the U.S. GDP for the entirety of 2016, 2015, and so on. You have any publicly-available economic indicator, like the unemployment rate, inflation rate, and so on. You have U.S. Census data from 2010 estimating how many Americans work in each industry and American Community Survey data updating those estimates in between each census. You know how many members of the House and Senate belong to each political party. You could gather stock price data, the number of IPOs occurring in a year, and how many CEOs seem to be mounting a bid for public office. Despite being an overwhelming number of variables to consider, this just scratches the surface.</p><p>TL;DR \u2014 you have a lot of variables to consider.</p><p>If you\u2019ve worked with a lot of variables before, you know this can present problems. Do you understand the relationships between each variable? Do you have so many variables that you are in danger of overfitting your model to your data or that you might be violating assumptions of whichever modeling tactic you\u2019re using?</p><p>You might ask the question, \u201cHow do I take all of the variables I\u2019ve collected and focus on only a few of them?\u201d In technical terms, you want to \u201creduce the dimension of your feature space.\u201d By reducing the dimension of your feature space, you have fewer relationships between variables to consider and you are less likely to overfit your model. (Note: This doesn\u2019t immediately mean that overfitting, etc. are no longer concerns \u2014 but we\u2019re moving in the right direction!)</p><p>Somewhat unsurprisingly, reducing the dimension of the feature space is called \u201cdimensionality reduction.\u201d There are many ways to achieve dimensionality reduction, but most of these techniques fall into one of two classes:</p><ul><li>Feature Elimination</li><li>Feature Extraction</li></ul><p>Feature elimination is what it sounds like: we reduce the feature space by eliminating features. In the GDP example above, instead of considering every single variable, we might drop all variables except the three we think will best predict what the U.S.\u2019s gross domestic product will look like. Advantages of feature elimination methods include simplicity and maintaining interpretability of your variables.</p><p>As a disadvantage, though, you gain no information from those variables you\u2019ve dropped. If we only use last year\u2019s GDP, the proportion of the population in manufacturing jobs per the most recent American Community Survey numbers, and unemployment rate to predict this year\u2019s GDP, we\u2019re missing out on whatever the dropped variables could contribute to our model. By eliminating features, we\u2019ve also entirely eliminated any benefits those dropped variables would bring.</p><p>Feature extraction, however, doesn\u2019t run into this problem. Say we have ten independent variables. In feature extraction, we create ten \u201cnew\u201d independent variables, where each \u201cnew\u201d independent variable is a combination of each of the ten \u201cold\u201d independent variables. However, we create these new independent variables in a specific way and order these new variables by how well they predict our dependent variable.</p><p>You might say, \u201cWhere does the dimensionality reduction come into play?\u201d Well, we keep as many of the new independent variables as we want, but we drop the \u201cleast important ones.\u201d Because we ordered the new variables by how well they predict our dependent variable, we know which variable is the most important and least important. But \u2014 and here\u2019s the kicker \u2014 because these new independent variables are combinations of our old ones, we\u2019re still keeping the most valuable parts of our old variables, even when we drop one or more of these \u201cnew\u201d variables!</p><p>Principal component analysis is a technique for feature extraction \u2014 so it combines our input variables in a specific way, then we can drop the \u201cleast important\u201d variables while still retaining the most valuable parts of all of the variables! As an added benefit, each of the \u201cnew\u201d variables after PCA are all independent of one another. This is a benefit because the assumptions of a linear model require our independent variables to be independent of one another. If we decide to fit a linear regression model with these \u201cnew\u201d variables (see \u201cprincipal component regression\u201d below), this assumption will necessarily be satisfied.</p><h1>When should I use PCA?</h1><ol><li>Do you want to reduce the number of variables, but aren\u2019t able to identify variables to completely remove from consideration?</li><li>Do you want to ensure your variables are independent of one another?</li><li>Are you comfortable making your independent variables less interpretable?</li></ol><p>If you answered \u201cyes\u201d to all three questions, then PCA is a good method to use. If you answered \u201cno\u201d to question 3, you should not use PCA.</p><h1>How does PCA work?</h1><p>The section after this discusses why PCA works, but providing a brief summary before jumping into the algorithm may be helpful for context:</p><ul><li>We are going to calculate a matrix that summarizes how our variables all relate to one another.</li><li>We\u2019ll then break this matrix down into two separate components: direction and magnitude. We can then understand the \u201cdirections\u201d of our data and its \u201cmagnitude\u201d (or how \u201cimportant\u201d each direction is). The screenshot below, from the setosa.io applet, displays the two main directions in this data: the \u201cred direction\u201d and the \u201cgreen direction.\u201d In this case, the \u201cred direction\u201d is the more important one. We\u2019ll get into why this is the case later, but given how the dots are arranged, can you see why the \u201cred direction\u201d looks more important than the \u201cgreen direction?\u201d (Hint: What would fitting a line of best fit to this data look like?)</li></ul><a>Source</a><ul><li>We will transform our original data to align with these important directions (which are combinations of our original variables). The screenshot below (again from setosa.io) is the same exact data as above, but transformed so that the x- and y-axes are now the \u201cred direction\u201d and \u201cgreen direction.\u201d What would the line of best fit look like here?</li></ul><a>Source</a><ul><li>While the visual example here is two-dimensional (and thus we have two \u201cdirections\u201d), think about a case where our data has more dimensions. By identifying which \u201cdirections\u201d are most \u201cimportant,\u201d we can compress or project our data into a smaller space by dropping the \u201cdirections\u201d that are the \u201cleast important.\u201d By projecting our data into a smaller space, we\u2019re reducing the dimensionality of our feature space\u2026 but because we\u2019ve transformed our data in these different \u201cdirections,\u201d we\u2019ve made sure to keep all original variables in our model!</li></ul><p>Here, I walk through an algorithm for conducting PCA. I try to avoid being too technical, but it\u2019s impossible to ignore the details here, so my goal is to walk through things as explicitly as possible. A deeper intuition of why the algorithm works is presented in the next section.</p><p>Before starting, you should have tabular data organized with n rows and likely p+1 columns, where one column corresponds to your dependent variable (usually denoted Y) and p columns where each corresponds to an independent variable (the matrix of which is usually denoted X).</p><ol><li>If a Y variable exists and is part of your data, then separate your data into Y and X, as defined above \u2014 we\u2019ll mostly be working with X. (Note: if there exists no column for Y, that\u2019s okay \u2014 skip to the next point!)</li><li>Take the matrix of independent variables X and, for each column, subtract the mean of that column from each entry. (This ensures that each column has a mean of zero.)</li><li>Decide whether or not to standardize. Given the columns of X, are features with higher variance more important than features with lower variance, or is the importance of features independent of the variance? (In this case, importance means how well that feature predicts Y.) If the importance of features is independent of the variance of the features, then divide each observation in a column by that column\u2019s standard deviation. (This, combined with step 2, standardizes each column of X to make sure each column has mean zero and standard deviation 1.) Call the centered (and possibly standardized) matrix Z.</li><li>Take the matrix Z, transpose it, and multiply the transposed matrix by Z. (Writing this out mathematically, we would write this as Z\u1d40Z.) The resulting matrix is the covariance matrix of Z, up to a constant.</li><li>(This is probably the toughest step to follow \u2014 stick with me here.) Calculate the eigenvectors and their corresponding eigenvalues of Z\u1d40Z. This is quite easily done in most computing packages\u2014 in fact, the eigendecomposition of Z\u1d40Z is where we decompose Z\u1d40Z into PDP\u207b\u00b9, where P is the matrix of eigenvectors and D is the diagonal matrix with eigenvalues on the diagonal and values of zero everywhere else. The eigenvalues on the diagonal of D will be associated with the corresponding column in P \u2014 that is, the first element of D is \u03bb\u2081 and the corresponding eigenvector is the first column of P. This holds for all elements in D and their corresponding eigenvectors in P. We will always be able to calculate PDP\u207b\u00b9 in this fashion. (Bonus: for those interested, we can always calculate PDP\u207b\u00b9 in this fashion because Z\u1d40Z is a symmetric, positive semidefinite matrix.)</li><li>Take the eigenvalues \u03bb\u2081, \u03bb\u2082, \u2026, \u03bbp and sort them from largest to smallest. In doing so, sort the eigenvectors in P accordingly. (For example, if \u03bb\u2082 is the largest eigenvalue, then take the second column of P and place it in the first column position.) Depending on the computing package, this may be done automatically. Call this sorted matrix of eigenvectors P*. (The columns of P* should be the same as the columns of P, but perhaps in a different order.) Note that these eigenvectors are independent of one another.</li><li>Calculate Z* = ZP*. This new matrix, Z*, is a centered/standardized version of X but now each observation is a combination of the original variables, where the weights are determined by the eigenvector. As a bonus, because our eigenvectors in P* are independent of one another, each column of Z* is also independent of one another!</li></ol><a>setosa.io</a><p>Note two things in this graphic:</p><ul><li>The two charts show the exact same data, but the right graph reflects the original data transformed so that our axes are now the principal components.</li><li>In both graphs, the principal components are perpendicular to one another. In fact, every principal component will ALWAYS be orthogonal (a.k.a. official math term for perpendicular) to every other principal component. (Don\u2019t believe me? Try to break the applet!)</li></ul><p>Because our principal components are orthogonal to one another, they are statistically linearly independent of one another\u2026 which is why our columns of Z* are linearly independent of one another!</p><p>8. Finally, we need to determine how many features to keep versus how many to drop. There are three common methods to determine this, discussed below and followed by an explicit example:</p><ul><li>Method 1: We arbitrarily select how many dimensions we want to keep. Perhaps I want to visually represent things in two dimensions, so I may only keep two features. This is use-case dependent and there isn\u2019t a hard-and-fast rule for how many features I should pick.</li><li>Method 2: Calculate the proportion of variance explained (briefly explained below) for each feature, pick a threshold, and add features until you hit that threshold. (For example, if you want to explain 80% of the total variability possibly explained by your model, add features with the largest explained proportion of variance until your proportion of variance explained hits or exceeds 80%.)</li><li>Method 3: This is closely related to Method 2. Calculate the proportion of variance explained for each feature, sort features by proportion of variance explained and plot the cumulative proportion of variance explained as you keep more features. (This plot is called a scree plot, shown below.) One can pick how many features to include by identifying the point where adding a new feature has a significant drop in variance explained relative to the previous feature, and choosing features up until that point. (I call this the \u201cfind the elbow\u201d method, as looking at the \u201cbend\u201d or \u201celbow\u201d in the scree plot determines where the biggest drop in proportion of variance explained occurs.)</li></ul><p>Because each eigenvalue is roughly the importance of its corresponding eigenvector, the proportion of variance explained is the sum of the eigenvalues of the features you kept divided by the sum of the eigenvalues of all features.</p><a>Source</a><p>Consider this scree plot for genetic data. (Source: here.) The red line indicates the proportion of variance explained by each feature, which is calculated by taking that principal component\u2019s eigenvalue divided by the sum of all eigenvalues. The proportion of variance explained by including only principal component 1 is \u03bb\u2081/(\u03bb\u2081 + \u03bb\u2082 + \u2026 + \u03bbp), which is about 23%. The proportion of variance explained by including only principal component 2 is \u03bb\u2082/(\u03bb\u2081 + \u03bb\u2082 + \u2026 + \u03bbp), or about 19%.</p><p>The proportion of variance explained by including both principal components 1 and 2 is (\u03bb\u2081 + \u03bb\u2082)/(\u03bb\u2081 + \u03bb\u2082 + \u2026 + \u03bbp), which is about 42%. This is where the yellow line comes in; the yellow line indicates the cumulative proportion of variance explained if you included all principal components up to that point. For example, the yellow dot above PC2 indicates that including principal components 1 and 2 will explain about 42% of the total variance in the model.</p><p>Now let\u2019s go through some examples:</p><ul><li>Method 1: We arbitrarily select a number of principal components to include. Suppose I wanted to keep five principal components in my model. In the genetic data case above, these five principal components explains about 66% of the total variability that would be explained by including all 13 principal components.</li><li>Method 2: Suppose I wanted to include enough principal components to explain 90% of the total variability explained by all 13 principal components. In the genetic data case above, I would include the first 10 principal components and drop the final three variables from Z*.</li><li>Method 3: Here, we want to \u201cfind the elbow.\u201d In the scree plot above, we see there\u2019s a big drop in proportion of variability explained between principal component 2 and principal component 3. In this case, we\u2019d likely include the first two features and drop the remaining features. As you can see, this method is a bit subjective as \u201celbow\u201d doesn\u2019t have a mathematically precise definition and, in this case, we\u2019d include a model that explains only about 42% of the total variability.</li></ul><p>(Note: Some scree plots will have the size of eigenvectors on the Y axis rather than the proportion of variance. This leads to equivalent results, but requires the user to manually calculate the proportion of variance. An example of this can be seen here.)</p><p>Once we\u2019ve dropped the transformed variables we want to drop, we\u2019re done! That\u2019s PCA.</p><h1>But, like, *why* does PCA work?</h1><p>While PCA is a very technical method relying on in-depth linear algebra algorithms, it\u2019s a relatively intuitive method when you think about it.</p><ul><li>First, the covariance matrix Z\u1d40Z is a matrix that contains estimates of how every variable in Z relates to every other variable in Z. Understanding how one variable is associated with another is quite powerful.</li><li>Second, eigenvalues and eigenvectors are important. Eigenvectors represent directions. Think of plotting your data on a multidimensional scatterplot. Then one can think of an individual eigenvector as a particular \u201cdirection\u201d in your scatterplot of data. Eigenvalues represent magnitude, or importance. Bigger eigenvalues correlate with more important directions.</li><li>Finally, we make an assumption that more variability in a particular direction correlates with explaining the behavior of the dependent variable. Lots of variability usually indicates signal, whereas little variability usually indicates noise. Thus, the more variability there is in a particular direction is, theoretically, indicative of something important we want to detect. (The setosa.io PCA applet is a great way to play around with data and convince yourself why it makes sense.)</li></ul><p>Thus, PCA is a method that brings together:</p><ol><li>A measure of how each variable is associated with one another. (Covariance matrix.)</li><li>The directions in which our data are dispersed. (Eigenvectors.)</li><li>The relative importance of these different directions. (Eigenvalues.)</li></ol><p>PCA combines our predictors and allows us to drop the eigenvectors that are relatively unimportant.</p><h1>Are there extensions to PCA?</h1><p>Yes, more than I can address here in a reasonable amount of space. The one I\u2019ve most frequently seen is principal component regression, where we take our untransformed Y and regress it on the subset of Z* that we didn\u2019t drop. (This is where the independence of the columns of Z* comes in; by regressing Y on Z*, we know that the required independence of independent variables will necessarily be satisfied. However, we will need to still check our other assumptions.)</p><p>The other commonly-seen variant I\u2019ve seen is kernel PCA.</p><h1>Conclusion</h1><p>I hope you found this article helpful! Check out some of the resources below for more in-depth discussions of PCA. Let me know what you think, especially if there are suggestions for improvement.</p><p>I\u2019ve been told that a Chinese translation of this article has been made available here. (Thanks, Jakukyo Friel!)</p><p>I want to offer many thanks to my friends Ritika Bhasker, Joseph Nelson, and Corey Smith for their suggestions and edits. You should check Ritika and Joseph out on Medium \u2014 their posts are far more entertaining than mine. (Corey is too focused on not getting his Ph.D. research scooped to have a Medium presence.)</p><p>I also want to give a huge h/t to the setosa.io applet for its visual and intuitive display of PCA.</p><p>Edit: Thanks to Michael Matthews for noticing a typo in the formula for Z* in Step 7 above. He correctly pointed out that Z* = ZP*, not Z\u1d40P*. Thanks also to Chienlung Cheung for noticing another typo in Step 8 above and noted that I had conflated \u201ceigenvector\u201d with \u201ceigenvalue\u201d in one line.</p><h1>Resources You Should Check Out:</h1><p>This is a list of resources I used to compile this PCA article as well as other resources I\u2019ve generally found helpful to understand PCA. If you know of any resources that would be a good inclusion to this list, please leave a comment and I\u2019ll add them.</p><h2>Non-Academic Articles and Resources</h2><ul><li>Setosa.io\u2019s PCA applet. (An applet that allows you to visualize what principal components are and how your data affect the principal components.)</li><li>A semi-academic walkthrough of building blocks to the PCA algorithm and the algorithm itself.</li><li>The top answer to this StackExchange question is, in a word, outstanding.</li><li>A CrossValidated question and answer discussing whether there are parametric assumptions to PCA. (Spoiler alert: PCA itself is a nonparametric method, but regression or hypothesis testing after using PCA might require parametric assumptions.)</li><li>A resource list would hardly be complete without the Wikipedia link, right? (Despite Wikipedia being low-hanging fruit, it has an solid list of additional links and resources at the bottom of the page.)</li></ul><h2>Coding Resources</h2><ul><li>Python Documentation for PCA within the sklearn library. (This link includes examples!)</li><li>PCA Explanation on AnalyticsVidhya. (This link includes Python and R.)</li><li>Implementing PCA in Python with a few cool plots.</li><li>Comparison of methods for implementing PCA in R.</li></ul><h2>Academic Textbooks and Articles</h2><ul><li>An Introduction to Statistical Learning, 6th printing, by James, Witten, Hastie, and Tibshirani. (PCA is covered extensively in chapters 6.3, 6.7, and 10.2. This book assumes knowledge of linear regression but is pretty accessible, all things considered.)</li><li>Notes from Penn State\u2019s STAT 505 (Applied Multivariate Statistical Analysis) Course. (I\u2019ve found Penn State\u2019s online statistics course notes to be incredible, and the PCA section here is particularly helpful.)</li><li>Linear Algebra and Its Applications, 4th edition, by David Lay. (PCA is covered in chapter 7.5.)</li><li>A Tutorial on Principal Components Analysis, by Jonathon Shlens at Google Research.</li><li>A draft chapter on Principal Component Analysis from Cosma Shalizi of Carnegie Mellon University.</li><li>A chapter on data preprocessing from Applied Predictive Modeling includes an introductory discussion of principal component analysis (with visuals!) in Section 3.3. (h/t to Jay Lucas for the recommendation!)</li><li>Elements of Statistical Learning, 10th printing, by Hastie, Tibshirani, and Friedman. (PCA is covered extensively in chapters 3.5, 14.5, and 18.6. This book assumes knowledge of linear regression, matrix algebra, and calculus and is significantly more technical than An Introduction to Statistical Learning, but the two follow a similar structure given the common authors.)</li></ul><h2>Tangential Resources</h2><ul><li>Essence of Linear Algebra YouTube Series (Including one video on Eigenvectors and Eigenvalues that is especially relevant to PCA; h/t to Tim Book for making me aware of this incredible resource.)</li></ul>", "tags": ["Data Science", "Machine Learning", "Statistics", "Programming", "Towards Data Science"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*dq0fAS8ICjaAFgH2EYElAA.jpeg"], "url": "https://medium.com/free-code-camp/200-universities-just-launched-560-free-online-courses-heres-the-full-list-d9dd13600b04", "dateCreated": "2017-10-24T20:40:59.571Z", "datePublished": "2017-10-24T20:40:59.571Z", "dateModified": "2019-03-20T02:07:28.152Z", "headline": "200 universities just launched 560 free online courses. Here\u2019s the full list.", "name": "200 universities just launched 560 free online courses. Here\u2019s the full list.", "description": "If you haven\u2019t heard, universities around the world offering their courses online for free (or at-least partially free). These courses are collectively called as MOOCS or Massive Open Online Courses\u2026", "identifier": "d9dd13600b04", "author": {"@type": "Person", "name": "Dhawal Shah", "url": "https://medium.com/@dhawalhs"}, "creator": ["Dhawal Shah"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/200-universities-just-launched-560-free-online-courses-heres-the-full-list-d9dd13600b04"}, "content": "<h1>200 universities just launched 560 free online courses. Here\u2019s the full list.</h1><a></a><a>Dhawal Shah</a><a>Oct 24, 2017</a><p>If you haven\u2019t heard, universities around the world offering their courses online for free (or at-least partially free). These courses are collectively called as MOOCS or Massive Open Online Courses.</p><p>In the past six years or so, close to 800 universities have created more than 8,000 of these MOOCs. And I\u2019ve been keeping track of these MOOCs the entire time over at Class Central, ever since they rose to prominence.</p><a>Class Central</a><p>In the past three month alone, more than 200 universities have announced 560 such free online courses. I\u2019ve compiled this list below and categorized the courses into the following subjects: Computer Science, Mathematics, Programming, Data Science, Humanities, Social Sciences, Education & Teaching, Health & Medicine, Business, Personal Development, Engineering, Art & Design, and finally Science.</p><p>If you have trouble figuring out how to signup for Coursera courses for free, don\u2019t worry \u2014 I\u2019ve written an article on how to do that, too.</p><p>Here\u2019s the full list of new free online courses. Most of these are completely self-paced, so you can start taking them at your convenience.</p><h1>COMPUTER SCIENCE</h1><ul><li>Neural Networks and Deep Learning from deeplearning.ai (taught by Stanford Prof. Andrew Ng)</li><li>Algorithms: Design and Analysis from Stanford University (old Couresra course, but hosted without any paywalls directly by Stanford)</li><li>The Unix Workbench from Johns Hopkins University</li><li>Machine Learning from Georgia Institute of Technology</li><li>Hacking and Patching from University of Colorado System</li><li>Linux Server Management and Security from University of Colorado System</li><li>Sequence Models from deeplearning.ai</li><li>Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization from deeplearning.ai</li><li>Structuring Machine Learning Projects from deeplearning.ai</li><li>Algorithms: Design and Analysis, Part 2 from Stanford University</li><li>Accessible Gamification for Business from Georgia Institute of Technology</li><li>Deep Learning for Business from Yonsei University</li><li>Introduction to TCP/IP from Yonsei University</li><li>TV Whitespaces for Museums and Archives from San Jose State University</li><li>Capstone: Autonomous Runway Detection for IoT from EIT Digital</li><li>Cryptography and Information Theory from University of Colorado System</li><li>Cryptographic Hash and Integrity Protection from University of Colorado System</li><li>Fundamentals of Network Communication from University of Colorado System</li><li>Packet Switching Networks and Algorithms from University of Colorado System</li><li>Cybersecurity Policy for Water and Electricity Infrastructures from University of Colorado System</li><li>Cybersecurity Policy for Aviation and Internet Infrastructures from University of Colorado System</li><li>Proactive Computer Security from University of Colorado System</li><li>Enterprise System Management and Security from University of Colorado System</li><li>Peer-to-Peer Protocols and Local Area Networks from University of Colorado System</li><li>Introduction to Cybersecurity for Business from University of Colorado System</li><li>Cyber Threats and Attack Vectors from University of Colorado System</li><li>Planning, Auditing and Maintaining Enterprise Systems from University of Colorado System</li><li>Windows Server Management and Security from University of Colorado System</li><li>Detecting and Mitigating Cyber Threats and Attacks from University of Colorado System</li><li>Homeland Security & Cybersecurity Connection \u2014 It\u2019s Not About the Terrorists from University of Colorado System</li><li>Basic Cryptography and Programming with Crypto API from University of Colorado System</li><li>Classical Cryptosystems and Core Concepts from University of Colorado System</li><li>Asymmetric Cryptography and Key Management from University of Colorado System</li><li>Symmetric Cryptography from University of Colorado System</li><li>Secure Networked System with Firewall and IDS from University of Colorado System</li><li>TCP/IP and Advanced Topics from University of Colorado System</li><li>Homeland Security and Cybersecurity Future from University of Colorado System</li><li>Design and Analyze Secure Networked Systems from University of Colorado System</li><li>Sparse Representations in Image Processing: From Theory to Practice from Technion \u2014 Israel Institute of Technology</li><li>Sparse Representations in Signal and Image Processing: Fundamentals from Technion \u2014 Israel Institute of Technology</li><li>Cutting Edge Deep Learning For Coders, Part 2 from fast.ai</li><li>Architettura degli elaboratori from University of Urbino</li><li>Liberating Programming: System Development for Everyone from Weizmann Institute of Science</li><li>Big Data Applications: Machine Learning at Scale from Yandex</li><li>Digital Accessibility as a Business Practice from Ryerson University</li><li>\u0411\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0435 \u0434\u0435\u043b\u043e \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b from Sberbank Corporate University</li><li>Convolutional Neural Networks from deeplearning.ai</li></ul><h1>MATHEMATICS</h1><ul><li>Calculus Applied! from Harvard University</li><li>Differential Equations: 2x2 Systems from Massachusetts Institute of Technology</li><li>Introduction to Probability: Part 1 \u2014 The Fundamentals from Massachusetts Institute of Technology</li><li>Number Theory and Cryptography from University of California, San Diego</li><li>Introduction to Graph Theory from University of California, San Diego</li><li>What is a Proof? from University of California, San Diego</li><li>Solving Delivery Problem from University of California, San Diego</li><li>\u0413\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u044f \u0438 \u0433\u0440\u0443\u043f\u043f\u044b from Moscow Institute of Physics and Technology</li><li>Mathematical Foundations for Cryptography from University of Colorado System</li><li>More Fun with Prime Numbers from Kyoto University</li><li>Precalculus: the Mathematics of Numbers, Functions and Equations from University of Padova</li><li>Einf\u00fchrung in die Graphentheorie from ITMO University</li></ul><h1>PROGRAMMING</h1><ul><li>JavaScript, jQuery, and JSON from University of Michigan</li><li>Building Web Applications in PHP from University of Michigan</li><li>Programming Fundamentals from Duke University</li><li>Server-side Development with NodeJS, Express and MongoDB from The Hong Kong University of Science and Technology</li><li>Object-Oriented Design from University of Alberta</li><li>Design Patterns from University of Alberta</li><li>Database Systems Concepts and Design from Georgia Institute of Technology</li><li>Advanced MATLAB for Scientific Computing from Stanford University</li><li>Building Database Applications in PHP from University of Michigan</li><li>Introduction to Structured Query Language (SQL) from University of Michigan</li><li>Parallel Programming in Java from Rice University</li><li>Python Data Representations from Rice University</li><li>Python Programming Essentials from Rice University</li><li>Concurrent Programming in Java from Rice University</li><li>Distributed Programming in Java from Rice University</li><li>Introduction to Virtual Reality from University of London International Programmes</li><li>Building Interactive 3D Characters and Social VR from University of London International Programmes</li><li>3D Interaction Design in Virtual Reality from University of London International Programmes</li><li>3D Models for Virtual Reality from University of London International Programmes</li><li>Making Your First Virtual Reality Game from University of London International Programmes</li><li>Agile Software Development from University of Minnesota</li><li>Lean Software Development from University of Minnesota</li><li>Engineering Practices for Building Quality Software from University of Minnesota</li><li>Software Development Processes and Methodologies from University of Minnesota</li><li>Globally Distributed Software Engineering from Delft University of Technology</li><li>\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 Python from Moscow Institute of Physics and Technology</li><li>\u041e\u0441\u043d\u043e\u0432\u044b HTML \u0438 CSS from Moscow Institute of Physics and Technology</li><li>\u041e\u0441\u043d\u043e\u0432\u044b \u0434\u0438\u0437\u0430\u0439\u043d\u0430 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 from Moscow Institute of Physics and Technology</li><li>Introducci\u00f3n a la programaci\u00f3n orientada a objetos en Java from Universidad de los Andes</li><li>Software Architecture from University of Alberta</li><li>Service-Oriented Architecture from University of Alberta</li><li>Video Game Design: Teamwork & Collaboration from Rochester Institute of Technology</li><li>Aprende a programar en C desde cero from Universitat Jaume I</li><li>Introducci\u00f3n a la programaci\u00f3n en Python I: Aprendiendo a programar con Python from Pontificia Universidad Cat\u00f3lica de Chile</li><li>\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (Databases) from Saint Petersburg State University</li><li>Fare Apps in classe, ora! from University of Urbino</li><li>Introducci\u00f3n al dise\u00f1o de videojuegos from Universitas Telef\u00f3nica</li><li>Creando Apps. Aprende a programar aplicaciones m\u00f3viles from Universitas Telef\u00f3nica</li><li>Game Design and Development: Video Game Character Design from Abertay University</li><li>Hacking PostgreSQL: Data Access Methods from Ural Federal University</li></ul><h1>DATA SCIENCE</h1><ul><li>Causal Diagrams: Draw Your Assumptions Before Your Conclusions from Harvard University</li><li>Principles, Statistical and Computational Tools for Reproducible Science from Harvard University</li><li>Data Science: R Basics from Harvard University</li><li>Big Data Analytics in Healthcare from Georgia Institute of Technology</li><li>Statistical Modeling and Regression Analysis from Georgia Institute of Technology</li><li>Data Analytics Foundations for Accountancy I from University of Illinois at Urbana-Champaign</li><li>Introduction to Genomic Data Science from University of California, San Diego</li><li>Python Data Analysis from Rice University</li><li>Python Data Visualization from Rice University</li><li>Understanding Your Data: Analytical Tools from University of Virginia</li><li>Big Data and the Environment from University of Reading</li><li>Knowledge Inference and Structure Discovery for Education from University of Texas Arlington</li><li>Predictive Modeling in Learning Analytics from University of Texas Arlington</li><li>Multimodal Learning Analytics from University of Texas Arlington</li><li>Feature Engineering for Improving Learning Environments from University of Texas Arlington</li><li>Cluster Analysis from University of Texas Arlington</li><li>Learning Analytics Fundamentals from University of Texas Arlington</li><li>Social Network Analysis (SNA) from University of Texas Arlington</li><li>Connecting Learning Data to Improve Instructional Design from University of Texas Arlington</li><li>Whole genome sequencing of bacterial genomes \u2014 tools and applications from Technical University of Denmark (DTU)</li><li>Understanding Data from George Mason University</li><li>An\u00e1lisis de Datos Experimentales: Utilidades B\u00e1sicas. from Universidad Polit\u00e9cnica de Madrid</li><li>Advanced Data Mining with Weka from University of Waikato</li><li>\u0422\u0440\u0435\u043d\u0434\u044b \u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 from Novosibirsk State University</li><li>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0434\u0430\u043d\u043d\u044b\u0435 from Novosibirsk State University</li><li>pt010: \u9ad8\u6821\u751f\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u5165\u9580 from Shiga University</li><li>Big Data Applications: Real-Time Streaming from Yandex</li><li>Big Data Analysis: Hive, Spark SQL, DataFrames and GraphFrames from Yandex</li><li>Big Data Essentials: HDFS, MapReduce and Spark RDD from Yandex</li></ul><h1>HUMANITIES</h1><ul><li>Religion, Conflict and Peace from Harvard University</li><li>Masterpieces of World Literature: The Ancient World from Harvard University</li><li>Masterpieces of World Literature: Fictions of the Modern World from Harvard University</li><li>China Humanities: The Individual in Chinese Culture from Harvard University</li><li>Sports and the University from Stanford University</li><li>Supporting English Learners: Resources for Leaders from Stanford University</li><li>Wonders of Ancient Egypt from University of Pennsylvania</li><li>Race and Cultural Diversity in American Life and History from University of Illinois at Urbana-Champaign</li><li>Studying in Italian \u2014 Law and Economics: a MOVE-ME Project Course from The Open University</li><li>Studying in Italian \u2014 Science and Mathematics: a MOVE-ME Project Course from The Open University</li><li>Faith and Finance from Boston University</li><li>Philosophy, Science and Religion: Philosophy and Religion from University of Edinburgh</li><li>The Birmingham Qur\u2019an: Its Journey from the Islamic Heartlands from University of Birmingham</li><li>Fronti\u00e8res en tous genres from University of Geneva</li><li>Incipit. Curso b\u00e1sico de lengua y cultura latinas from Universitat Polit\u00e8cnica de Val\u00e8ncia</li><li>Arab-Islamic History: From Tribes to Empires from Tel Aviv University</li><li>El Valle de los Reyes from Universitat Aut\u00f2noma de Barcelona (Autonomous University of Barcelona)</li><li>Knowledge Exchange: Using, Protecting and Monetizing Ideas with Third Parties from Leiden University</li><li>ITA101 \u2014 Benvenuti in Italia! Orientarsi con l\u2019italiano from Politecnico di Milano</li><li>Re-imaging God in Korean Context from Yonsei University</li><li>Mitos cl\u00e1sicos y mundo actual from Universidad Carlos iii de Madrid</li><li>Philosophy for Children and P.E.A.C.E. from University of Naples Federico II</li><li>La Letteratura latina in et\u00e0 post-augustea from University of Naples Federico II</li><li>Dante tra poesia e scienza from University of Naples Federico II</li><li>L\u2019Italiano nel mondo from University of Naples Federico II</li><li>La costruzione dell\u2019Italia from University of Naples Federico II</li><li>L\u2019innovazione sociale per il patrimonio culturale from University of Naples Federico II</li><li>Comprendere la filosofia from University of Naples Federico II</li><li>Business Start\u2013Up: From Idea to Launch from George Washington University</li><li>Exercise Physiology \u2014 The Body In Motion from University of Exeter</li><li>Safeguarding Athletes from Harassment and Abuse from McMaster University</li><li>Writing your World: Finding yourself in the academic space from University of Cape Town</li><li>Power of the Pen: Identities and Social Issues in Fiction and Nonfiction from University of Iowa</li><li>Power of the Pen: Identities and Social Issues in Poetry and Plays from University of Iowa</li><li>Sports Nutrition: Eat to Compete from Federal University of the State of Rio de Janeiro</li><li>The Art and Science of Coaching from University of Pretoria</li><li>Russian History: from Lenin to Putin from University of California, Santa Cruz</li><li>Why Research Matters from Deakin University</li><li>Humphry Davy: Laughing Gas, Literature, and the Lamp from Lancaster University</li><li>Paesaggi di Roma Antica. Archeologia e storia del Palatino. from Sapienza University of Rome</li><li>(K-12) Teaching Math to English Language Learners from Iowa State University</li><li>The Spain of Don Quixote from Universidad Aut\u00f3noma de Madrid</li><li>Words Spun Out of Images: Visual and Literary Culture in Nineteenth Century Japan from The University of Tokyo</li><li>Logic and Paradoxes from Universidad de Navarra</li><li>New Zealand Landscape as Culture: Islands (Ng\u0101 Motu) from Victoria University of Wellington</li><li>\u041a\u0438\u0442\u0430\u0439\u0441\u043a\u0438\u0439 \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 (Chinese for beginners) from Saint Petersburg State University</li><li>A History of Violence: From the Middle Ages to Modern Times from University of Newcastle</li><li>Digital Culture and Writing from University of Burgundy</li><li>Livres enlumin\u00e9s \u00e0 la cour des Sforza from University of Pavia</li><li>ga080: memento mori-\u6b7b\u3092\u60f3\u3048- from Tohoku University</li><li>\ub2e4\ubb38\ud654 \uc0ac\ud68c\uc640 \uacf5\uc874\uc758 \uc778\ubb38\ud559 from Inha University</li><li>Beer Matters from University of Wisconsin \u2014 Whitewater</li><li>pt015: \u98df\u6587\u5316\u306e\u672c\u6765\u3068\u5c06\u6765 from Kokushikan University</li><li>Visi\u00f3n cristiana de la persona humana from Pontifical Catholic University of Valpara\u00edso</li><li>Spanish Across the Americas: Beginners from Universidad Nacional de C\u00f3rdoba</li><li>Comunicaci\u00f3n cultural en Espa\u00f1a from Antonio de Nebrija University</li><li>Fantastic Fiction and Where to Find It from Linnaeus University</li><li>The Bible in Light of the Ancient Near East from Bar-Ilan University</li><li>Introduction to Kabbalah from Ben-Gurion University of the Negev</li></ul><h1>SOCIAL SCIENCES</h1><ul><li>Essentials of Program Strategy and Evaluation from Stanford University</li><li>The Threat of Nuclear Terrorism from Stanford University</li><li>Love as a Force for Social Justice from Stanford University</li><li>Democracy and Development: Perspectives from Africa from Massachusetts Institute of Technology</li><li>Network Dynamics of Social Behavior from University of Pennsylvania</li><li>Public Library Marketing and Public Relations from University of Michigan</li><li>Fake News, Facts, and Alternative Facts from University of Michigan</li><li>Grant Writing and Crowdfunding for Public Libraries from University of Michigan</li><li>The Internet and You from University of Michigan</li><li>Privacy, Reputation, and Identity in a Digital Age from University of Michigan</li><li>Strategic Planning for Public Libraries from University of Michigan</li><li>Infrastructure Management for Public Libraries from University of Michigan</li><li>Introduction to Psychology as a Science 2 \u2014 Fundamentals of the Mind and Behavior from Georgia Institute of Technology</li><li>Introduction to Psychology as a Science 3 \u2014 Normal and Abnormal Behavior from Georgia Institute of Technology</li><li>Introduction to Psychology as a Science 1 \u2014 Methodological and Biological Foundations from Georgia Institute of Technology</li><li>Everyday Parenting: The ABCs of Child Rearing from Yale University</li><li>Risk and Return and the Weighted Average Cost of Capital from Columbia University</li><li>Federal Taxation I: Individuals, Employees, and Sole Proprietors from University of Illinois at Urbana-Champaign</li><li>Federal Taxation II: Property Transactions of Business Owners and Shareholders from University of Illinois at Urbana-Champaign</li><li>The Science of Parenting from University of California, San Diego</li><li>Introduction to Social Research Methods from University of Edinburgh</li><li>\u7535\u5b50\u5546\u52a1 E-Commerce from Peking University</li><li>Microeconomic Principles: Decision-making Under Scarcity from Arizona State University</li><li>Stalin and Stalinism in Russian History from Higher School of Economics</li><li>Justice, Mercy and Mass Incarceration from Vanderbilt University</li><li>International Affairs: Global Governance from University of Geneva</li><li>Genre : quels enjeux ? Violences, globalisation, biom\u00e9decine, sexualit\u00e9s. from University of Geneva</li><li>El desarrollo de la relaci\u00f3n laboral: Derechos y Obligaciones from Universitat Polit\u00e8cnica de Val\u00e8ncia</li><li>Evaluaci\u00f3n de peligros y riesgos por fen\u00f3menos naturales from Universidad Nacional Aut\u00f3noma de M\u00e9xico</li><li>\u7d93\u6fdf\u5b78\u6982\u8ad6\uff1a\u8a98\u56e0\u8207\u5e02\u5834\uff08Introduction to Economics: Incentive and Markets\uff09 from National Taiwan University</li><li>Trade, Immigration and Exchange Rates in a Globalized World from IE Business School</li><li>Genius. Talent. Golden Mediocrity from Tsinghua University</li><li>Political Economy of Institutions and Development from Leiden University</li><li>After the Arab Spring \u2014 Democratic Aspirations and State Failure from University of Copenhagen</li><li>ED101: Embracing Diversity from Politecnico di Milano</li><li>SustArch101 \u2014 Sustainable building design for tropical climates: principles and guidelines for EAC from Politecnico di Milano</li><li>La povert\u00e0 nella societ\u00e0 contemporanea from University of Naples Federico II</li><li>Psicologia dell\u2019apprendimento from University of Naples Federico II</li><li>Il potere dei sondaggi from University of Naples Federico II</li><li>Long-term Financial Management from University System of Maryland</li><li>Flood Risk Management from RWTH Aachen University</li><li>Counseling and Psychotherapy Theory from Seoul National University</li><li>Global Prosperity Beyond GDP from University College London</li><li>Principios de Microeconom\u00eda from George Mason University</li><li>Responsive Cities from ETH Zurich</li><li>Understanding the General Data Protection Regulation from University of Groningen</li><li>Water for the People: Gender, Human Rights, and Diplomacy from Colorado State University Online</li><li>Human Population Dynamics: Births, Deaths and Migrations from McGill University</li><li>Life of the law from Universidad de Navarra</li><li>\u0158\u00edmsk\u00e9 pr\u00e1vo from Palack\u00fd University, Olomouc</li><li>Les transitions \u00e9nerg\u00e9tique-\u00e9cologiques dans les pays du Sud from \u00c9cole normale sup\u00e9rieure</li><li>Understanding child development: from synapse to society from Utrecht University</li><li>Exploring Economics: Will the Next Generation Be Worse Off? from Griffith University</li><li>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0433\u0435\u043d\u0434\u0435\u0440\u043d\u0443\u044e \u0441\u043e\u0446\u0438\u043e\u043b\u043e\u0433\u0438\u044e (Introduction to the Sociology of Gender) from Saint Petersburg State University</li><li>\u041f\u0441\u0438\u0445\u043e\u043b\u0438\u043d\u0433\u0432\u0438\u0441\u0442\u0438\u043a\u0430 (Psycholinguistics) from Saint Petersburg State University</li><li>\u041f\u0440\u0430\u0432\u043e\u0432\u043e\u0435 \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0439 \u0432 \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435. \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0430\u044f \u043f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u0430 from Saint Petersburg State University</li><li>Global Studies: the End of Globalization? from Grenoble School of Management</li><li>\u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f \u0441\u043e\u0437\u043d\u0430\u043d\u0438\u044f (Psychology of consciousness) from Saint Petersburg State University</li><li>Understanding Violence Against Women: Myths and Realities from University of Strathclyde</li><li>Theory of Change for Development from University of the Witwatersrand</li><li>\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0433\u0440\u0443\u043f\u043f from Novosibirsk State University</li><li>\u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0435\u0439 from Novosibirsk State University</li><li>Ser competente digital, para vivir y convivir en la sociedad en red from Universitat Oberta de Catalunya</li><li>Common Sense Economics For Life (Part 3) from Gus A. Stavros Center</li><li>Beyond the Ballot: Women\u2019s Rights and Suffrage from 1866 to Today from Royal Holloway, University of London</li><li>Common Sense Economics For Life (Part 1) from Gus A. Stavros Center</li><li>Common Sense Economics For Life (Part 2) from Gus A. Stavros Center</li><li>Common Sense Economics For Life (Part 4) from Gus A. Stavros Center</li><li>Governance of Disaster Risk from University of Extremadura</li><li>Gesti\u00f3n del agua: Introducci\u00f3n al tratamiento de aguas residuales/ Water management: Introduction to the Treatment of Urban Sewage from University of Extremadura</li><li>Ser ciudadano hoy from Pontifical Catholic University of Valpara\u00edso</li><li>ga077: \u90fd\u5e02\u306e\u707d\u5bb3\u30ea\u30b9\u30af\u3068\u305d\u306e\u5099\u3048 from Osaka City University</li><li>Green transport. Veh\u00edculos verdes, conectados y automatizados from Antonio de Nebrija University</li><li>Digital Culture/Clutter: Life and Death on the Net from University of Haifa</li></ul><h1>EDUCATION & TEACHING</h1><ul><li>Integrating Language Development and Content Learning in Math: Focus on Reasoning from Stanford Graduate School of Education</li><li>Constructive Classroom Conversations: Improving Student-to-Student Interactions from Stanford Graduate School of Education</li><li>Introduction to Online and Blended Teaching from University of Pennsylvania</li><li>CSET Math Subtest II Exam Preparation Resource from University of California, Irvine</li><li>CSET Math Subtest III Exam Preparation Resource from University of California, Irvine</li><li>CSET Science Subtest I Exam Preparation Resource from University of California, Irvine</li><li>University Studies for Student Veterans from Columbia University</li><li>Making Teacher Education Relevant for 21st Century Africa from The Open University</li><li>AP\u00ae Psychology \u2014 Course 0: Introduction from The University of British Columbia</li><li>Blended Learning Essentials: Developing Digital Skills from University of Leeds</li><li>Sistemas de informaci\u00f3n y ordenadores, Parte 4: Programaci\u00f3n from Universitat Polit\u00e8cnica de Val\u00e8ncia</li><li>DTransform101 \u2014 D-TRANSFORM: University Strategies in the Digital Age from Politecnico di Milano</li><li>Educar para los nuevos medios: competencia medi\u00e1tica para docentes from Universidad de Cantabria</li><li>Teaching Statistics Through Inferential Reasoning from Friday Institute</li><li>Teaching Foundational Reading Skills from Friday Institute</li><li>Researching learners\u2019 experiences and uses of technology using action research from Oxford Brookes University</li><li>(K-12/HE) Implementing UDL on Canvas from University of Tennessee</li><li>Tinkering Fundamentals: Circuits from Exploratorium</li><li>Tinkering Fundamentals: Motion and Mechanisms from Exploratorium</li><li>Algoritmi quotidiani from University of Urbino</li><li>Making Apps in Your Classroom, Now! from University of Urbino</li><li>Coding in Their Classrooms, Now! from University of Urbino</li><li>Algorithms in Your Classroom, Now! from University of Urbino</li><li>College Readiness (FL17) \u2014 Reading, Writing and Math from Broward College</li><li>Criterios para la Gesti\u00f3n y el Aseguramiento de la Calidad en la Educaci\u00f3n Superior from Universidad de Chile</li><li>Teaching Online: Reflections on Practice from Kirkwood Community College</li><li>How to survive the first weeks at ATGM (Avans) from Avans University of Applied Sciences</li><li>Hoe overleef ik de eerste weken bij de ATGM (Avans) from Avans University of Applied Sciences</li><li>Gamification in educazione: nuove strade per apprendere! from University of Florence</li><li>El profesor del siglo XXI from Pontifical Catholic University of Valpara\u00edso</li><li>TIC en la docencia from Universidad CES</li></ul><h1>HEALTH & MEDICINE</h1><ul><li>Interprofessional Education for 21st Century Care from Stanford University</li><li>Staying Fit from Stanford University</li><li>The Oral Cavity: Portal to Health and Disease from University of Pennsylvania</li><li>Epidemiology in Public Health Practice from Johns Hopkins University</li><li>Diagnosing Health Behaviors for Global Health Programs from Johns Hopkins University</li><li>Patient Safety and Quality Improvement: Developing a Systems View (Patient Safety I) from Johns Hopkins University</li><li>The People, Power, and Pride of Public Health from Johns Hopkins University</li><li>Sleep Deprivation: Habits, Solutions, and Strategies from University of Michigan</li><li>\u5927\u5b66\u751f\u745c\u4f3d from Peking University</li><li>The Science of Health Care Delivery from Arizona State University</li><li>Introduction to Public Health Engineering in Humanitarian Contexts from \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne</li><li>Causes of Human Disease: Transmitting and Fighting Infection from University of Leeds</li><li>Causes of Human Disease: Exploring Cancer and Genetic Disease from University of Leeds</li><li>Causes of Human Disease: Nutrition and Environment from University of Leeds</li><li>Causes of Human Disease: Understanding Causes of Disease from University of Leeds</li><li>Causes of Human Disease: Understanding Cardiovascular Disease from University of Leeds</li><li>Fixing Healthcare Delivery 2.0: Advanced Lean from University of Florida</li><li>Health Concepts in Chinese Medicine from The Hong Kong University of Science and Technology</li><li>Creating Moments of Joy for People with Alzheimer\u2019s from Purdue University</li><li>Understanding Depression and Low Mood in Young People from University of Reading</li><li>Clinical Biosafety Awareness for Public Health Professionals from Emory University</li><li>Intermediate Level Biosafety Training for Public Health Professionals from Emory University</li><li>Schizophrenia from Wesleyan University</li><li>\u98df\u54c1\u5b89\u5168\u8207\u98a8\u96aa\u5206\u6790\uff08Food Safety\uff06Risk Analysis\uff09 from National Taiwan University</li><li>Viruses & How to Beat Them: Cells, Immunity, Vaccines from Tel Aviv University</li><li>End-of-Life Care for People with Dementia from University of East Anglia</li><li>The Role of Personal Assistants in Disability Support from University of East Anglia</li><li>Managing Change in a Healthcare Environment from University of East Anglia</li><li>Clinical Supervision: Teaching and Facilitating Learning from University of East Anglia</li><li>Using Personalized Medicine and Pharmacogenetics from University of East Anglia</li><li>Using Infection Control to Combat Antimicrobial Resistance from University of East Anglia</li><li>Youth Mental Health: Helping Young People with Anxiety from University of East Anglia</li><li>Clinical Supervision: Assessing and Providing Feedback from University of East Anglia</li><li>Introduction to Translational Science from University of Rochester</li><li>Introduction to Health Technology Assessment from University of Glasgow</li><li>Fundamentos de la Seguridad del Paciente from Universidad de Cantabria</li><li>El aula inclusiva hoy en d\u00eda. C\u00f3mo afrontar el Trastorno del Espectro Autista y las Altas Capacidades from Universitat Jaume I</li><li>Young People and their Mental Health from University of Cambridge</li><li>Jongeren en hun psychische gezondheid from University of Groningen</li><li>Everyday Chinese Medicine from The Chinese University of Hong Kong</li><li>Positive Psychiatry and Mental Health from The University of Sydney</li><li>\u53e3\u8154\u79cd\u690d\u5b66 \uff08Implant Dentistry\uff09 from The University of Hong Kong</li><li>Life with Diabetes from Curtin University</li><li>Control and Elimination of Visceral Leishmaniasis from London School of Hygiene & Tropical Medicine</li><li>The Lancet Maternal Health Series: Global Research and Evidence from London School of Hygiene & Tropical Medicine</li><li>Promoci\u00f3n del envejecimiento activo from Universidad Aut\u00f3noma de Madrid</li><li>Curso SMART-ASD: Conectando Tecnolog\u00edas con Personas con Autismo from University of Bath</li><li>ZEK\u0130-OT\u0130ST\u0130K: Otizmli Bireyleri Teknoloji Kaynaklar\u0131yla E\u015fle\u015ftirmek from University of Bath</li><li>Valencian SMART-ASD: Recursos Tecnol\u00f2gics Adequats per a les Persones amb Autisme from University of Bath</li><li>Falling Down: Problematic Substance Use in Later Life from Middlesex University London</li><li>Training healthcare teams in intercultural communication and patient safety from Middlesex University London</li><li>Transitioning to Value-Based Care from The College of St. Scholastica</li><li>Vona du Toit Model of Creative Ability from University of Northampton</li><li>Unravelling solutions for Future Food problems from Utrecht University</li><li>Maternity Care: Building Relationships Really Does Save Lives from Griffith University</li><li>Digital Health for Cancer Management: Smart Health Technologies in Complex Diseases from Tapei Medical University</li></ul><h1>ENGINEERING</h1><ul><li>Structural Materials: Selection and Economics from Massachusetts Institute of Technology</li><li>Mechanics of Deformable Structures: Part 1 from Massachusetts Institute of Technology</li><li>Linear Circuits 2: AC Analysis from Georgia Institute of Technology</li><li>Nanotechnology: A Maker\u2019s Course from Duke University</li><li>Syst\u00e8mes d\u2019Information G\u00e9ographique \u2014 Partie 1 from \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne</li><li>Syst\u00e8mes d\u2019Information G\u00e9ographique \u2014 Partie 2 from \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne</li><li>Enseignes et afficheurs \u00e0 LED from \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne</li><li>Electrical Engineering: Sensing, Powering and Controlling from University of Birmingham</li><li>Introduction to FPGA Design for Embedded Systems from University of Colorado Boulder</li><li>Control autom\u00e1tico: La tecnolog\u00eda invisible from Universidad Nacional Aut\u00f3noma de M\u00e9xico</li><li>Technical Report Writing for Engineers from The University of Sheffield</li><li>Disegno tecnico industriale from University of Naples Federico II</li><li>Industrial Biotechnology from University of Manchester</li><li>Introduction to solar cells from Technical University of Denmark (DTU)</li><li>Environmental Management & Ethics from Technical University of Denmark (DTU)</li><li>Introducci\u00f3n a la ciencia de BIOmateriales from Universidad Polit\u00e9cnica de Madrid</li><li>Software-Defined Radio 101 with RTL-SDR from Universidad Polit\u00e9cnica de Madrid</li><li>Explorando la Energ\u00eda Sustentable from Pontificia Universidad Cat\u00f3lica de Chile</li><li>Construcci\u00f3n de Estructuras de Madera de modo tradicional from Universidad Polit\u00e9cnica de Madrid</li><li>Introducci\u00f3n al Audio Digital from Universidad Polit\u00e9cnica de Madrid</li><li>Curves in Engineering and Architecture/ Las Curvas en Ingenier\u00eda y Arquitectura from Universidad Polit\u00e9cnica de Madrid</li><li>High Performance Finite Element Modeling from KTH Royal Institute of Technology</li><li>Introduction to the Theory of Distributions and Applications from University of Pavia</li><li>Fundamentos para la calificaci\u00f3n de procedimientos de soldadura y soldadores from Pontificia Universidad Cat\u00f3lica del Per\u00fa</li></ul><h1>ART & DESIGN</h1><ul><li>A Global History of Architecture from Massachusetts Institute of Technology</li><li>\u6d6a\u6f2b\u4e3b\u4e49\u65f6\u4ee3\u7684\u6b27\u6d32\u97f3\u4e50 European Music in Romantic Period from Peking University</li><li>Design Thinking for the Greater Good: Innovation in the Social Sector from University of Virginia</li><li>Getting Started with Agile and Design Thinking from University of Virginia</li><li>Introdu\u00e7\u00e3o \u00e0 Guitarra from Berklee College of Music</li><li>Improvisa\u00e7\u00e3o no Jazz from Berklee College of Music</li><li>Designing Synthesizer Sounds from Berklee College of Music</li><li>Produ\u00e7\u00e3o final do m\u00fasico moderno from Berklee College of Music</li><li>Improvisaci\u00f3n de jazz from Berklee College of Music</li><li>Navigate the Music Industry as an Independent Artist from Berklee College of Music</li><li>Desenvolvendo sua musicalidade from Berklee College of Music</li><li>Composi\u00e7\u00e3o: Escrevendo a letra from Berklee College of Music</li><li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 from Moscow Institute of Physics and Technology</li><li>\u041f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 from Moscow Institute of Physics and Technology</li><li>Introducci\u00f3n a la Producci\u00f3n Audiovisual from Universidad Nacional Aut\u00f3noma de M\u00e9xico</li><li>L\u00e1nzate a la Innovaci\u00f3n con Design Thinking from The Pontificia Universidad Javeriana</li><li>Fundamentals of Communication Acoustics from RWTH Aachen University</li><li>Applications in Communication Acoustics from RWTH Aachen University</li><li>Fashion as Design from The Museum of Modern Art</li><li>Inside Opera: Why Does It Matter? from King\u2019s College London</li><li>Dibujo en el aula: ense\u00f1ar un lenguaje m\u00e1gico from Universidad de Navarra</li><li>\u0414\u0438\u0437\u0430\u0439\u043d-\u043c\u0435\u0442\u043e\u0434\u043e\u043b\u043e\u0433\u0438\u044f: \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0434\u043e\u0445\u043d\u043e\u0432\u0435\u043d\u0438\u0435\u043c (Design-methodology. Inspiration management) from Saint Petersburg State University</li><li>Latin American Music: Translating Cultural Sensibilities from Massey University</li><li>Learn Jazz Piano: I. Begin with the Blues from Goldsmiths University of London</li><li>Kreativn\u00ed pr\u00e1ce s informacemi from Nostis</li><li>New Media from Antonio de Nebrija University</li></ul><h1>BUSINESS</h1><ul><li>Influence from University of Pennsylvania</li><li>Corporate Social Responsibility (CSR): A Strategic Approach from University of Pennsylvania</li><li>Accounting Analysis II: Measurement and Disclosure of Liabilities from University of Illinois at Urbana-Champaign</li><li>Personnel Management for Public Libraries from University of Michigan</li><li>Valuing Companies from University of Michigan</li><li>Budgeting and Finance for Public Libraries from University of Michigan</li><li>Accounting for Decision Making from University of Michigan</li><li>Strategic Business Management \u2014 Macroeconomics from University of California, Irvine</li><li>Strategic Business Management \u2014 Microeconomics from University of California, Irvine</li><li>Introduction to Business for Analytics from Georgia Institute of Technology</li><li>The Free Cash Flow Method for Firm Valuation from Columbia University</li><li>Introduction to Corporate Finance from Columbia University</li><li>Global Impact: Cultural Psychology from University of Illinois at Urbana-Champaign</li><li>Accounting Analysis I: Measurement and Disclosure of Assets from University of Illinois at Urbana-Champaign</li><li>Marketing in an Analog World from University of Illinois at Urbana-Champaign</li><li>Entrepreneurship II: Practices and Approaches from University of Illinois at Urbana-Champaign</li><li>Accounting Analysis II: Accounting for Liabilities and Equity from University of Illinois at Urbana-Champaign</li><li>Entrepreneurship I: Principles and Concepts from University of Illinois at Urbana-Champaign</li><li>Formal Financial Accounting from University of Illinois at Urbana-Champaign</li><li>Global Impact: Business Ethics from University of Illinois at Urbana-Champaign</li><li>Managing Public Money from The Open University</li><li>Modern Empowerment in the Workplace from The Open University</li><li>Business Foundations from The University of British Columbia</li><li>Organizational Behaviour from The University of British Columbia</li><li>Introduction to Accounting from The University of British Columbia</li><li>Ethical Leadership Through Giving Voice to Values from University of Virginia</li><li>Which markets to play in? A tool for entrepreneurs and innovators from \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne</li><li>Qualitative Research from University of California, Davis</li><li>Research Report: Delivering Insights from University of California, Davis</li><li>Research Proposal: Initiating Research from University of California, Davis</li><li>Quantitative Research from University of California, Davis</li><li>Research Report: Delivering Insights from University of California, Davis</li><li>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u0430\u044f \u0440\u0435\u043a\u043b\u0430\u043c\u0430. Google AdWords from Higher School of Economics</li><li>\u041c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u0432 digital \u0441\u0440\u0435\u0434\u0435 (Digital marketing strategy) from Higher School of Economics</li><li>\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0431\u0430\u0437\u043e\u0439 \u0438 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433 from Higher School of Economics</li><li>Leading High-Performing Teams from University of Queensland</li><li>Leading the Organization from University of Queensland</li><li>Becoming an Effective Leader from University of Queensland</li><li>Tourism and Travel Management from University of Queensland</li><li>Leading in a Complex Environment from University of Queensland</li><li>Electric Cars: Technology, Business, and Policy from Delft University of Technology</li><li>Entrepreneurship for Global Challenges in Emerging Markets from Delft University of Technology</li><li>Leadership In Practice from The University of Oklahoma</li><li>\u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043f\u0440\u0435\u0434\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e from Moscow Institute of Physics and Technology</li><li>\u0411\u0438\u0437\u043d\u0435\u0441-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f from Moscow Institute of Physics and Technology</li><li>Financial Accounting and Analysis from Indian Institute of Management Bangalore</li><li>\u5546\u7ba1\u7814\u7a76\u4e2d\u7684\u8cfd\u5c40\u5206\u6790\uff1a\u901a\u8def\u9078\u64c7\u3001\u5408\u7d04\u5236\u5b9a\u8207\u5171\u4eab\u7d93\u6fdf from National Taiwan University</li><li>Legal Tech & Startups from IE Business School</li><li>From Brand to Image: Creating High Impact Campaigns That Tell Brand Stories from IE Business School</li><li>Entrepreneurship Strategy: From Ideation to Exit from HEC Paris</li><li>Leadership Coaching through Turbulent Times: Playing with eFIRE from Queensland University of Technology</li><li>FinPerTutti101 \u2014 Finanza per tutti from Politecnico di Milano</li><li>STR101: Strategy from Politecnico di Milano</li><li>SFCW101 \u2014 Share Food, Cut Waste from Politecnico di Milano</li><li>Clinical Supervision: Planning Your Professional Development from University of East Anglia</li><li>Financial Management in Organizations from University System of Maryland</li><li>Financial Decision Making from University System of Maryland</li><li>Financial Accounting for Corporations from University System of Maryland</li><li>Sustainable Business: Big Issues, Big Changes from University of Colorado System</li><li>First Steps in Making the Business Case for Sustainability from University of Colorado System</li><li>More on Change and Sustainability from University of Colorado System</li><li>Six Sigma Tools for Analyze from University System of Georgia</li><li>Six Sigma Advanced Define and Measure Phases from University System of Georgia</li><li>Six Sigma Tools for Define and Measure from University System of Georgia</li><li>Six Sigma Principles from University System of Georgia</li><li>Six Sigma and the Organization (Advanced) from University System of Georgia</li><li>Six Sigma Advanced Analyze Phase from University System of Georgia</li><li>Six Sigma Advanced Improve and Control Phases from University System of Georgia</li><li>Six Sigma Tools for Improve and Control from University System of Georgia</li><li>C\u00e1lculo y compensaci\u00f3n de la huella de carbono en organizaciones from Universitat Jaume I</li><li>Decent Work in Global Supply Chains from Pennsylvania State University</li><li>Aviation is Your Future from Embry-Riddle Aeronautical University</li><li>Digital Competition in Financial Services from Copenhagen Business School</li><li>FinTech and the Transformation in Financial Services from Copenhagen Business School</li><li>Innovation Strategy: Developing Your Fintech strategy from Copenhagen Business School</li><li>Industry 4.0: How to Revolutionize your Business from Hong Kong Polytechnic University</li><li>The Economics of Agro-Food Value Chains from Technische Universit\u00e4t M\u00fcnchen (Technical University of Munich)</li><li>Principles of Project Management from The College of St. Scholastica</li><li>Liderando la transformaci\u00f3n digital en las organizaciones from Universidad Polit\u00e9cnica de Madrid</li><li>Leadership and Management from University of Northampton</li><li>FRUTURA Technologies: Quality of Fruits (Tecnolog\u00edas FRUTURA: Calidad de frutas) from Universidad Polit\u00e9cnica de Madrid</li><li>Coaching in the Knowledge Era from Deakin University</li><li>\u041f\u0441\u0438\u0445\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u043e\u043c (Psychotechnologies of personnel management) from Saint Petersburg State University</li><li>Innovation Strategy: Challenging the Usual Suspects from Universit\u00e9 libre de Bruxelles</li><li>Governance in Co-operatives from University of Saskatchewan</li><li>Leading and Managing People-Centred Change from Durham University</li><li>Managing Innovation from LUISS</li><li>\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 from St. Petersburg State Polytechnic University</li><li>Budgeting essentials and development from Funda\u00e7\u00e3o Instituto de Administra\u00e7\u00e3o</li><li>Introduction to Interfaith Leadership from Dominican University</li><li>Asset Pricing from University of Chicago Booth School of Business</li><li>Big data Marketing from Universidad Aut\u00f3noma de Occidente</li><li>P2P en el sector tur\u00edstico from Antonio de Nebrija University</li><li>Fintech. La banca del futuro from Antonio de Nebrija University</li><li>Green Marketing from Heliopolis University</li><li>\u041e\u0441\u043d\u043e\u0432\u044b \u0440\u0438\u0441\u043a-\u043c\u0435\u043d\u0435\u0434\u0436\u043c\u0435\u043d\u0442\u0430 \u0432 \u0411\u0430\u043d\u043a\u0435 from Sberbank Corporate University</li></ul><h1>PERSONAL DEVELOPMENT</h1><ul><li>International Travel Preparation, Safety, & Wellness from Johns Hopkins University</li><li>Leveraging the Power of Professional Communities from University of California, San Diego</li><li>Converting Challenges into Opportunities from University of California, San Diego</li><li>Achieving Your Optimal Performance from University of California, San Diego</li><li>Business Communications from The University of British Columbia</li><li>Media ethics & governance from University of Amsterdam</li><li>\u0420\u0435\u0447\u0435\u0432\u043e\u0439 \u044d\u0442\u0438\u043a\u0435\u0442: \u0432\u0435\u0436\u043b\u0438\u0432\u043e\u0441\u0442\u044c \u0438 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 from Higher School of Economics</li><li>Psychology of Personal Growth from The Hong Kong University of Science and Technology</li><li>The Dynamics of Group Communication from University of Colorado Boulder</li><li>Mediation and Conflict Resolution from ESSEC Business School</li><li>Evidence-Based Business Communication from Australian National University</li><li>Negoziazione e comunicazione efficace from University of Naples Federico II</li><li>Critical Thinking & Problem-Solving from Rochester Institute of Technology</li><li>Visual Presentation from Rochester Institute of Technology</li><li>Storytelling in the Workplace from Rochester Institute of Technology</li><li>Maintaining a Mindful Life from Monash University</li><li>Conflict Management for College Students from Colorado State University Online</li><li>Professional Resilience: Building Skills to Thrive from Deakin University</li><li>Mi Primer Empleo (MPE) from Universidad de Chile</li><li>The Way Forward \u2014 Easing the Transition Life Skills from Lakeland College</li><li>Introducci\u00f3n a la gamificaci\u00f3n a trav\u00e9s de casos pr\u00e1cticos from Universitat Oberta de Catalunya</li><li>Trabajar para ser feliz from Universidad Austral</li><li>Improve Your Research Skills from Vrije Universiteit Brussel</li><li>Excel aplicado a los negocios (Nivel Avanzado) from Universidad Austral</li><li>Basiscursus informatievaardigheden from Vrije Universiteit Brussel</li><li>Negociaci\u00f3n y resoluci\u00f3n de conflictos from Pontifical Catholic University of Valpara\u00edso</li></ul><h1>SCIENCE</h1><ul><li>Hurricanes: What\u2019s Next? from University of Michigan</li><li>\u5b87\u5b99\u4e4b\u65c5\uff1a\u5bf9\u8bdd (Journey of the Universe: Weaving Knowledge and Action) from Yale University</li><li>Thomas Berry\u7684\u4e16\u754c\u89c2\uff1a\u5730\u7403\u793e\u533a\u7684\u7e41\u8363 (The Worldview of Thomas Berry: The Flourishing of the Earth Community) from Yale University</li><li>\u5b87\u5b99\u4e4b\u65c5\uff1a\u5c55\u73b0\u751f\u547d (Journey of the Universe: The Unfolding of Life) from Yale University</li><li>Analyze your Genome! from University of California, San Diego</li><li>Introduction to Mechanics, Part 1 from Rice University</li><li>Simulation Neuroscience from \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne</li><li>Earth\u2019s Environment: Soil, Water, and Air from Ohio State University</li><li>Energy and Earth: Fossil Fuels, Alternative, and Renewable Energy from Ohio State University</li><li>Life on Earth: Biomes, Climates, Ecology, and Evolution from Ohio State University</li><li>Introducci\u00f3n a la Geotermia from Universidad Nacional Aut\u00f3noma de M\u00e9xico</li><li>Sustainability of Social-Ecological Systems: the Nexus between Water, Energy and Food from Universitat Aut\u00f2noma de Barcelona (Autonomous University of Barcelona)</li><li>Laboratorio di Programmazione from University of Naples Federico II</li><li>Science & Religion 101 from University of Alberta</li><li>Nutrition and Health: Human Microbiome from Wageningen University</li><li>Principios b\u00e1sicos de divulgaci\u00f3n cient\u00edfica from Universidad de Cantabria</li><li>Life in the Universe: Syntheses for Life from Seoul National University</li><li>Ecosystems of California from University of California, Santa Cruz</li><li>Discover Best Practice Farming for a Sustainable 2050 from University of Western Australia</li><li>Wasser in der Schweiz from University of Zurich</li><li>Physiology: the Science of Life from University of Liverpool</li><li>The Scientific Revolution: Understanding the Roots of Modern Science from University of Groningen</li><li>Water Scarcity: Crisis and Response from Colorado State University Online</li><li>Metabolomics in Life Sciences from Osaka University</li><li>Planning for Climate Change in African Cities from Erasmus University Rotterdam</li><li>Introduction to Sustainability and Development from Deakin University</li><li>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0444\u0438\u0437\u0438\u043e\u043b\u043e\u0433\u0438\u044e (Introduction to physiology) from Saint Petersburg State University</li><li>\u041d\u0435\u043e\u0440\u0433\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0445\u0438\u043c\u0438\u044f: \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0445\u0438\u043c\u0438\u044e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (Inorganic chemistry: Introduction to chemistry of the elements) from Saint Petersburg State University</li><li>Autophagy: Research Behind the 2016 Nobel Prize in Physiology or Medicine from Tokyo Institute of Technology</li><li>\u041a\u0432\u0430\u043d\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f (Quantum computing) from Saint Petersburg State University</li><li>Sex, Science and Society from University of Newcastle</li><li>Sistemas Coloidales en Alimentos. Del Laboratorio a la Cocina from Universidad Complutense de Madrid</li><li>Why Biology Matters: Basic Concepts from Pompeu Fabra University</li><li>L\u2019eredit\u00e0 di Volta: dalla pila al fotovoltaico from University of Pavia</li><li>Scientific Methods and Research from Ural Federal University</li><li>Batteries, Fuel Cells, and their Role in Modern Society from Ural Federal University</li><li>ga079: \u89e3\u660e:\u30aa\u30fc\u30ed\u30e9\u306e\u8b0e from Tohoku University</li><li>Introducci\u00f3n a las ondas gravitacionales from Universidad Nacional de C\u00f3rdoba</li><li>Ecosistema y Cultura from Universidad Aut\u00f3noma de Occidente</li><li>Metodolog\u00eda Avanzada en Fisiolog\u00eda Celular from University of Extremadura</li><li>Brewing Microbiology from Oklahoma State University</li></ul>", "tags": ["Education", "Programming", "Technology", "Startup", "Self Improvement"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*vBLkfW8S-ZqHb8TmNEW1XA.jpeg"], "url": "https://medium.com/free-code-camp/every-single-machine-learning-course-on-the-internet-ranked-by-your-reviews-3c4a7b8026c0", "dateCreated": "2017-05-03T03:52:53.895Z", "datePublished": "2017-05-03T03:52:53.895Z", "dateModified": "2018-11-14T16:37:58.545Z", "headline": "Every single Machine Learning course on the internet, ranked by your reviews", "name": "Every single Machine Learning course on the internet, ranked by your reviews", "description": "A year and a half ago, I dropped out of one of the best computer science programs in Canada. I started creating my own data science master\u2019s program using online resources. I realized that I could\u2026", "identifier": "3c4a7b8026c0", "author": {"@type": "Person", "name": "David Venturi", "url": "https://davidventuri.medium.com"}, "creator": ["David Venturi"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/every-single-machine-learning-course-on-the-internet-ranked-by-your-reviews-3c4a7b8026c0"}, "content": "<h1>Every single Machine Learning course on the internet, ranked by your reviews</h1><a></a><a>David Venturi</a><a>May 3, 2017</a><a>Wooden Robot</a><p>A year and a half ago, I dropped out of one of the best computer science programs in Canada. I started creating my own data science master\u2019s program using online resources. I realized that I could learn everything I needed through edX, Coursera, and Udacity instead. And I could learn it faster, more efficiently, and for a fraction of the cost.</p><p>I\u2019m almost finished now. I\u2019ve taken many data science-related courses and audited portions of many more. I know the options out there, and what skills are needed for learners preparing for a data analyst or data scientist role. So I started creating a review-driven guide that recommends the best courses for each subject within data science.</p><p>For the first guide in the series, I recommended a few coding classes for the beginner data scientist. Then it was statistics and probability classes. Then introductions to data science. Also, data visualization.</p><h1>Now onto machine learning.</h1><p>For this guide, I spent a dozen hours trying to identify every online machine learning course offered as of May 2017, extracting key bits of information from their syllabi and reviews, and compiling their ratings. My end goal was to identify the three best courses available and present them to you, below.</p><p>For this task, I turned to none other than the open source Class Central community, and its database of thousands of course ratings and reviews.</p><a>homepage</a><p>Since 2011, Class Central founder Dhawal Shah has kept a closer eye on online courses than arguably anyone else in the world. Dhawal personally helped me assemble this list of resources.</p><h1>How we picked courses to consider</h1><p>Each course must fit three criteria:</p><ol><li>It must have a significant amount of machine learning content. Ideally, machine learning is the primary topic. Note that deep learning-only courses are excluded. More on that later.</li><li>It must be on-demand or offered every few months.</li><li>It must be an interactive online course, so no books or read-only tutorials. Though these are viable ways to learn, this guide focuses on courses. Courses that are strictly videos (i.e. with no quizzes, assignments, etc.) are also excluded.</li></ol><p>We believe we covered every notable course that fits the above criteria. Since there are seemingly hundreds of courses on Udemy, we chose to consider the most-reviewed and highest-rated ones only.</p><p>There\u2019s always a chance that we missed something, though. So please let us know in the comments section if we left a good course out.</p><h1>How we evaluated courses</h1><p>We compiled average ratings and number of reviews from Class Central and other review sites to calculate a weighted average rating for each course. We read text reviews and used this feedback to supplement the numerical ratings.</p><p>We made subjective syllabus judgment calls based on three factors:</p><ol><li>Explanation of the machine learning workflow. Does the course outline the steps required for executing a successful ML project? See the next section for what a typical workflow entails.</li><li>Coverage of machine learning techniques and algorithms. Are a variety of techniques (e.g. regression, classification, clustering, etc.) and algorithms (e.g. within classification: naive Bayes, decision trees, support vector machines, etc.) covered or just a select few? Preference is given to courses that cover more without skimping on detail.</li><li>Usage of common data science and machine learning tools. Is the course taught using popular programming languages like Python, R, and/or Scala? How about popular libraries within those languages? These aren\u2019t necessary, but helpful so slight preference is given to these courses.</li></ol><h1>What is machine learning? What is a workflow?</h1><p>A popular definition originates from Arthur Samuel in 1959: machine learning is a subfield of computer science that gives \u201ccomputers the ability to learn without being explicitly programmed.\u201d In practice, this means developing computer programs that can make predictions based on data. Just as humans can learn from experience, so can computers, where data = experience.</p><p>A machine learning workflow is the process required for carrying out a machine learning project. Though individual projects can differ, most workflows share several common tasks: problem evaluation, data exploration, data preprocessing, model training/testing/deployment, etc. Below you\u2019ll find helpful visualization of these core steps:</p><a>via UpX Academy</a><p>The ideal course introduces the entire process and provides interactive examples, assignments, and/or quizzes where students can perform each task themselves.</p><h1>Do these courses cover deep learning?</h1><p>First off, let\u2019s define deep learning. Here is a succinct description:</p><p>\u201cDeep learning is a subfield of machine learning concerned with algorithms inspired by the structure and function of the brain called artificial neural networks.\u201d</p><p>\u2014 Jason Brownlee from Machine Learning Mastery</p><p>As would be expected, portions of some of the machine learning courses contain deep learning content. I chose not to include deep learning-only courses, however. If you are interested in deep learning specifically, we\u2019ve got you covered with the following article:</p><a>Dive into Deep Learning with 12 free online coursesEvery day brings new headlines for how deep learning is changing the world around us. A few examples:medium.freecodecamp.com</a><p>My top three recommendations from that list would be:</p><ul><li>Creative Applications of Deep Learning with TensorFlow by Kadenze</li><li>Neural Networks for Machine Learning by the University of Toronto (taught by Geoffrey Hinton) via Coursera</li><li>Deep Learning A-Z\u2122: Hands-On Artificial Neural Networksby Kirill Eremenko, Hadelin de Ponteves, and the SuperDataScience Team via Udemy</li></ul><h1>Recommended prerequisites</h1><p>Several courses listed below ask students to have prior programming, calculus, linear algebra, and statistics experience. These prerequisites are understandable given that machine learning is an advanced discipline.</p><p>Missing a few subjects? Good news! Some of this experience can be acquired through our recommendations in the first two articles (programming, statistics) of this Data Science Career Guide. Several top-ranked courses below also provide gentle calculus and linear algebra refreshers and highlight the aspects most relevant to machine learning for those less familiar.</p><h1>Our pick for the best machine learning course is\u2026</h1><ul><li>Machine Learning (Stanford University via Coursera)</li></ul><p>Stanford University\u2019s Machine Learning on Coursera is the clear current winner in terms of ratings, reviews, and syllabus fit. Taught by the famous Andrew Ng, Google Brain founder and former chief scientist at Baidu, this was the class that sparked the founding of Coursera. It has a 4.7-star weighted average rating over 422 reviews.</p><p>Released in 2011, it covers all aspects of the machine learning workflow. Though it has a smaller scope than the original Stanford class upon which it is based, it still manages to cover a large number of techniques and algorithms. The estimated timeline is eleven weeks, with two weeks dedicated to neural networks and deep learning. Free and paid options are available.</p><p>Ng is a dynamic yet gentle instructor with a palpable experience. He inspires confidence, especially when sharing practical implementation tips and warnings about common pitfalls. A linear algebra refresher is provided and Ng highlights the aspects of calculus most relevant to machine learning.</p><p>Evaluation is automatic and is done via multiple choice quizzes that follow each lesson and programming assignments. The assignments (there are eight of them) can be completed in MATLAB or Octave, which is an open-source version of MATLAB. Ng explains his language choice:</p><p>In the past, I\u2019ve tried to teach machine learning using a large variety of different programming languages including C++, Java, Python, NumPy, and also Octave \u2026 And what I\u2019ve seen after having taught machine learning for almost a decade is that you learn much faster if you use Octave as your programming environment.</p><p>Though Python and R are likely more compelling choices in 2017 with the increased popularity of those languages, reviewers note that that shouldn\u2019t stop you from taking the course.</p><p>A few prominent reviewers noted the following:</p><p>Of longstanding renown in the MOOC world, Stanford\u2019s machine learning course really is the definitive introduction to this topic. The course broadly covers all of the major areas of machine learning \u2026 Prof. Ng precedes each segment with a motivating discussion and examples.</p><p>Andrew Ng is a gifted teacher and able to explain complicated subjects in a very intuitive and clear way, including the math behind all concepts. Highly recommended.</p><p>The only problem I see with this course if that it sets the expectation bar very high for other courses.</p><a>Machine Learning</a><h1>A new Ivy League introduction with a brilliant professor</h1><ul><li>Machine Learning (Columbia University via edX)</li></ul><p>Columbia University\u2019s Machine Learning is a relatively new offering that is part of their Artificial Intelligence MicroMasters on edX. Though it is newer and doesn\u2019t have a large number of reviews, the ones that it does have are exceptionally strong. Professor John Paisley is noted as brilliant, clear, and clever. It has a 4.8-star weighted average rating over 10 reviews.</p><p>The course also covers all aspects of the machine learning workflow and more algorithms than the above Stanford offering. Columbia\u2019s is a more advanced introduction, with reviewers noting that students should be comfortable with the recommended prerequisites (calculus, linear algebra, statistics, probability, and coding).</p><p>Quizzes (11), programming assignments (4), and a final exam are the modes of evaluation. Students can use either Python, Octave, or MATLAB to complete the assignments. The course\u2019s total estimated timeline is eight to ten hours per week over twelve weeks. It is free with a verified certificate available for purchase.</p><p>Below are a few of the aforementioned sparkling reviews:</p><p>Over all my years of [being a] student I\u2019ve come across professors who aren\u2019t brilliant, professors who are brilliant but they don\u2019t know how to explain the stuff clearly, and professors who are brilliant and know how explain the stuff clearly. Dr. Paisley belongs to the third group.</p><p>This is a great course \u2026 The instructor\u2019s language is precise and that is, to my mind, one of the strongest points of the course. The lectures are of high quality and the slides are great too.</p><p>Dr. Paisley and his supervisor are \u2026 students of Michael Jordan, the father of machine learning. [Dr. Paisley] is the best ML professor at Columbia because of his ability to explain stuff clearly. Up to 240 students have selected his course this semester, the largest number among all professors [teaching] machine learning at Columbia.</p><a>Machine Learning</a><h1>A practical intro in Python & R from industry experts</h1><ul><li>Machine Learning A-Z\u2122: Hands-On Python & R In Data Science (Kirill Eremenko, Hadelin de Ponteves, and the SuperDataScience Team via Udemy)</li></ul><p>Machine Learning A-Z\u2122 on Udemy is an impressively detailed offering that provides instruction in both Python and R, which is rare and can\u2019t be said for any of the other top courses. It has a 4.5-star weighted average rating over 8,119 reviews, which makes it the most reviewed course of the ones considered.</p><p>It covers the entire machine learning workflow and an almost ridiculous (in a good way) number of algorithms through 40.5 hours of on-demand video. The course takes a more applied approach and is lighter math-wise than the above two courses. Each section starts with an \u201cintuition\u201d video from Eremenko that summarizes the underlying theory of the concept being taught. de Ponteves then walks through implementation with separate videos for both Python and R.</p><p>As a \u201cbonus,\u201d the course includes Python and R code templates for students to download and use on their own projects. There are quizzes and homework challenges, though these aren\u2019t the strong points of the course.</p><p>Eremenko and the SuperDataScience team are revered for their ability to \u201cmake the complex simple.\u201d Also, the prerequisites listed are \u201cjust some high school mathematics,\u201d so this course might be a better option for those daunted by the Stanford and Columbia offerings.</p><p>A few prominent reviewers noted the following:</p><p>The course is professionally produced, the sound quality is excellent, and the explanations are clear and concise \u2026 It\u2019s an incredible value for your financial and time investment.</p><p>It was spectacular to be able to follow the course in two different programming languages simultaneously.</p><p>Kirill is one of the absolute best instructors on Udemy (if not the Internet) and I recommend taking any class he teaches. \u2026 This course has a ton of content, like a ton!</p><a>Machine Learning A-Z\u2122</a><h1>The competition</h1><p>Our #1 pick had a weighted average rating of 4.7 out of 5 stars over 422 reviews. Let\u2019s look at the other alternatives, sorted by descending rating. A reminder that deep learning-only courses are not included in this guide \u2014 you can find those here.</p><p>The Analytics Edge (Massachusetts Institute of Technology/edX): More focused on analytics in general, though it does cover several machine learning topics. Uses R. Strong narrative that leverages familiar real-world examples. Challenging. Ten to fifteen hours per week over twelve weeks. Free with a verified certificate available for purchase. It has a 4.9-star weighted average rating over 214 reviews.</p><a>The Analytics Edge</a><p>Python for Data Science and Machine Learning Bootcamp (Jose Portilla/Udemy): Has large chunks of machine learning content, but covers the whole data science process. More of a very detailed intro to Python. Amazing course, though not ideal for the scope of this guide. 21.5 hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.6-star weighted average rating over 3316 reviews.</p><p>Data Science and Machine Learning Bootcamp with R (Jose Portilla/Udemy): The comments for Portilla\u2019s above course apply here as well, except for R. 17.5 hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.6-star weighted average rating over 1317 reviews.</p><p>Machine Learning Series (Lazy Programmer Inc./Udemy): Taught by a data scientist/big data engineer/full stack software engineer with an impressive resume, Lazy Programmer currently has a series of 16 machine learning-focused courses on Udemy. In total, the courses have 5000+ ratings and almost all of them have 4.6 stars. A useful course ordering is provided in each individual course\u2019s description. Uses Python. Cost varies depending on Udemy discounts, which are frequent.</p><p>Machine Learning (Georgia Tech/Udacity): A compilation of what was three separate courses: Supervised, Unsupervised and Reinforcement Learning. Part of Udacity\u2019s Machine Learning Engineer Nanodegree and Georgia Tech\u2019s Online Master\u2019s Degree (OMS). Bite-sized videos, as is Udacity\u2019s style. Friendly professors. Estimated timeline of four months. Free. It has a 4.56-star weighted average rating over 9 reviews.</p><p>Implementing Predictive Analytics with Spark in Azure HDInsight (Microsoft/edX): Introduces the core concepts of machine learning and a variety of algorithms. Leverages several big data-friendly tools, including Apache Spark, Scala, and Hadoop. Uses both Python and R. Four hours per week over six weeks. Free with a verified certificate available for purchase. It has a 4.5-star weighted average rating over 6 reviews.</p><p>Data Science and Machine Learning with Python \u2014 Hands On! (Frank Kane/Udemy): Uses Python. Kane has nine years of experience at Amazon and IMDb. Nine hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.5-star weighted average rating over 4139 reviews.</p><p>Scala and Spark for Big Data and Machine Learning (Jose Portilla/Udemy): \u201cBig data\u201d focus, specifically on implementation in Scala and Spark. Ten hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.5-star weighted average rating over 607 reviews.</p><p>Machine Learning Engineer Nanodegree (Udacity): Udacity\u2019s flagship Machine Learning program, which features a best-in-class project review system and career support. The program is a compilation of several individual Udacity courses, which are free. Co-created by Kaggle. Estimated timeline of six months. Currently costs $199 USD per month with a 50% tuition refund available for those who graduate within 12 months. It has a 4.5-star weighted average rating over 2 reviews.</p><p>Learning From Data (Introductory Machine Learning) (California Institute of Technology/edX): Enrollment is currently closed on edX, but is also available via CalTech\u2019s independent platform (see below). It has a 4.49-star weighted average rating over 42 reviews.</p><a>Learning From Data</a><p>Learning From Data (Introductory Machine Learning) (Yaser Abu-Mostafa/California Institute of Technology): \u201cA real Caltech course, not a watered-down version.\u201d Reviews note it is excellent for understanding machine learning theory. The professor, Yaser Abu-Mostafa, is popular among students and also wrote the textbook upon which this course is based. Videos are taped lectures (with lectures slides picture-in-picture) uploaded to YouTube. Homework assignments are .pdf files. The course experience for online students isn\u2019t as polished as the top three recommendations. It has a 4.43-star weighted average rating over 7 reviews.</p><p>Mining Massive Datasets (Stanford University): Machine learning with a focus on \u201cbig data.\u201d Introduces modern distributed file systems and MapReduce. Ten hours per week over seven weeks. Free. It has a 4.4-star weighted average rating over 30 reviews.</p><p>AWS Machine Learning: A Complete Guide With Python (Chandra Lingam/Udemy): A unique focus on cloud-based machine learning and specifically Amazon Web Services. Uses Python. Nine hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.4-star weighted average rating over 62 reviews.</p><p>Introduction to Machine Learning & Face Detection in Python (Holczer Balazs/Udemy): Uses Python. Eight hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.4-star weighted average rating over 162 reviews.</p><p>StatLearning: Statistical Learning (Stanford University): Based on the excellent textbook, \u201cAn Introduction to Statistical Learning, with Applications in R\u201d and taught by the professors who wrote it. Reviewers note that the MOOC isn\u2019t as good as the book, citing \u201cthin\u201d exercises and mediocre videos. Five hours per week over nine weeks. Free. It has a 4.35-star weighted average rating over 84 reviews.</p><p>Machine Learning Specialization (University of Washington/Coursera): Great courses, but last two classes (including the capstone project) were canceled. Reviewers note that this series is more digestable (read: easier for those without strong technical backgrounds) than other top machine learning courses (e.g. Stanford\u2019s or Caltech\u2019s). Be aware that the series is incomplete with recommender systems, deep learning, and a summary missing. Free and paid options available. It has a 4.31-star weighted average rating over 80 reviews.</p><a>Machine Learning Specialization</a><p>From 0 to 1: Machine Learning, NLP & Python-Cut to the Chase (Loony Corn/Udemy): \u201cA down-to-earth, shy but confident take on machine learning techniques.\u201d Taught by four-person team with decades of industry experience together. Uses Python. Cost varies depending on Udemy discounts, which are frequent. It has a 4.2-star weighted average rating over 494 reviews.</p><p>Principles of Machine Learning (Microsoft/edX): Uses R, Python, and Microsoft Azure Machine Learning. Part of the Microsoft Professional Program Certificate in Data Science. Three to four hours per week over six weeks. Free with a verified certificate available for purchase. It has a 4.09-star weighted average rating over 11 reviews.</p><p>Big Data: Statistical Inference and Machine Learning (Queensland University of Technology/FutureLearn): A nice, brief exploratory machine learning course with a focus on big data. Covers a few tools like R, H2O Flow, and WEKA. Only three weeks in duration at a recommended two hours per week, but one reviewer noted that six hours per week would be more appropriate. Free and paid options available. It has a 4-star weighted average rating over 4 reviews.</p><p>Genomic Data Science and Clustering (Bioinformatics V) (University of California, San Diego/Coursera): For those interested in the intersection of computer science and biology and how it represents an important frontier in modern science. Focuses on clustering and dimensionality reduction. Part of UCSD\u2019s Bioinformatics Specialization. Free and paid options available. It has a 4-star weighted average rating over 3 reviews.</p><p>Intro to Machine Learning (Udacity): Prioritizes topic breadth and practical tools (in Python) over depth and theory. The instructors, Sebastian Thrun and Katie Malone, make this class so fun. Consists of bite-sized videos and quizzes followed by a mini-project for each lesson. Currently part of Udacity\u2019s Data Analyst Nanodegree. Estimated timeline of ten weeks. Free. It has a 3.95-star weighted average rating over 19 reviews.</p><a>Intro to Machine Learning</a><p>Machine Learning for Data Analysis (Wesleyan University/Coursera): A brief intro machine learning and a few select algorithms. Covers decision trees, random forests, lasso regression, and k-means clustering. Part of Wesleyan\u2019s Data Analysis and Interpretation Specialization. Estimated timeline of four weeks. Free and paid options available. It has a 3.6-star weighted average rating over 5 reviews.</p><p>Programming with Python for Data Science (Microsoft/edX): Produced by Microsoft in partnership with Coding Dojo. Uses Python. Eight hours per week over six weeks. Free and paid options available. It has a 3.46-star weighted average rating over 37 reviews.</p><p>Machine Learning for Trading (Georgia Tech/Udacity): Focuses on applying probabilistic machine learning approaches to trading decisions. Uses Python. Part of Udacity\u2019s Machine Learning Engineer Nanodegree and Georgia Tech\u2019s Online Master\u2019s Degree (OMS). Estimated timeline of four months. Free. It has a 3.29-star weighted average rating over 14 reviews.</p><p>Practical Machine Learning (Johns Hopkins University/Coursera): A brief, practical introduction to a number of machine learning algorithms. Several one/two-star reviews expressing a variety of concerns. Part of JHU\u2019s Data Science Specialization. Four to nine hours per week over four weeks. Free and paid options available. It has a 3.11-star weighted average rating over 37 reviews.</p><p>Machine Learning for Data Science and Analytics (Columbia University/edX): Introduces a wide range of machine learning topics. Some passionate negative reviews with concerns including content choices, a lack of programming assignments, and uninspiring presentation. Seven to ten hours per week over five weeks. Free with a verified certificate available for purchase. It has a 2.74-star weighted average rating over 36 reviews.</p><p>Recommender Systems Specialization (University of Minnesota/Coursera): Strong focus one specific type of machine learning \u2014 recommender systems. A four course specialization plus a capstone project, which is a case study. Taught using LensKit (an open-source toolkit for recommender systems). Free and paid options available. It has a 2-star weighted average rating over 2 reviews.</p><p>Machine Learning With Big Data (University of California, San Diego/Coursera): Terrible reviews that highlight poor instruction and evaluation. Some noted it took them mere hours to complete the whole course. Part of UCSD\u2019s Big Data Specialization. Free and paid options available. It has a 1.86-star weighted average rating over 14 reviews.</p><p>Practical Predictive Analytics: Models and Methods (University of Washington/Coursera): A brief intro to core machine learning concepts. One reviewer noted that there was a lack of quizzes and that the assignments were not challenging. Part of UW\u2019s Data Science at Scale Specialization. Six to eight hours per week over four weeks. Free and paid options available. It has a 1.75-star weighted average rating over 4 reviews.</p><p>The following courses had one or no reviews as of May 2017.</p><p>Machine Learning for Musicians and Artists (Goldsmiths, University of London/Kadenze): Unique. Students learn algorithms, software tools, and machine learning best practices to make sense of human gesture, musical audio, and other real-time data. Seven sessions in length. Audit (free) and premium ($10 USD per month) options available. It has one 5-star review.</p><a>Machine Learning for Musicians and Artists</a><p>Applied Machine Learning in Python (University of Michigan/Coursera): Taught using Python and the scikit learn toolkit. Part of the Applied Data Science with Python Specialization. Scheduled to start May 29th. Free and paid options available.</p><p>Applied Machine Learning (Microsoft/edX): Taught using various tools, including Python, R, and Microsoft Azure Machine Learning (note: Microsoft produces the course). Includes hands-on labs to reinforce the lecture content. Three to four hours per week over six weeks. Free with a verified certificate available for purchase.</p><p>Machine Learning with Python (Big Data University): Taught using Python. Targeted towards beginners. Estimated completion time of four hours. Big Data University is affiliated with IBM. Free.</p><p>Machine Learning with Apache SystemML (Big Data University): Taught using Apache SystemML, which is a declarative style language designed for large-scale machine learning. Estimated completion time of eight hours. Big Data University is affiliated with IBM. Free.</p><p>Machine Learning for Data Science (University of California, San Diego/edX): Doesn\u2019t launch until January 2018. Programming examples and assignments are in Python, using Jupyter notebooks. Eight hours per week over ten weeks. Free with a verified certificate available for purchase.</p><p>Introduction to Analytics Modeling (Georgia Tech/edX): The course advertises R as its primary programming tool. Five to ten hours per week over ten weeks. Free with a verified certificate available for purchase.</p><p>Predictive Analytics: Gaining Insights from Big Data (Queensland University of Technology/FutureLearn): Brief overview of a few algorithms. Uses Hewlett Packard Enterprise\u2019s Vertica Analytics platform as an applied tool. Start date to be announced. Two hours per week over four weeks. Free with a Certificate of Achievement available for purchase.</p><p>Introducci\u00f3n al Machine Learning (Universitas Telef\u00f3nica/Mir\u00edada X): Taught in Spanish. An introduction to machine learning that covers supervised and unsupervised learning. A total of twenty estimated hours over four weeks.</p><p>Machine Learning Path Step (Dataquest): Taught in Python using Dataquest\u2019s interactive in-browser platform. Multiple guided projects and a \u201cplus\u201d project where you build your own machine learning system using your own data. Subscription required.</p><p>The following six courses are offered by DataCamp. DataCamp\u2019s hybrid teaching style leverages video and text-based instruction with lots of examples through an in-browser code editor. A subscription is required for full access to each course.</p><a>DataCamp</a><p>Introduction to Machine Learning (DataCamp): Covers classification, regression, and clustering algorithms. Uses R. Fifteen videos and 81 exercises with an estimated timeline of six hours.</p><p>Supervised Learning with scikit-learn (DataCamp): Uses Python and scikit-learn. Covers classification and regression algorithms. Seventeen videos and 54 exercises with an estimated timeline of four hours.</p><p>Unsupervised Learning in R (DataCamp): Provides a basic introduction to clustering and dimensionality reduction in R. Sixteen videos and 49 exercises with an estimated timeline of four hours.</p><p>Machine Learning Toolbox (DataCamp): Teaches the \u201cbig ideas\u201d in machine learning. Uses R. 24 videos and 88 exercises with an estimated timeline of four hours.</p><p>Machine Learning with the Experts: School Budgets (DataCamp): A case study from a machine learning competition on DrivenData. Involves building a model to automatically classify items in a school\u2019s budget. DataCamp\u2019s \u201cSupervised Learning with scikit-learn\u201d is a prerequisite. Fifteen videos and 51 exercises with an estimated timeline of four hours.</p><p>Unsupervised Learning in Python (DataCamp): Covers a variety of unsupervised learning algorithms using Python, scikit-learn, and scipy. The course ends with students building a recommender system to recommend popular musical artists. Thirteen videos and 52 exercises with an estimated timeline of four hours.</p><p>Machine Learning (Tom Mitchell/Carnegie Mellon University): Carnegie Mellon\u2019s graduate introductory machine learning course. A prerequisite to their second graduate level course, \u201cStatistical Machine Learning.\u201d Taped university lectures with practice problems, homework assignments, and a midterm (all with solutions) posted online. A 2011 version of the course also exists. CMU is one of the best graduate schools for studying machine learning and has a whole department dedicated to ML. Free.</p><p>Statistical Machine Learning (Larry Wasserman/Carnegie Mellon University): Likely the most advanced course in this guide. A follow-up to Carnegie Mellon\u2019s Machine Learning course. Taped university lectures with practice problems, homework assignments, and a midterm (all with solutions) posted online. Free.</p><a>Machine Learning</a><a>Statistical Machine Learning</a><p>Undergraduate Machine Learning (Nando de Freitas/University of British Columbia): An undergraduate machine learning course. Lectures are filmed and put on YouTube with the slides posted on the course website. The course assignments are posted as well (no solutions, though). de Freitas is now a full-time professor at the University of Oxford and receives praise for his teaching abilities in various forums. Graduate version available (see below).</p><p>Machine Learning (Nando de Freitas/University of British Columbia): A graduate machine learning course. The comments in de Freitas\u2019 undergraduate course (above) apply here as well.</p><h1>Wrapping it Up</h1><p>This is the fifth of a six-piece series that covers the best online courses for launching yourself into the data science field. We covered programming in the first article, statistics and probability in the second article, intros to data science in the third article, and data visualization in the fourth.</p><a>I ranked every Intro to Data Science course on the internet, based on thousands of data pointsA year ago, I dropped out of one of the best computer science programs in Canada. I started creating my own data\u2026medium.freecodecamp.com</a><p>The final piece will be a summary of those articles, plus the best online courses for other key topics such as data wrangling, databases, and even software engineering.</p><p>If you\u2019re looking for a complete list of Data Science online courses, you can find them on Class Central\u2019s Data Science and Big Data subject page.</p><p>If you enjoyed reading this, check out some of Class Central\u2019s other pieces:</p><a>Here are 250 Ivy League courses you can take online right now for free250 MOOCs from Brown, Columbia, Cornell, Dartmouth, Harvard, Penn, Princeton, and Yale.medium.freecodecamp.com</a><a>The 50 best free online university courses according to dataWhen I launched Class Central back in November 2011, there were around 18 or so free online courses, and almost all of\u2026medium.freecodecamp.com</a><p>If you have suggestions for courses I missed, let me know in the responses!</p><p>If you found this helpful, click the \ud83d\udc9a so more people will see it here on Medium.</p><p>This is a condensed version of my original article published on Class Central, where I\u2019ve included detailed course syllabi.</p>", "tags": ["Machine Learning", "Artificial Intelligence", "Tech", "Programming", "Technology"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*IgIzEgfAG6XwcFZ8EYIi7A.png"], "url": "https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c", "dateCreated": "2017-09-10T17:46:37.013Z", "datePublished": "2017-09-10T17:46:37.013Z", "dateModified": "2018-10-18T19:26:13.539Z", "headline": "How I hacked hundreds of companies through their helpdesk", "name": "How I hacked hundreds of companies through their helpdesk", "description": "UPDATE: The Next Web wrote a story about my findings: https://thenextweb.com/security/2017/09/21/ticket-trick-see-hackers-gain-unauthorized-access-slack-teams-exploiting-issue-trackers/ Months ago I\u2026", "identifier": "b7680ddc2d4c", "author": {"@type": "Person", "name": "Inti De Ceukelaire", "url": "https://medium.com/@intideceukelaire"}, "creator": ["Inti De Ceukelaire"], "publisher": {"@type": "Organization", "name": "intigriti", "url": "https://medium.com/intigriti", "logo": {"@type": "ImageObject", "width": 308, "height": 60, "url": "https://miro.medium.com/max/616/1*OMF3fSqH8t4xBJ9-6oZDZw.png"}}, "mainEntityOfPage": "https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c"}, "content": "<h1>How I hacked hundreds of companies through their helpdesk</h1><a></a><a>Inti De Ceukelaire</a><a>Sep 10, 2017</a><p>UPDATE: The Next Web wrote a story about my findings: https://thenextweb.com/security/2017/09/21/ticket-trick-see-hackers-gain-unauthorized-access-slack-teams-exploiting-issue-trackers/</p><h1>Introduction</h1><p>Months ago I discovered a flaw hackers can use to access a company\u2019s internal communications. The flaw only takes a couple of clicks to potentially access intranets, social media accounts such as Twitter, and most commonly Yammer and Slack teams.</p><p>The bug is still out there. It isn\u2019t something that can be fixed right away. Over the past few months, I contacted dozens of companies and affected vendors as part of their bug bounty programs in order to get their setup fixed. Due to the number of affected companies it was not possible to contact everyone. On the recommendation of some of my hacker heroes, and with approval of the affected vendors, I\u2019m publishing this blog so everyone affected can act immediately. Introducing what I\u2019ve been calling Ticket Trick:</p><h1>THE DOOR \u2014 sign up with your @company email</h1><p>Popular business communication tools such as Slack, Yammer and Facebook Workplace require employees to sign up with their @company e-mail address. Once an employee clicks on the verification link sent to their internal email address, they can join the company\u2019s instance and access internal communication.</p><h1>THE KEYS \u2014 The helpdesk or create-by-email feature</h1><p>METHOD #1 \u2014 THE ISSUE TRACKER</p><p>It started when I discovered a way to bypass this authentication with GitLab. Anyone with a valid @gitlab.com e-mail address could join their team.</p><p>At the same time, GitLab offers a feature to create issues by e-mail by sending them\u2026 to a unique @gitlab.com e-mail address. See *where this is headed?</p><p>I tried to join their Slack team using this issue creating email address, just to see what would happen.</p><p>I quickly refreshed my issue list and saw the verification e-mails added as an issue to my project:</p><p>The freshly added issue contained the magic link needed to join their internal Slack team:</p><p>I clicked the link to see if it\u2019d actually work \u2014 and it did. I was greeted by the list of channels I was able to join and immediately removed my account and notified GitLab.</p><p>The GitLab team responded to my report on the same Sunday evening I reported it.</p><p>They immediately set their slack to invite-only and took additional measures to inform their customers about the dangers of this functionality.</p><p>METHOD #2 \u2014 THE SUPPORT DESK</p><p>Only a handful of websites have public issue trackers so I decided to dig deeper to see whether a more common exploitation vector existed. As it turned out, it did, and is was far more common that I would\u2019ve ever guessed: customer service.</p><p>E-mails sent to support@company.com sometimes turned up in an online support portal such as Zendesk, Kayako, (Fresh)Desk, WHMCS or a custom tool. So I decided to play with that and see whether a hacker could somehow extract the links from the database.</p><p>Most support portals can be integrated with single sign-on: an authenticated user will automatically be logged into the support desk to ensure a seamless experience. More than half of the websites I tested did not require e-mail verification, which means any one could sign up with any e-mail address and effectively read any support tickets created by that e-mail address. Online video sharing platform [censored*] was one of the many companies that did not require verification.</p><p>So I registered a [censored*] account the same email address Slack uses to send their magic verification links: feedback@slack.com.</p><p>Using Slack\u2019s handy find your workspace feature, I found [censored*] slack instance and signed up with the email address support@[censored*].com.</p><p>Behind the scenes, feedback@slack.com now sends an e-mail to support@[censored*].com containing the verification link.</p><p>When support@[censored*].com receives the e-mail, it will be classified as a support ticket created by feedback@slack.com\u2026 which is the exact e-mail I signed up with.</p><p>So I went to the help center to check my support tickets.</p><p>I had one open support ticket\u2026 which contained the magic verification link I needed to join the [censored*] team.</p><p>The [censored*] team immediately responded to this report and awarded a $2,000 bounty as part of their Bug Bounty program.</p><p>All websites that integrate a support portal without e-mail verification are vulnerable to this. And it gets even worse.</p><p>I found two additional flaws, in Kayako and Zendesk, that allowed me to bypass the e-mail verification process in their common setups. This allowed me to always execute the attack even when SSO was not enabled and e-mail verification was required. I reported these issues as part of their responsible disclosure program on June 1st and both have put a fix into place.</p><p>Next to that, websites that require users to verify their e-mail address upon registration, but not when changing it afterwards are vulnerable as well.</p><h1>Increasing the impact</h1><p>If a company does not use Slack and thinks it\u2019s safe\u2026 it\u2019s probably out of luck, given how widespread I found this issue to be. For example: Other business communication tools such as Yammer are also prone to this attack:</p><p>And because we can read e-mails sent to support@, we can also see any password reset link sent to that e-mail address. As it turns out, quite a few companies use this exact e-mail address to sign up for third party services and social media like Twitter.</p><p>This means an attacker could also hijack any account linked to the support@ mail address:</p><p>In some cases, this e-mail address also had a privileged account on the website itself. By registering no-reply@company.com, you could intercept the password reset token for support@company.com and gain access to privileged accounts providing access to all customer information.</p><p>If none of the above worked, the attacker could still read and respond to past and future support tickets created by e-mail. A friend of mine once sent an e-mail to the support address of a company because something wasn\u2019t working properly. Investigating this issue, I found that particular company to be vulnerable, so I signed up with his e-mail address, clicked on the \u201cmy support cases\u201d tab and saw that particular e-mail appear. I could literally read and respond to every e-mail people sent to the customer service, as long as they didn\u2019t have an account on the support desk. Users thinking they are talking to the customer service would instead be talking to a hacker.</p><h1>Vendor and company responses</h1><p>It was interesting to see how differently each company handled the disclosure.</p><ul><li>Most affected companies handled my reports very professionally. Some companies even decided to issue a bug bounty as high as $8,000. I occasionally got a negative response and some chose to ignore my disclosure entirely.</li><li>Issue Tracker GitLab (#21823, disclosed) quickly took action by disabling trust for their own company domain and changing their Slack settings. They also updated their documentation to prevent their users from making the same mistake.</li><li>I disclosed this issue to Slack (#23923, pending disclosure) to check whether we could prevent this at a higher level. Even though they aren\u2019t directly responsible for this issue, it affects a significant portion of their customers. Slack took the risk seriously and changed their no-reply e-mail address to include a random token. This effectively prevents the attack in helpdesk software. The issue still persists for issue trackers and other e-mail integrations. Despite the fact that this is not a vulnerability in Slack itself, Slack decided to award a generous $1,500 bounty for my report.</li></ul><ul><li>I also tried to contact Yammer about this issue. Initially I got no response. Two weeks later I sent a follow-up e-mail which they replied telling me they forwarded it to the Yammer team along with the definition of a security vulnerability. To date, they haven\u2019t taken any proactive measures to tackle this issue at a higher level like Slack did.</li></ul><ul><li>I contacted Kayako and Zendesk (#235139, disclosed) about the SSO bypass as part of their bug bounty program. Both resolved this issue and rewarded me respectively with a $1000 and a $750 bounty.</li></ul><h1>Lessons learned</h1><ul><li>Once inside, most company\u2019s security is significantly weaker. Internal impact assessments showed employees pasted passwords, company secrets and customer information in channels everyone in the team had access to.</li><li>We need to keep looking for security issues in all possible places. This vulnerability existed for years in hundreds of websites screened by security professionals, but as far as I know, nobody found it.</li><li>Large companies have no clue what their employees are doing. I discussed this flaw a CISO of a giant payment processing company. He assured me this wouldn\u2019t be a problem, as their employees weren\u2019t supposed to communicate through Slack. They had their own intranet set up to handle these things. I proved him wrong by joining 8 rogue Slack channels actively used by 332 employees all around the globe. I ended up getting a $5,000 bounty for it.</li><li>If you are wondering which Slack teams you are able to join using your company e-mail, you can use Slack\u2019s find your team functionality.</li></ul><h1>FAQ</h1><ul><li>How do I know if my company is affected?This vulnerability exists if support tickets can be created through e-mail and if support tickets are accessible by users with an unverified e-mail address. It also exists in public issue trackers or responders providing a unique @company.com e-mail address to submit information directly to a ticket, forum post, private message or user account.</li><li>As an affected company, how can we remediate this issue?I\u2019ve seen several approaches. Companies like AirBnb, LinkedIn and GitHub provide e-mail addresses with a different domain, like @reply.linkedin.com or @mail.github.com. They cannot be used to sign up for services like Yammer or Slack. GitLab updated their documentation with this advice to prevent this attack in issue trackers.Some chose to disable the e-mail functionality, the service portal or the single sign on, while others implemented a proper e-mail verification. It is also not advised to sign up for services such as Twitter, Slack or Zendesk with the official support@ e-mail address.</li><li>As an affected vendor of business communication software, how can we prevent this from happening?You could implement extra security measures for people signing up with a customer service e-mail, but in many cases that would not be practical and or efficient. Facebook Workplace has a better approach as they send their e-mails from a randomly generated e-mail address like notification+ajivdw9kpwld@fbworkmail.com which is impossible for an attacker to guess. In response to my discovery, Slack also decided to implement these randomized e-mail addresses.</li><li>Why are you disclosing this information when hundreds of companies are still vulnerable?Due to the number of affected companies, it is impossible to inform all of them, risking legal threats from companies that didn\u2019t ask for security advice. I only contacted the small minority of affected companies and vendors with public responsible disclosure programs. Disclosing this now is a tough decision and could directly lead to security breaches, but history has revealed us hoarding bugs isn\u2019t a good idea either.</li><li>Who are you?I\u2019m Inti and I live in Oilsjt, Belgium. As a kid, I was extremely skilled at breaking stuff. I\u2019m 22 now and work as a creative coder for Studio Brussel, Belgium\u2019s biggest radio station. At night I still break stuff as an ethical hacker with thanks from Google, Facebook, Microsoft, Yahoo and so on.</li><li>Any other projects?I hijacked a Trump tweet, made StalkScan.com that highlights the creepy side of the Facebook graph search and like to blog about my bug bounty findings on medium.</li></ul><p>FOLLOW ME ON TWITTER FOR MORE: https://twitter.com/securinti</p><p>I\u2019d like to thank the amazing Pete Yaworski for proofreading and fixing my English. Also a shout out to Arne, Preben and Jerome from #teambelgium as a thank you for keeping their mouths shut. Thanks to Slack, Gitlab, [censored*] and Zendesk for their cooperation and approval of my blogpost.</p>", "tags": ["Security", "Tech", "Startup", "Technology", "Programming"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*GWYd4eLrs0U96MkNNVB56A.png"], "url": "https://medium.com/hackernoon/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9", "dateCreated": "2017-03-25T16:55:48.623Z", "datePublished": "2017-03-25T16:55:48.623Z", "dateModified": "2020-09-22T21:20:35.221Z", "headline": "6 Reasons Why JavaScript Async/Await Blows Promises Away (Tutorial)", "name": "6 Reasons Why JavaScript Async/Await Blows Promises Away (Tutorial)", "description": "NodeJS supports async/await out of the box since version 7.6. I believe it has been the single greatest addition to JS since 2017. If you haven\u2019t tried it yet, here are a bunch of reasons with\u2026", "identifier": "c7ec10518dd9", "author": {"@type": "Person", "name": "Mostafa Gaafar", "url": "https://medium.com/@mgaafar"}, "creator": ["Mostafa Gaafar"], "publisher": {"@type": "Organization", "name": "HackerNoon.com", "url": "https://medium.com/hackernoon", "logo": {"@type": "ImageObject", "width": 417, "height": 60, "url": "https://miro.medium.com/max/834/1*_U3cyTY4DnQ5tvS93EBhiA.png"}}, "mainEntityOfPage": "https://medium.com/hackernoon/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9"}, "content": "<h1>6 Reasons Why JavaScript Async/Await Blows Promises Away (Tutorial)</h1><a></a><a>Mostafa Gaafar</a><a>Mar 25, 2017</a><p>\ud83d\udc49 This article has been updated and republished, read the latest version here</p><p>NodeJS supports async/await out of the box since version 7.6. I believe it has been the single greatest addition to JS since 2017. If you haven\u2019t tried it yet, here are a bunch of reasons with examples why you should adopt it immediately and never look back.</p><h1>Async/Await 101</h1><p>For those who have never heard of this topic before, here\u2019s a quick intro</p><ul><li>Async/await is a new way to write asynchronous code. Previous alternatives for asynchronous code are callbacks and promises.</li><li>Async/await is actually just syntax sugar built on top of promises. It cannot be used with plain callbacks or node callbacks.</li><li>Async/await is, like promises, non blocking.</li><li>Async/await makes asynchronous code look and behave a little more like synchronous code. This is where all its power lies.</li></ul><h1>Syntax</h1><p>Assuming a function getJSON that returns a promise, and that promise resolves with some JSON object. We just want to call it and log that JSON, then return \"done\".</p><p>This is how you would implement it using promises</p><p>And this is how it looks with async/await</p><p>There are a few differences here</p><ol><li>Our function has the keyword async before it. The await keyword can only be used inside functions defined with async. Any async function returns a promise implicitly, and the resolve value of the promise will be whatever you return from the function (which is the string \"done\" in our case).</li><li>The above point implies that we can\u2019t use await in the top level of our code since that is not inside an async function.</li></ol><p>3. await getJSON() means that the console.log call will wait until getJSON() promise resolves and print it value.</p><h1>Why Is It better?</h1><h2>1. Concise and clean</h2><p>Look at how much code we didn\u2019t write! Even in the contrived example above, it\u2019s clear we saved a decent amount of code. We didn\u2019t have to write .then, create an anonymous function to handle the response, or give a name data to a variable that we don\u2019t need to use. We also avoided nesting our code. These small advantages add up quickly, which will become more obvious in the following code examples.</p><h2>2. Error handling</h2><p>Async/await makes it finally possible to handle both synchronous and asynchronous errors with the same construct, good old try/catch. In the example below with promises, the try/catch will not handle if JSON.parse fails because it\u2019s happening inside a promise. We need to call .catch on the promise and duplicate our error handling code, which will (hopefully) be more sophisticated than console.log in your production ready code.</p><p>Now look at the same code with async/await. The catch block now will handle parsing errors.</p><h2>3. Conditionals</h2><p>Imagine something like the code below which fetches some data and decides whether it should return that or get more details based on some value in the data.</p><p>Just looking at this gives you a headache. It\u2019s easy to get lost in all that nesting (6 levels), braces, and return statements that are only needed to propagate the final result up to the main promise.</p><p>This example becomes way more readable when rewritten with async/await.</p><h2>4. Intermediate values</h2><p>You have probably found yourself in a situation where you call a promise1 and then use what it returns to call promise2, then use the results of both promises to call a promise3. Your code most likely looked like this</p><p>If promise3 didn\u2019t require value1 it would be easy to flatten the promise nesting a bit. If you are the kind of person who couldn\u2019t live with this, you could wrap both values 1 & 2 in a Promise.all and avoid deeper nesting, like this</p><p>This approach sacrifices semantics for the sake of readability. There is no reason for value1 & value2 to belong in an array together, except to avoid nesting promises.</p><p>This same logic becomes ridiculously simple and intuitive with async/await. It makes you wonder about all the things you could have done in the time that you spent struggling to make promises look less hideous.</p><h2>5. Error stacks</h2><p>Imagine a piece of code that calls multiple promises in a chain, and somewhere down the chain an error is thrown.</p><p>The error stack returned from a promise chain gives no clue of where the error happened. Even worse, it\u2019s misleading; the only function name it contains is callAPromise which is totally innocent of this error (the file and line number are still useful though).</p><p>However, the error stack from async/await points to the function that contains the error</p><p>This is not a huge plus when you\u2019re developing on your local environment and have the file open in an editor, but it\u2019s quite useful when you\u2019re trying to make sense of error logs coming from your production server. In such cases, knowing the error happened in makeRequest is better than knowing that the error came from a then after a then after a then \u2026</p><h2>6. Debugging</h2><p>Last but not least, a killer advantage when using async/await is that it\u2019s much easier to debug. Debugging promises has always been such a pain for 2 reasons</p><ol><li>You can\u2019t set breakpoints in arrow functions that return expressions (no body).</li></ol><p>2. If you set a breakpoint inside a .then block and use debug shortcuts like step-over, the debugger will not move to the the following .then because it only \u201csteps\u201d through synchronous code.</p><p>With async/await you don\u2019t need arrow functions as much, and you can step through await calls exactly as if they were normal synchronous calls.</p><h1>In Conclusion</h1><p>Async/await is one of the most revolutionary features that have been added to JavaScript in the past few years. It makes you realize what a syntactical mess promises are, and provides an intuitive replacement.</p><h1>Concerns</h1><p>Some valid skepticism you might have about using this feature is that it makes asynchronous code less obvious: Our eyes learned to spot asynchronous code whenever we see a callback or a .then, it will take a few weeks for your eyes to adjust to the new signs, but C# had this feature for years and people who are familiar with it know it\u2019s worth this minor, temporary inconvenience.</p><p>Follow me on twitter @imgaafar</p><a></a>", "tags": ["JavaScript", "ES6", "Asynchronous", "Nodejs", "Programming"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*41XiwBL9NXDfGtIXbc3UsQ.jpeg"], "url": "https://medium.com/hackernoon/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5", "dateCreated": "2018-01-06T08:48:50.688Z", "datePublished": "2018-01-06T08:48:50.688Z", "dateModified": "2019-05-22T09:28:57.561Z", "headline": "I\u2019m harvesting credit card numbers and passwords from your site. Here\u2019s how.", "name": "I\u2019m harvesting credit card numbers and passwords from your site. Here\u2019s how.", "description": "The following is a true story. Or maybe it\u2019s just based on a true story. Perhaps it\u2019s not true at all. It\u2019s been a frantic week of security scares \u2014 it seems like every day there\u2019s a new\u2026", "identifier": "9a8cb347c5b5", "author": {"@type": "Person", "name": "David Gilbertson", "url": "https://david-gilbertson.medium.com"}, "creator": ["David Gilbertson"], "publisher": {"@type": "Organization", "name": "HackerNoon.com", "url": "https://medium.com/hackernoon", "logo": {"@type": "ImageObject", "width": 417, "height": 60, "url": "https://miro.medium.com/max/834/1*_U3cyTY4DnQ5tvS93EBhiA.png"}}, "mainEntityOfPage": "https://medium.com/hackernoon/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5"}, "content": "<h1>I\u2019m harvesting credit card numbers and passwords from your site. Here\u2019s how.</h1><a></a><a>David Gilbertson</a><a>Jan 6, 2018</a><p>The following is a true story. Or maybe it\u2019s just based on a true story. Perhaps it\u2019s not true at all.</p><p>It\u2019s been a frantic week of security scares \u2014 it seems like every day there\u2019s a new vulnerability. It\u2019s been a real struggle for me personally to pretend like I understand what\u2019s going on when asked about it by family members.</p><p>Seeing people close to me get all flustered at the prospect of being \u201cpowned\u201d has really put things in perspective for me.</p><p>So, it is with a heavy heart that I\u2019ve decided to come clean and tell you all how I\u2019ve been stealing usernames, passwords and credit card numbers from your sites for the past few years.</p><p>The malicious code itself is very simple, it does its best work when it runs on a page that meets the following criteria:</p><ul><li>The page has a <form></li><li>an element matches input[type=\"password\"] or name=\"cardnumber\" or name=\"cvc\" etc.</li><li>The page contains words like \u201ccredit card\u201d, \u201ccheckout\u201d, \u201clogin\u201d, \u201cpassword\u201d etc.</li></ul><p>Then, when there\u2019s a blur event on a password/credit card field, or a form submit event is heard, my code:</p><ul><li>Takes data from all form fields (document.forms.forEach(\u2026)) on the page</li><li>Grabs document.cookie</li><li>It turns all that into a random looking string const payload = btoa(JSON.stringify(sensitiveUserData))</li><li>Then sends it off to `https://legit-analytics.com?q=${payload}` (not the real domain, of course)</li></ul><p>In short, if it looks like data that might be even remotely valuable to me, I send it off to my server.</p><p>Of course, when I first wrote this code, back in 2015, it was of no use at all sitting on my computer. I needed to get it out into the world. Out into your site.</p><p>In some wise words from Google:</p><p>If an attacker successfully injects any code at all, it\u2019s pretty much game over</p><p>XSS is too small scale, and really well protected against.</p><p>Chrome Extensions are too locked down.</p><p>Lucky for me, we live in an age where people install npm packages like they\u2019re popping pain killers.</p><p>So, npm was to be my distribution method. I would need to come up with some borderline-useful package that people would install without thinking \u2014 my Trojan horse.</p><p>People love pretty colours \u2014 it\u2019s what separates us from dogs \u2014 so I wrote a package that lets you log to the console in any colour.</p><a>Source</a><p>I was excited at this point \u2014 I had a compelling package \u2014 but I didn\u2019t want to wait around while people slowly discovered it and spread the word. So I set about making PRs to existing packages that added my colourful package to their dependencies.</p><p>I\u2019ve now made several hundred PRs (various user accounts, no, none of them as \u201cDavid Gilbertson\u201d) to various frontend packages and their dependencies. \u201cHey, I\u2019ve fixed issue x and also added some logging.\u201d</p><p>Look ma, I\u2019m contributing to open source!</p><p>There are a lot of sensible people out there that tell me they don\u2019t want a new dependency, but that was to be expected, it\u2019s a numbers game.</p><p>Overall, the campaign has been a big success and my colourful console code is now directly depended on by 23 packages. One of those packages is itself depended upon by a pretty widely used package \u2014 my cash cow. I won\u2019t mention any names, but you could say it\u2019s left-padding the coffers.</p><p>And this is just one package. I have 6 more on the boil.</p><p>I\u2019m now getting about 120,000 downloads a month, and I\u2019m proud to announce, my nasty code is executing daily on thousands of sites, including a handful of Alexa-top-1000 sites, sending me torrents of usernames, passwords and credit card details.</p><p>Looking back on these golden years, I can\u2019t believe that people exert so much effort messing around with cross-site scripting just to get code into a single site. It\u2019s so easy to ship malicious code to thousands of websites, with a little help from my web developer friends.</p><h1>Some objections you might have to my blatant fear mongering\u2026</h1><h2>I\u2019d notice the network requests going out!</h2><p>Where would you notice them? My code won\u2019t send anything when the DevTools are open (yes even if un-docked).</p><p>I call this the Heisenberg Manoeuvre: by trying to observe the behaviour of my code, you change the behaviour of my code.</p><p>It also stays silent when running on localhost or any IP address, or where the domain contains dev, test, qa, uat or staging (surrounded by \\b word boundaries).</p><h2>Our penetration testers would see it in their HTTP request monitoring tools!</h2><p>What hours do they work? My code doesn\u2019t send anything between 7am and 7pm weekdays. It halves my haul, but 95% reduces my chances of getting caught.</p><p>And I only need your credentials once. So after I\u2019ve sent a request for a device I make a note of it (local storage and cookies) and never send for that device again. Replication is not made easy.</p><p>Even if some studious little pen tester clears cookies and local storage constantly (on the weekends), I only send these requests intermittently (about one in seven times, lightly randomised \u2014 the ideal trouble-shooting-insanity-inducing frequency).</p><p>Also the URL looks a lot like the 300 other requests to ad networks your site makes.</p><p>Maybe you\u2019ve got an automated setup filling out payment forms 24/7 and checking for suspect network requests. Good on ya. Are you using PhantomJS, Selenium, WebDriver or friends? Sorry, they all add easily detectable properties to window so I won\u2019t be sending anything out for these setups.</p><p>The point is, just because you don\u2019t see it, doesn\u2019t mean it\u2019s not happening. It\u2019s been more than two years and as far as I know, no one has ever noticed one of my requests. Maybe it\u2019s been in your site this whole time :)</p><p>(Fun fact, when I go through all the passwords and credit card numbers I\u2019ve collected and bundle them up to be sold on the dark web, I have to do a search for my credit card numbers and usernames in case I\u2019ve captured myself. Isn\u2019t that funny!)</p><h2>I\u2019d see it in your source on GitHub!</h2><p>Your innocence warms my heart.</p><p>But I\u2019m afraid it\u2019s perfectly possible to ship one version of your code to GitHub and a different version to npm.</p><p>In my package.json I\u2019ve defined the files property to point to a lib directory that contains the minified, uglified nasty code \u2014 this is what npm publish will send to npm. But lib is in my .gitignore so it never makes its way to GitHub. This is a pretty common practice so it doesn\u2019t even look suspect if you read through these files on GitHub.</p><p>This is not an npm problem, even if I\u2019m not delivering different code to npm and GitHub, who\u2019s to say that what you see in /lib/package.min.js is the real result of minifying /src/package.js?</p><p>So no, you won\u2019t find my nasty code anywhere on GitHub.</p><h2>I read the minified source of all code in node_modules!</h2><p>OK now you\u2019re just making up objections. But maybe you\u2019re thinking you could write something clever that automatically checks code for anything suspicious.</p><p>You\u2019re still not going to find much that makes sense in my source, I don\u2019t have the word fetch or XMLHttpRequest anywhere, or the domain that I\u2019m sending to. My fetch code looks like this:</p><p>\u201cgfudi\u201d is just \u201cfetch\u201d with each letter shifted up by one. Hard core cryptography right there. self is an alias for window.</p><p>self['\\u0066\\u0065\\u0074\\u0063\\u0068'](...) is another fancy way of saying fetch(...).</p><p>The point: it is very difficult to spot shenanigans in obfuscated code, you\u2019ve got no chance.</p><p>(With all that said, I don\u2019t actually use anything as mundane as fetch, I prefer new EventSource(urlWithYourPreciousData) where possible. That way even if you\u2019re being paranoid and monitoring outbound requests by using a serviceWorker to listen to fetch events, I will slink right by. I simply don\u2019t send anything for browsers that support serviceWorker but not EventSource.)</p><h2>I have a Content Security Policy!</h2><p>Oh, do you now.</p><p>And did somebody tell you that this would prevent malicious code from sending data off to some dastardly domain? I hate to be the bearer of bad news, but the following four lines of code will glide right through even the strictest content security policy.</p><p>(In an earlier iteration of this post I said that a solid content security policy would keep you (and I quote) \u201c100% safe\u201d. Unfortunately 130k people read that before I learned the above trick. So I guess the lesson there is that you can\u2019t trust any thing or any one on the internet.)</p><p>But CSPs aren\u2019t completely unhelpful. The above only works in Chrome, and a decent CSP might block my efforts in some lesser-used browsers.</p><p>If you don\u2019t know already, a content security policy can restrict what network requests can be made from the browser. It is designed to restrict what you can bring into the browser, but can also \u2014 as a side effect \u2014 limit the ways in which data can be sent out (when I \u2018send\u2019 passwords to my server, it\u2019s just a query param on a get request).</p><p>In the event that I can\u2019t get data out using the prefetch trick, CSPs are tricky for my credit card collection corporation. And not just because they neuter my nefarious intentions.</p><p>You see, if I try to send data out from a site that has a CSP, it can alert the site owner of the failed attempt (if they\u2019ve specified a report-uri). They would eventually track this down to my code and probably call my mother and then I would be in big trouble.</p><p>Since I don\u2019t want to draw attention to myself (except when on the dance floor) I check your CSP before attempting to send something out.</p><p>To do this, I make a dummy request to the current page and read the headers.</p><p>At this point I can look for ways to get out past your CSP. The Google sign in page has a CSP that would allow me to easily send out your username and password if my code ran on that page. They don\u2019t set connect-src explicitly and also haven\u2019t set the catch-all default-src so I can send your credentials wherever I damn well please.</p><p>If you send me $10 in the mail I\u2019ll tell you if my code is running on the Google sign in page.</p><p>Amazon has no CSP at all on the page where you type your credit card number in, nor does eBay.</p><p>Twitter and PayPal have CSPs, but it\u2019s still dead easy to get your data from them. These two allow behind-the-scenes sending of data in the same way, and this is probably a sign that others allow it as well. At first glance everything looks pretty thorough, they both set the default-src catch-all like they should. But here\u2019s the kicker: that catch-all doesn\u2019t catch all. They haven\u2019t locked down form-action.</p><p>So, when I\u2019m checking your CSP (and checking it twice), if everything else is locked down but I don\u2019t see form-action in there, I just go and change the action (where the data is sent when you click \u2018sign in\u2019) on all your forms.</p><p>Boom, thanks for sending me your PayPal username and password, pal. I\u2019ll send you a thank you card with a photo of the stuff I bought with your money.</p><p>Naturally, I only do this trick once per device and bounce the user right back to the referring page where they will shrug and try again.</p><p>(Using this method, I took over Trump\u2019s Twitter account and started sending out all sorts of weird shit. As yet no one has noticed.)</p><h1>OK I am sufficiently concerned, what can I do?</h1><h2>Option 1:</h2><h2>Option 2:</h2><p>Edit: I\u2019ve detailed this in a follow-up post, Part 2: How to stop me harvesting credit card numbers and passwords from your site.</p><p>On any page that collects any data that you don\u2019t want me (or my fellow attackers) to have, don\u2019t use npm modules. Or Google Tag Manager, or ad networks, or analytics, or any code that isn\u2019t yours.</p><p>As suggested here, you might want to consider having dedicated, lightweight pages for login and credit card collection that are served up in an iFrame.</p><p>You can still have your big ol\u2019 React app with 938 npm packages for the header/footer/nav/whatever, but the part of the page where the user is typing should be in a secured iFrame and it should run only hand-crafted (and may I suggest, not-minified) JavaScript \u2014 if you want to do client-side validation.</p><p>I will soon be posting my annual report for 2017 where I declare my income from stealing credit card numbers and selling them to gangsters in cool hats. I am required by law to show which websites I skimmed the most credit cards from \u2014 maybe yours is on the list?</p><p>Since I\u2019m a classy guy, anyone on the list who has successfully blocked me from harvesting their data by January 12th will be spared the public shaming.</p><h1>A serious note</h1><p>I know that sometimes my relentless sarcasm can be difficult to unravel by people on the English-learning path (and also people in need of lightening up). So just to be clear, I have not created an npm package that steals information. This post is entirely fictional, but altogether plausible, and I hope at least a little educational.</p><p>Although this is all made up, it worries me that none of this is hard.</p><p>There\u2019s no shortage of smart, nasty people out there, and 580,000 npm packages. It seems to me that the odds are better than even that at least one of those packages has some malicious code in it, and that if it\u2019s done well, you would never even know.</p><p>And here\u2019s an interesting thought experiment: I wrote an npm package last week, a little easing function. Totally unrelated to this post and I give you my word as a gentleman that there is nothing malicious in there. How nervous would you be adding that to your site?</p><h1>Wrapping up</h1><p>So what\u2019s the point in a post like this? Is it just me pointing and saying \u201cha, you\u2019re a sucker!\u201d.</p><p>No, not at all. (Well, it was to start with, but then I realised I\u2019m a sucker too, so I changed my tune.)</p><p>My goal (as it turns out) is simply to point out that any site that includes third party code is alarmingly vulnerable, in a completely undetectable way.</p><p>As always, thanks for reading, and keep the comments and corrections coming.</p>", "tags": ["JavaScript", "Web Development", "Programming", "Cybersecurity", "Software Development"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*xhDvggXvomEZHZuTD1wGrQ.png"], "url": "https://medium.com/free-code-camp/best-programming-languages-to-learn-in-2018-ultimate-guide-bfc93e615b35", "dateCreated": "2018-01-16T20:41:46.365Z", "datePublished": "2018-01-16T20:41:46.365Z", "dateModified": "2018-07-21T18:41:46.198Z", "headline": "Here are the best programming languages to learn in 2018", "name": "Here are the best programming languages to learn in 2018", "description": "This is the definitive guide for anyone wanting to choose the right programming language career path in 2018. This is an objective and practical review of the current state, tendencies, and safe\u2026", "identifier": "bfc93e615b35", "author": {"@type": "Person", "name": "Alexander Petkov", "url": "https://medium.com/@alex.petkov"}, "creator": ["Alexander Petkov"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/best-programming-languages-to-learn-in-2018-ultimate-guide-bfc93e615b35"}, "content": "<h1>Here are the best programming languages to learn in 2018</h1><a></a><a>Alexander Petkov</a><a>Jan 16, 2018</a><p>This is the definitive guide for anyone wanting to choose the right programming language career path in 2018.</p><p>And let me be clear about something:</p><p>This is not a \u201ctop hottest languages\u201d post throwing around a bunch of names and buzzwords.</p><p>This is an objective and practical review of the current state, tendencies, and safe near-future predictions of the IT industry at the start of 2018.</p><p>It\u2019s based on statistical data from various trusted sources and is the result of a two-week period of in-depth research.</p><p>The goal of this post is to help you make an informed decision about which languages the IT market is looking for in 2018. It\u2019ll help you decide which niche is worth the time and effort to master, and which will help you start (or continue) a successful and profitable career as a software developer.</p><p>When trying to decide which programming language makes the best career path, developers typically look for these four traits:</p><ol><li>High salary</li><li>Popularity \u2014 plenty of job openings, variety</li><li>Tendency to become more in-demand in the future</li><li>Preferably easy to learn and pleasant to work with</li></ol><p>For each language outlined in the list, you\u2019ll see:</p><ol><li>A brief intro to get you familiar with the language, what types of career options it can offer, and what\u2019s cool about it</li><li>Language popularity diagrams according to TIOBE and GitHub Octoverse</li><li>Salary comparison based on data from Indeed.com and StackOverflow\u2019s 2017 survey</li><li>The tendency in demand for the last five years according to Google Trends</li><li>A short example code snippet to give you a visual idea of the language\u2019s syntax</li></ol><p>At the end, I\u2019ve included four lesser-known languages which gained rapid popularity in the past few years and are expected to be in very high demand for 2018.</p><p>Let\u2019s dive right in with the number one pick.</p><h1>1. JavaScript</h1><p>JavaScript is the most popular language according to StackOverflow\u2019s annual survey, with 62.5% of respondents claiming to use it.</p><p>It\u2019s undoubtedly the dominant language of the web and the growth of JavaScript over the past decade has been immense. Why? Just look around and count how many web-enabled devices you can see. Stack Overflow\u2019s co-founder and popular programming figure Jeff Atwood famously said:</p><p>Any application that can be written in JavaScript will eventually be written in JavaScript.</p><p>Having that in mind, it\u2019s safe to say there will be no shortage of JavaScript opportunities in 2018 and beyond.</p><p>JavaScript knowledge feeds into plenty of front-end frameworks such as Angular, React, Ember, Backbone, and others, as well as the Node.js run-time environment, which allows you to run JavaScript on the backend with high efficiency.</p><p>Three of the top four most popular frameworks for 2017 according to StackOverflow are JavaScript-based.</p><p>If you enjoy immediately seeing the results of your work in action, for example making interactive web components, JavaScript is a good idea for you. Have in mind that a career in JavaScript implicitly means you should also be comfortable with HTML and CSS, which is basically what web pages are made of.</p><p>Tools like Apache Cordova or React Native allow using JavaScript for mobile applications. It\u2019s even possible to get into game development or desktop app development with projects like Electron.</p><p>Let\u2019s see the stats behind JavaScript being the #1 pick:</p><p>JavaScript tendency in popularity for the past 5 years: Steady increase</p><p>JavaScript example code snippet:</p><h1>2. Swift</h1><p>Swift is a relatively new programming language released by Apple in 2014. This is a language for developing native iOS or macOS applications.</p><p>It is considered an improvement in terms of usability and performance compared to Objective-C \u2014 the language used for Apple\u2019s iOS and macOS operating systems.</p><p>Swift is generally favored by developers, standing at #4 in the list of most loved languages for 2017, after being #1 in 2015. Should you pick up a career with Swift, chances are you would enjoy it.</p><p>If you want to get into mobile development, you should definitely consider Swift as a high-paid career path. Generally, iOS apps have proven to be more profitable than Android apps.</p><p>Swift tendency in popularity for the past 5 years: Steep up</p><p>Swift example code snippet:</p><h1>3. Python</h1><p>Python is a general purpose language which you can find almost anywhere today. You\u2019ll find it in web applications, desktop apps, network servers, machine learning, media tools and more.</p><p>It\u2019s used by big players like NASA or Google, where the Python creator Guido van Rossum was employed for about 8 years writing mostly\u2026Python.</p><p>Python code is neat, readable, and well-structured. Proper indentation is not just for beauty here \u2014 it determines code execution.</p><p>Python-based web development frameworks like Django and Flask have been gaining more and more popularity. Also, the language is heavily equipped with quality machine learning and data analysis libraries like Scikit-learn and Pandas.</p><p>On the whole, career paths with Python are various and here to stay. It\u2019s a good choice for beginner developers, as it\u2019s high-level and easy to read and comprehend.</p><p>Python tendency in popularity for the past 5 years: Impressive</p><p>Python example code snippet:</p><h1>4. Java</h1><p>Java is arguably the most popular programming language as 90% of the Fortune 500 companies heavily use it. Its famous slogan \u201cwrite once, run anywhere\u201d captures one of the keys that makes Java so valuable \u2014 its powerful Java Virtual Machine (JVM), which makes it cross-platform compatible.</p><p>Popular career paths with Java are backend developer, big data developer, embedded systems engineer, or Android developer. Although not the most \u201ctrendy\u201d language at the moment, Java is so heavily used that we can pretty much guarantee it won\u2019t go anywhere in the next decade and beyond.</p><p>Because of this, you can be confident that there are plenty of Java job positions both in your city and remotely, which can\u2019t be said for some of the less popular languages on this list. Thus, if you are comfortable with Java, it\u2019s only a matter of time before you\u2019ll find the right place.</p><p>Java tendency in popularity for the past 5 years: Decrease</p><p>Java example code snippet:</p><h1>5. C++</h1><p>C++ is a highly efficient and flexible language, first created back in 1985. It has remained in high demand due to its performance, reliability, and variety of contexts you can use it in.</p><p>Plenty of large systems have been created and maintained successfully using C++, including the likes of Microsoft, Oracle, PayPal, and Adobe.</p><p>A career with C++ typically involves developing desktop applications, especially for performance-intensive tasks. While rather complex, getting comfortable with C++ would give you a deeper understanding of how languages work, for example by giving facilities for low-level memory manipulation.</p><p>C++ tendency in popularity for the past 5 years: Ups and downs</p><p>C++ example code snippet:</p><h1>6. Ruby</h1><p>Ruby is one of the most loved programming languages around. It\u2019s designed to be friendly and easy to use by developers, as even its own tagline is \u201ca programmer\u2019s best friend.\u201d</p><p>Ruby is a high-level language which aims to achieve a lot with few lines of clean, readable code. This sometimes takes significant effort \u201cunder the hood,\u201d which makes Ruby relatively slower in terms of efficiency compared to other popular languages \u2014 but it definitely boosts your productivity.</p><p>Well-written Ruby code almost looks like sentences written in plain English. It\u2019s a great choice for the first language to learn, as beginners typically pick it up fast and enjoy it along the way.</p><p>Ruby is mostly used for its most popular framework \u2014 Ruby on Rails. Ruby on Rails is a web framework which encapsulates all of Ruby\u2019s ideas into a powerful tool for the web. The great productivity achieved with Rails makes it a common choice for startups who aim for a running start.</p><p>A career with Ruby on Rails is definitely a great choice as the framework is \u201coptimized for programmer happiness\u201d and is also well-paid. The only major drawback of picking up a career with Ruby is that the language is not quite as popular compared to the languages mentioned above. Thus, job openings with Ruby may be limited in some locations.</p><p>Ruby tendency in popularity for the past 5 years: Decrease</p><p>Ruby example code snippet:</p><h1>7. Rust</h1><p>Rust is sponsored by Mozilla and was voted most liked by developers for a second consecutive year in StackOverflow surveys. This is a relatively new language, first appearing in 2010, which already gained remarkable popularity and is expected to improve even more in the future.</p><p>Rust is a compiled language which is often compared to C both in terms of use cases and performance. The main difference is that Rust is memory safe. One of the most common faults you could find in C code are dangling pointers, buffer overflows, or any other kind of memory errors. Rust is created with the purpose of avoiding those \u2014 the language literally makes it impossible for you to make such errors as they are caught during compilation (before the code was ever run).</p><p>For a beginner, Rust might be a bit of a struggle to pick up as it insists on various rules to achieve the memory safety. However, experienced developers love it, and it\u2019s quite possible that in the next few years Rust will be in very high demand.</p><p>As far as salary is concerned, Rust is considered well-paid, ranking second worldwide in StackOverflow\u2019s 2017 survey.</p><p>One more reason to choose Rust is that the language is being developed by a household name in IT, Mozilla.</p><p>Rust tendency in popularity for the past 5 years: Rising</p><p>Rust example code snippet:</p><h1>8. Elixir</h1><p>Elixir is another new language, first appearing in 2011, that immediately gained popularity.</p><p>Elixir was inspired by Erlang, a language developed back in the 1980s by Ericsson and stands as arguably one of the best tools for heavy concurrency. Elixir\u2019s author Jos\u00e9 Valim himself said that he liked everything about Erlang, but also saw room for improvement. The biggest drawback of Erlang for developers is the often quirky syntax and usability plus the lack of intuitive package management.</p><p>Thus, Elixir appears \u2014 combining aspects from Ruby, a highly developer-friendly language and ecosystem, with those from Erlang.</p><p>Elixir is mainly used for web development, and career options are typically well-paid but limited. The popularity of the language has been increasing year after year, so if your city has various IT companies around, Elixir developers may be highly sought after.</p><p>Salary-wise, Elixir is typically well-paid standing at third place worldwide in StackOverflow\u2019s 2017 survey.</p><p>Elixir tendency in popularity for the past 5 years: Rising</p><p>Elixir example code snippet:</p><h1>9. Scala</h1><p>Scala stands for Scalable Language, and is one of the many attempts to \u201crewrite Java\u201d while improving its drawbacks. Scala code is compiled to run on the Java Virtual Machine (JVM).</p><p>We can safely agree that Scala is already a success given the fact that big companies like LinkedIn, Twitter, and The Guardian use it in their codebases.</p><p>Scala has the reputation of being a complex language to learn for a junior developer. But those who make it past the learning curve probably enjoy a great career as open positions for Scala developers are definitely popping up more and more.</p><p>Scala ranks high in salary surveys, making the top ten worldwide and sharing first place in the US according to StackOverflow\u2019s 2017 report.</p><p>Scala tendency in popularity for the past 5 years: Rising</p><p>Scala example code snippet:</p><h1>10. R</h1><p>R is a programming language and environment used for statistics, graphic representation and data analysis. This is the #1 choice for data scientists. If you find yourself interested in this field, then R is a stable and profitable career choice for you.</p><p>R tendency in popularity for the past 5 years: Steady rise</p><p>R example code snippet:</p><p>That concludes the list of the top ten programming languages you should consider learning in 2018.</p><p>If you are looking for free courses to try out any of the above-mentioned languages, you can check out our advice on choosing from the best tutorials or even having a dedicated website browse tutorials for you.</p><p>If you have any questions about a future career as a software developer, make use of our free featured material or contact us further for a professional opinion.</p><h1>What\u2019s next?</h1><p>Choosing the right language career path is great \u2014 but usually problems start when trying to get \u201cgood enough\u201d and get hired.</p><p>Next, I\u2019ll focus on the results of my research on why many developers give up before ever getting a job. The main reason is actually quite simple.</p><a></a>", "tags": ["Programming", "JavaScript", "Software Development", "Tech", "Web Development"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*HTRqXgr7CVtRBsyTxurQew.jpeg"], "url": "https://medium.com/free-code-camp/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2", "dateCreated": "2018-04-10T20:19:19.828Z", "datePublished": "2018-04-10T20:19:19.828Z", "dateModified": "2020-12-29T22:10:05.904Z", "headline": "How to think like a programmer \u2014 lessons in problem solving", "name": "How to think like a programmer \u2014 lessons in problem solving", "description": "You probably also wondered what does it mean, exactly, to think like a programmer? And how do you do it?? Unless you have a system, this is probably how you \u201csolve\u201d problems (which is what I did when\u2026", "identifier": "d1d8bf1de7d2", "author": {"@type": "Person", "name": "Richard Reis", "url": "https://richardreeze.medium.com"}, "creator": ["Richard Reis"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2"}, "content": "<h1>How to think like a programmer \u2014 lessons in problem solving</h1><a></a><a>Richard Reis</a><a>Apr 10, 2018</a><a>Richard Reis</a><p>If you\u2019re interested in programming, you may well have seen this quote before:</p><p>\u201cEveryone in this country should learn to program a computer, because it teaches you to think.\u201d \u2014 Steve Jobs</p><p>You probably also wondered what does it mean, exactly, to think like a programmer? And how do you do it??</p><p>Essentially, it\u2019s all about a more effective way for problem solving.</p><p>In this post, my goal is to teach you that way.</p><p>By the end of it, you\u2019ll know exactly what steps to take to be a better problem-solver.</p><h2>Why is this important?</h2><p>Problem solving is the meta-skill.</p><p>We all have problems. Big and small. How we deal with them is sometimes, well\u2026pretty random.</p><p>Unless you have a system, this is probably how you \u201csolve\u201d problems (which is what I did when I started coding):</p><ol><li>Try a solution.</li><li>If that doesn\u2019t work, try another one.</li><li>If that doesn\u2019t work, repeat step 2 until you luck out.</li></ol><p>Look, sometimes you luck out. But that is the worst way to solve problems! And it\u2019s a huge, huge waste of time.</p><p>The best way involves a) having a framework and b) practicing it.</p><p>\u201cAlmost all employers prioritize problem-solving skills first.</p><p>Problem-solving skills are almost unanimously the most important qualification that employers look for\u2026.more than programming languages proficiency, debugging, and system design.</p><p>Demonstrating computational thinking or the ability to break down large, complex problems is just as valuable (if not more so) than the baseline technical skills required for a job.\u201d \u2014 Hacker Rank (2018 Developer Skills Report)</p><h2>Have a framework</h2><p>To find the right framework, I followed the advice in Tim Ferriss\u2019 book on learning, \u201cThe 4-Hour Chef\u201d.</p><p>It led me to interview two really impressive people: C. Jordan Ball (ranked 1st or 2nd out of 65,000+ users on Coderbyte), and V. Anton Spraul (author of the book \u201cThink Like a Programmer: An Introduction to Creative Problem Solving\u201d).</p><p>I asked them the same questions, and guess what? Their answers were pretty similar!</p><p>Soon, you too will know them.</p><p>Sidenote: this doesn\u2019t mean they did everything the same way. Everyone is different. You\u2019ll be different. But if you start with principles we all agree are good, you\u2019ll get a lot further a lot quicker.</p><p>\u201cThe biggest mistake I see new programmers make is focusing on learning syntax instead of learning how to solve problems.\u201d \u2014 V. Anton Spraul</p><p>So, what should you do when you encounter a new problem?</p><p>Here are the steps:</p><h2>1. Understand</h2><p>Know exactly what is being asked. Most hard problems are hard because you don\u2019t understand them (hence why this is the first step).</p><p>How to know when you understand a problem? When you can explain it in plain English.</p><p>Do you remember being stuck on a problem, you start explaining it, and you instantly see holes in the logic you didn\u2019t see before?</p><p>Most programmers know this feeling.</p><p>This is why you should write down your problem, doodle a diagram, or tell someone else about it (or thing\u2026 some people use a rubber duck).</p><p>\u201cIf you can\u2019t explain something in simple terms, you don\u2019t understand it.\u201d \u2014 Richard Feynman</p><h2>2. Plan</h2><p>Don\u2019t dive right into solving without a plan (and somehow hope you can muddle your way through). Plan your solution!</p><p>Nothing can help you if you can\u2019t write down the exact steps.</p><p>In programming, this means don\u2019t start hacking straight away. Give your brain time to analyze the problem and process the information.</p><p>To get a good plan, answer this question:</p><p>\u201cGiven input X, what are the steps necessary to return output Y?\u201d</p><p>Sidenote: Programmers have a great tool to help them with this\u2026 Comments!</p><h2>3. Divide</h2><p>Pay attention. This is the most important step of all.</p><p>Do not try to solve one big problem. You will cry.</p><p>Instead, break it into sub-problems. These sub-problems are much easier to solve.</p><p>Then, solve each sub-problem one by one. Begin with the simplest. Simplest means you know the answer (or are closer to that answer).</p><p>After that, simplest means this sub-problem being solved doesn\u2019t depend on others being solved.</p><p>Once you solved every sub-problem, connect the dots.</p><p>Connecting all your \u201csub-solutions\u201d will give you the solution to the original problem. Congratulations!</p><p>This technique is a cornerstone of problem-solving. Remember it (read this step again, if you must).</p><p>\u201cIf I could teach every beginning programmer one problem-solving skill, it would be the \u2018reduce the problem technique.\u2019</p><p>For example, suppose you\u2019re a new programmer and you\u2019re asked to write a program that reads ten numbers and figures out which number is the third highest. For a brand-new programmer, that can be a tough assignment, even though it only requires basic programming syntax.</p><p>If you\u2019re stuck, you should reduce the problem to something simpler. Instead of the third-highest number, what about finding the highest overall? Still too tough? What about finding the largest of just three numbers? Or the larger of two?</p><p>Reduce the problem to the point where you know how to solve it and write the solution. Then expand the problem slightly and rewrite the solution to match, and keep going until you are back where you started.\u201d \u2014 V. Anton Spraul</p><h2>4. Stuck?</h2><p>By now, you\u2019re probably sitting there thinking \u201cHey Richard... That\u2019s cool and all, but what if I\u2019m stuck and can\u2019t even solve a sub-problem??\u201d</p><p>First off, take a deep breath. Second, that\u2019s fair.</p><p>Don\u2019t worry though, friend. This happens to everyone!</p><p>The difference is the best programmers/problem-solvers are more curious about bugs/errors than irritated.</p><p>In fact, here are three things to try when facing a whammy:</p><ul><li>Debug: Go step by step through your solution trying to find where you went wrong. Programmers call this debugging (in fact, this is all a debugger does).</li></ul><p>\u201cThe art of debugging is figuring out what you really told your program to do rather than what you thought you told it to do.\u201d\u201d \u2014 Andrew Singer</p><ul><li>Reassess: Take a step back. Look at the problem from another perspective. Is there anything that can be abstracted to a more general approach?</li></ul><p>\u201cSometimes we get so lost in the details of a problem that we overlook general principles that would solve the problem at a more general level. [\u2026]</p><p>The classic example of this, of course, is the summation of a long list of consecutive integers, 1 + 2 + 3 + \u2026 + n, which a very young Gauss quickly recognized was simply n(n+1)/2, thus avoiding the effort of having to do the addition.\u201d \u2014 C. Jordan Ball</p><p>Sidenote: Another way of reassessing is starting anew. Delete everything and begin again with fresh eyes. I\u2019m serious. You\u2019ll be dumbfounded at how effective this is.</p><ul><li>Research: Ahh, good ol\u2019 Google. You read that right. No matter what problem you have, someone has probably solved it. Find that person/ solution. In fact, do this even if you solved the problem! (You can learn a lot from other people\u2019s solutions).</li></ul><p>Caveat: Don\u2019t look for a solution to the big problem. Only look for solutions to sub-problems. Why? Because unless you struggle (even a little bit), you won\u2019t learn anything. If you don\u2019t learn anything, you wasted your time.</p><h2>Practice</h2><p>Don\u2019t expect to be great after just one week. If you want to be a good problem-solver, solve a lot of problems!</p><p>Practice. Practice. Practice. It\u2019ll only be a matter of time before you recognize that \u201cthis problem could easily be solved with <insert concept here>.\u201d</p><p>How to practice? There are options out the wazoo!</p><p>Chess puzzles, math problems, Sudoku, Go, Monopoly, video-games, cryptokitties, bla\u2026 bla\u2026 bla\u2026.</p><p>In fact, a common pattern amongst successful people is their habit of practicing \u201cmicro problem-solving.\u201d For example, Peter Thiel plays chess, and Elon Musk plays video-games.</p><p>\u201cByron Reeves said \u2018If you want to see what business leadership may look like in three to five years, look at what\u2019s happening in online games.\u2019</p><p>Fast-forward to today. Elon [Musk], Reid [Hoffman], Mark Zuckerberg and many others say that games have been foundational to their success in building their companies.\u201d \u2014 Mary Meeker (2017 internet trends report)</p><p>Does this mean you should just play video-games? Not at all.</p><p>But what are video-games all about? That\u2019s right, problem-solving!</p><p>So, what you should do is find an outlet to practice. Something that allows you to solve many micro-problems (ideally, something you enjoy).</p><p>For example, I enjoy coding challenges. Every day, I try to solve at least one challenge (usually on Coderbyte).</p><p>Like I said, all problems share similar patterns.</p><h2>Conclusion</h2><p>That\u2019s all folks!</p><p>Now, you know better what it means to \u201cthink like a programmer.\u201d</p><p>You also know that problem-solving is an incredible skill to cultivate (the meta-skill).</p><p>As if that wasn\u2019t enough, notice how you also know what to do to practice your problem-solving skills!</p><p>Phew\u2026 Pretty cool right?</p><p>Finally, I wish you encounter many problems.</p><p>You read that right. At least now you know how to solve them! (also, you\u2019ll learn that with every solution, you improve).</p><p>\u201cJust when you think you\u2019ve successfully navigated one obstacle, another emerges. But that\u2019s what keeps life interesting.[\u2026]</p><p>Life is a process of breaking through these impediments \u2014 a series of fortified lines that we must break through.</p><p>Each time, you\u2019ll learn something.</p><p>Each time, you\u2019ll develop strength, wisdom, and perspective.</p><p>Each time, a little more of the competition falls away. Until all that is left is you: the best version of you.\u201d \u2014 Ryan Holiday (The Obstacle is the Way)</p><p>Now, go solve some problems!</p><p>And best of luck \ud83d\ude42</p><p>Special thanks to C. Jordan Ball and V. Anton Spraul. All the good advice here came from them.</p><p>Also, all the programming knowledge I\u2019ve acquired in such a short time wouldn\u2019t have happened without Lambda School. Can\u2019t thank/ recommend them enough.</p><p>Bonus: Read this article in German.</p><a>@richardreeze</a><a>Most Recommended Books</a>", "tags": ["Programming", "Life Lessons", "Tech", "Web Development", "Self Improvement"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*8cpJBanzu5koQqzkBirvsQ.png"], "url": "https://medium.com/free-code-camp/understanding-redux-the-worlds-easiest-guide-to-beginning-redux-c695f45546f6", "dateCreated": "2018-06-01T14:36:35.961Z", "datePublished": "2018-06-01T14:36:35.961Z", "dateModified": "2019-04-22T18:06:51.582Z", "headline": "Understanding Redux: The World\u2019s Easiest Guide to Beginning Redux", "name": "Understanding Redux: The World\u2019s Easiest Guide to Beginning Redux", "description": "This is a comprehensive (but simplified) guide for absolute Redux beginners, or any who wants to re-evaluate their understanding of the fundamental Redux concepts. For an expanded Table of Contents\u2026", "identifier": "c695f45546f6", "author": {"@type": "Person", "name": "Ohans Emmanuel", "url": "https://medium.com/@ohansemmanuel"}, "creator": ["Ohans Emmanuel"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/understanding-redux-the-worlds-easiest-guide-to-beginning-redux-c695f45546f6"}, "content": "<h1>Understanding Redux: The World\u2019s Easiest Guide to Beginning Redux</h1><a></a><a>Ohans Emmanuel</a><a>Jun 1, 2018</a><p>This is a comprehensive (but simplified) guide for absolute Redux beginners, or any who wants to re-evaluate their understanding of the fundamental Redux concepts.</p><p>For an expanded Table of Contents please visit this link, & for more advanced Redux concepts check out my Redux books.</p><h1>Introduction</h1><p>This article (which is actually a book) is the missing piece if you\u2019ve long searched for how to master Redux .</p><p>Before getting started, I should tell you that the book is first and foremost about me. Yes, me. My struggles with learning Redux, and seeking a better way to teach it.</p><p>A few years ago, I had just learned React. I was excited about it, but again, everyone else seemed to be talking about something else called Redux.</p><h1>Gosh! Does the learning streak ever end?</h1><p>As an Engineer committed to my personal development, I wanted to be in the know. I didn\u2019t want to be left out. So, I began to learn Redux.</p><p>I checked the Redux documentation. It was pretty good, actually! For some reason, it just didn\u2019t entirely click for me. I checked a bunch of YouTube videos as well. The ones I found just seemed rushed and not detailed. Poor me.</p><p>Honestly, I don\u2019t think the video tutorials I watched were bad. There was just something missing. An easy guide that was well thought-out and written for a sane person like me, and not for some imaginary humanoid.</p><p>It appeared I wasn\u2019t alone.</p><p>A good friend of mine, someone I was mentoring at the time, had just completed a React Developer Certification course where he paid big bucks (over $300) to earn a certificate.</p><p>When I asked for his honest feedback on the program, his words were along the lines of:</p><p>The course was pretty good, but I still don\u2019t think Redux was well explained to a beginner like me. It wasn\u2019t explained that well.</p><p>You see, there are many more like my friend, all struggling to understand Redux. They perhaps use Redux, but they can\u2019t say they truly understand how it works.</p><p>I decided to find a solution. I was going to understand Redux deeply, and find a clearer way to teach it.</p><p>What you are about to read took months of study, and then some more time to write and build out the example projects, all while keeping a daily job and other serious commitments.</p><p>But you know what?</p><p>I\u2019m super excited to share this with you!</p><p>If you\u2019ve searched for a Redux guide that won\u2019t talk over your head, this is it. Look no further.</p><p>I have taken into consideration my struggles and those of many others I know. I\u2019ll make sure to teach you the important stuff \u2014 and do so without getting you confused.</p><p>Now, that\u2019s a promise.</p><h1>My Approach to Teaching Redux</h1><p>The real problem with teaching Redux \u2014 especially for beginners \u2014 isn\u2019t the complexity of the Redux library itself.</p><p>No. I don\u2019t think that is it. It is just a tiny 2kb library \u2014 including dependencies.</p><p>Take a look at the Redux community as a beginner, and you\u2019re going to lose your mind fast. There\u2019s not just Redux, but a whole lot of other supposed \u201cassociated libraries\u201d needed to build real world apps.</p><p>If you\u2019ve spent some time doing a bit of research, then you\u2019ve come across them already. There\u2019s Redux, React-Redux, Redux-thunk, Redux-saga, Redux-promise, Reselect, Recompose and many more!</p><p>As if that\u2019s not enough, there\u2019s also some Routing, Authentication, Server side rendering, Testing, and Bundling sprinkled on it \u2014 all at once.</p><p>Gosh! That is overwhelming.</p><p>The \u201cRedux tutorial\u201d often isn\u2019t so much about Redux, but all the other stuff that comes with it.</p><p>There\u2019s got to be a more sane approach tailored towards beginners. If you\u2019re a humanoid developer, you certainly wouldn\u2019t have issues with this. Guess what? Most of us are actually humans.</p><p>So, here\u2019s my approach to teaching Redux.</p><p>Forget about all the extra stuff for a bit, and let\u2019s just do Redux. Yeah!</p><p>I will only introduce the barest minimum you need for now. There will be no React-router, Redux-form, Reselect, Ajax, Webpack, Authentication, Testing, none of those \u2014 for now!</p><p>And guess what? That\u2019s how you learned to do some of the important life \u201cskills\u201d you\u2019ve got.</p><p>How did you learn to walk?</p><p>Did you begin to run in one day? No!</p><p>Let me walk you through a sane approach to learning Redux \u2014 without the hassles.</p><p>Sit tight.</p><h2>\u201cA rising tide lifts All boats\u201d</h2><p>Once you get the hang of how the basics of Redux works (the rising tide), everything else will be easier to reason about (it lifts all boats).</p><h1>A Note on Redux\u2019s Learning Curve</h1><p>Redux does have a learning curve. I am not saying otherwise.</p><p>Learning to walk also had a learning curve to it. However, with a systematic approach to learning, you overcame that.</p><p>You did fall a few times, but that was okay. Someone was always around to hold you up, and help you get on your feet.</p><p>Well, I\u2019m hoping to be that person for you \u2014 as you learn Redux with me.</p><h1>What You will Learn</h1><p>After all is said and done, you\u2019ll come to see that Redux isn\u2019t as scary as it seems from the outside.</p><p>The underlying principles are so darn easy!</p><p>First off, I\u2019ll teach you the fundamentals of Redux in plain, easy to approach language.</p><p>Then, we\u2019ll build a few simple applications. Starting with a basic Hello World app.</p><p>But those won\u2019t suffice.</p><p>I\u2019ll include exercises and problems I think you should tackle as well.</p><p>Effective learning isn\u2019t about just reading and listening. Effective learning is mostly about practice!</p><p>Think of these as homework, but without the angry teacher. While practicing the exercises, you can Tweet me with the hashtag #UnderstandingRedux and I\u2019ll definitely have a look!</p><p>No angry teachers, eh?</p><p>Exercises are good, but you also need to watch me build a bigger application. This is where we wrap things up by building Skypey, a sweet messaging app kinda like a Skype clone.</p><p>Skypey\u2019s got features such as editing messages, deleting messages, and sending messages to multiple contacts.</p><p>Hurray!</p><p>If that didn\u2019t get you excited, I don\u2019t know what will. I\u2019m super excited to show you these!</p><h1>Prerequisite</h1><p>The only prerequisite is that you already know React. If you don\u2019t, Dave Ceddia\u2019s Pure React is my personal recommendation if you have some $$ to spare. I\u2019m no affiliate. It\u2019s just a good resource.</p><h1>Download PDF & Epub for Offline Reading</h1><p>The video below highlights the process involved in getting your PDF and Epub versions of the book.</p><p>The crux is this:</p><ol><li>Visit the book sales page .</li><li>Use the coupon FREECODECAMP to get 100% off the price so that you get a $29 book for $0.</li><li>If you want to say thanks, please recommend this article \u2014 click and hold the Medium clap icon. +50.</li></ol><p>Now, let\u2019s get started.</p><h1>Chapter 1 : Getting to know Redux</h1><p>Some years back, developing front-end applications seemed like a joke to many. These days, the increasing complexity of building decent front-end applications is almost overwhelming.</p><p>It seems that to meet the pressing requirements of the ever-demanding user, the gentle cute cat has overgrown the confines of a home. It\u2019s become a fearless lion with 3-inch claws and a mouth that opens wide enough to fit a human head.</p><p>Yeah, that\u2019s what modern front-end development feels like these days.</p><p>Modern frameworks like Angular, React and Vue have done a great job at taming this \u201cbeast\u201d. Likewise, modern philosophies such as those enforced by Redux also exist to give this \u201cbeast\u201d a chill pill.</p><p>Follow along as we have a look at these philosophies.</p><h1>What is Redux?</h1><p>The official documentation for Redux reads:</p><p>Redux is a predictable state container for JavaScript apps.</p><p>Those 9 words felt like 90 incomplete phrases when I first read them. I just didn\u2019t get it. You most likely don\u2019t, either.</p><p>Don\u2019t sweat it. I\u2019ll go over that in a bit, and as you use Redux more, that sentence will get clearer.</p><p>On the bright side, if you read the documentation a little longer, you\u2019ll find the more explanatory stuff somewhere in there.</p><p>It reads:</p><p>It helps you write applications that behave consistently\u2026</p><p>You see that?</p><p>In lay-man\u2019s terms, that\u2019s saying, \u201cit helps you tame the beast\u201d. Metaphorically.</p><p>Redux takes away some of the hassles faced with state management in large applications. It provides you with a great developer experience, and makes sure that the testability of your app isn\u2019t sacrificed for any of those.</p><p>As you develop React applications, you may find that keeping all your state in a top-level component is no longer sufficient for you.</p><p>You may also have a lot of data changing in your application over time.</p><p>Redux helps solve these kinds of problems. Mind you, it isn\u2019t the only solution out there.</p><h1>Why use Redux?</h1><p>As you already know, questions like \u201cWhy should you use A over B?\u201d boil down to your personal preferences.</p><p>I have built apps in production that don\u2019t use Redux. I\u2019m sure that many have done the same.</p><p>For me, I was worried about introducing an extra layer of complexity for my team members. In case you\u2019re wondering, I don\u2019t regret the decision at all.</p><p>Redux\u2019s author, Dan Abamov, also warns about the danger of introducing Redux too early into your application. You may not like Redux, and that is fair enough. I have friends who don\u2019t.</p><p>That being said, there are still some very decent reasons to learn Redux.</p><p>For example, in larger apps with a lot of moving pieces, state management becomes a huge concern. Redux ticks that off quite well without performance concerns or trading off testability.</p><p>One other reason a lot of developers love Redux is the developer experience that comes with it. A lot of other tools have begun to do similar things, but big credits to Redux.</p><p>Some of the nice things you get with using Redux include logging, hot reloading, time travel, universal apps, record and replay \u2014 all without doing so much on your end as the developer. These things will likely sound fancy until you use them and see for yourself.</p><p>Dan\u2019s talk called Hot Reloading with Time Travel will give you a good sense of how these work.</p><p>Also, Mark Ericsson, one of Redux\u2019s maintainers, says that over 60% of React apps in production use Redux. That\u2019s a lot!</p><p>Consequently, and this is just my thought, a lot of engineers like to show potential employers that they can maintain larger production codebases built in React and Redux, so they learn Redux.</p><p>If you want some more reasons to use Redux, Dan, the Redux creator, has a few more reasons highlighted in his article on Medium.</p><p>If you don\u2019t consider yourself a senior engineer, I advise you to learn Redux \u2014 largely because of some of the principles it teaches. You\u2019ll learn new ways of doing common things, and this will likely make you a better engineer.</p><p>Everyone has different reasons for picking up different technologies. In the end, the call is yours. But it definitely doesn\u2019t hurt to add Redux to your skill set.</p><h1>Explaining Redux to a 5 year Old</h1><p>This section of the book is really important. The explanation here will be referenced through out the book. So get ready.</p><p>Since a 5-year old doesn\u2019t have the time for technical jargon, I\u2019ll keep this very simple but relevant to our purpose of learning Redux.</p><p>So, here we go!</p><p>Let\u2019s consider an event you\u2019re likely familiar with \u2014 going to the bank to withdraw cash. Even if you don\u2019t do this often, you\u2019re likely aware of what the process looks like.</p><p>You wake up one morning, and head to the bank as quickly as possible. While going to the bank there\u2019s just one intention / action you\u2019ve got in mind: to WITHDRAW_MONEY.</p><p>You want to withdraw money from the bank.</p><p>Here\u2019s where things get interesting.</p><p>When you get into the bank, you then go straight to the Cashier to make your request known.</p><p>Wait, you went to the Cashier?</p><p>Why didn\u2019t you just go into the bank vault to get your money?</p><p>After all, it\u2019s your hard earned money.</p><p>Well, like you already know, things don\u2019t work that way. Yes, the bank has money in the vault, but you have to talk to the Cashier to help you follow a due process for withdrawing your own money.</p><p>The Cashier, from their computer, then enters some commands and delivers your cash to you. Easy-peasy.</p><p>Now, how does Redux fit into this story?</p><p>We\u2019ll get to more details soon, but first, the terminology.</p><p>1. The Bank Vault is to the bank what the Redux Store is to Redux.</p><p>The bank vault keeps the money in the bank, right?</p><p>Well, within your application, you don\u2019t spend money. Instead, the state of your application is like the money you spend. The entire user interface of your application is a function of your state.</p><p>Just like the bank vault keeps your money safe in the bank, the state of your application is kept safe by something called a store. So, the store keeps your \u201cmoney\u201d or state intact.</p><p>Uh, you need to remember this, okay?</p><p>The Redux Store can be likened to the Bank Vault. It holds the state of your application \u2014 and keeps it safe.</p><p>This leads to the first Redux principle:</p><p>Have a single source of truth: The state of your whole application is stored in an object tree within a single Redux store.</p><p>Don\u2019t let the words confuse you.</p><p>In simple terms, with Redux, it is is advisable to store your application state in a single object managed by the Redux store. It\u2019s like having one vaultas opposed to littering money everywhere along the bank hall.</p><p>2. Go to the bank with an action in mind.</p><p>If you\u2019re going to get any money from the bank, you\u2019re going to have to go in with some intent or action to withdraw money.</p><p>If you just walk into the bank and roam about, no one\u2019s going to just give you money. You may even end up been thrown out by the security. Sad stuff.</p><p>The same may be said for Redux.</p><p>Write as much code as you want, but if you want to update the state of your Redux application (like you do with setState in React), you need to let Redux know about that with an action.</p><p>In the same way you follow a due process to withdraw your own money from the bank, Redux also accounts for a due process to change/update the state of your application.</p><p>Now, this leads to Redux principle #2.</p><p>State is read-only:</p><p>The only way to change the state is to emit an action, an object describing what happened.</p><p>What does that mean in plain language?</p><p>When you walk to the bank, you go there with a clear action in mind. In this example, you want to withdraw some money.</p><p>If we chose to represent that process in a simple Redux application, your action to the bank may be represented by an object.</p><p>One that looks like this:</p><p>In the context of a Redux application, this object is called an action! It always has a type field that describes the action you want to perform. In this case, it is WITHDRAW_MONEY.</p><p>Whenever you need to change/update the state of your Redux application, you need to dispatch an action.</p><p>Don\u2019t stress over how to do this yet. I\u2019m only laying the foundations here. We\u2019ll delve into lots of examples soon.</p><p>3. The Cashier is to the bank what the reducer is to Redux.</p><p>Alright, take a step back.</p><p>Remember that in the story above, you couldn\u2019t just go straight into the bank vault to retrieve your money from the bank. No. You had to see the Cashier first.</p><p>Well, you had an action in mind, but you had to convey that action to someone \u2014 the Cashier \u2014 who in turn communicated (in whatever way they did) with the vault that holds all of the bank\u2019s money.</p><p>The same may be said for Redux.</p><p>Like you made your action known to the Cashier, you have to do the same in your Redux application. If you want to update the state of your application, you convey your action to the reducer \u2014 our own Cashier.</p><p>This process is mostly called dispatching an action.</p><p>Dispatch is just an English word. In this example, and in the Redux world, it is used to mean sending off the action to the reducers.</p><p>The reducer knows what to do. In this example, it will take your action to WITHDRAW_MONEY and ensure that you get your money.</p><p>In Redux terms, the money you spend is your state. So, your reducer knows what to do, and it always returns your new state.</p><p>Hmmm. That wasn\u2019t so hard to grasp, right?</p><p>And this leads to the last Redux principle:</p><p>To specify how the state tree is transformed by actions, you write pure reducers.</p><p>As we proceed, I\u2019ll explain what a \u201cpure\u201d reducer means. For now, what\u2019s important is to understand that, to update the state of your application (like you do with setState in React,) your actions must always be sent off (dispatched) to the reducers to get your new state.</p><p>With this analogy, you should now have an idea of what the most important Redux actors are: the store, the reducer and an action.</p><p>These three actors are pivotal to any Redux application. Once you understand how they work, the bulk of the deed is done.</p><h1>Chapter 2: Your First Redux Application</h1><p>We learn by example and by direct experience because there are real limits to the adequacy of verbal instruction.</p><p>Malcom Gladwell</p><p>Even though I have spent ample time explaining the Redux principles in a way you won\u2019t forget, verbal instructions have their limits.</p><p>To deepen your understanding of the principles, I\u2019ll show you an example. Your first Redux application, if you want to call it that.</p><p>My approach to teaching is to introduce examples of increasing difficulty. So, for starters, this example is focused on refactoring a simple pure React app to use Redux.</p><p>The aim here is to understand how to introduce Redux in a simple React project, and deepen your understanding of the fundamental Redux concepts too.</p><p>Ready?</p><p>Below is the trivial \u201cHello World\u201d React app we will be working with.</p><p>Don\u2019t laugh it off.</p><p>You\u2019ll learn to flex your Redux muscles from a \u201cknown\u201d concept such as React, to the \u201cunknown\u201d Redux.</p><h1>The Structure of the React Hello World Application</h1><p>The React app we\u2019ll be working with has been bootstrapped with create-react-app. Thus, the structure of the app is one you\u2019re already used to.</p><p>You may grab the repo from Github if you want to follow along \u2014 which I recommend.</p><p>There\u2019s an index.js entry file that renders an <App /> component to the DOM.</p><p>The main App component is comprised of a certain <HelloWorld /> component.</p><p>This <HelloWorld /> component takes in a tech prop, and this prop is responsible for the particular technology displayed to the user.</p><p>For example, <HelloWorld tech=\"React\" /> will yield the following:</p><p>Also, a <HelloWorld tech=\"Redux\" /> will yield the following.</p><p>Now, you get the gist.</p><p>Here\u2019s what the App component looks like:</p><p>src/App.js</p><p>Have a good look at the state object.</p><p>There\u2019s just one field, tech, in the state object and it is passed down as prop into the HelloWorld component as shown below:</p><p>Don\u2019t worry about the implementation of the HelloWorld component \u2014 yet. It just takes in a tech prop and applies some fancy CSS. That\u2019s all.</p><p>Since this is focused mainly on Redux, I\u2019ll skip the details of the styling.</p><p>So, here\u2019s the challenge.</p><p>How do we refactor our App to use Redux ?</p><p>How do we take away the state object and have it entirely managed by Redux? Remember that Redux is the state manager for your app.</p><p>Let\u2019s begin to answer these questions in the next section.</p><h1>Revisiting your Knowledge of Redux</h1><p>Remember the quote from the official docs ?</p><p>Redux is a predictable state container for JavaScript apps.</p><p>One key phrase in the above sentence is state container.</p><p>Technically, you want the state of your application to be managed by Redux.</p><p>This is what makes Redux a state container.</p><p>Your React component state still exists. Redux doesn\u2019t take it away.</p><p>However, Redux will efficiently manage your overall application state. Like a bank vault, it\u2019s got a store to do that.</p><p>For the simple <App/> component we\u2019ve got here, the state object is simple.</p><p>Here it is:</p><p>We need to take this out of the <App /> component state, and have it managed by Redux.</p><p>From my earlier explanation, you should remember the analogy between the Bank Vault and the Redux Store. The Bank Vault keeps money, the Redux store keeps the application state object.</p><p>So, what is the first step to refactoring the <App /> component to use Redux?</p><p>Yeah, you got that right.</p><p>Remove the component state from within <App />.</p><p>The Redux store will be responsible for managing the App\u2019s state. With that being said, we need to remove the current state object from App/>.</p><p>The solution above is incomplete, but right now, <App/> has no state.</p><p>Please install Redux by running yarn add redux from the command line interface (CLI). We need the redux package to do anything right.</p><h1>Creating a Redux Store</h1><p>If the <App /> won\u2019t manage it\u2019s state, then we have to create a Redux Store to manage our application state.</p><p>For a Bank Vault, a couple mechanical engineers were probably hired to create a secure money-keeping facility.</p><p>To create a manageable state-keeping facility for our application, we don\u2019t need mechanical engineers. We\u2019ll do so programmatically using some of the APIs Redux avails to us.</p><p>Here\u2019s what the code to create a Redux store looks like:</p><p>First we import the createStore factory function from Redux. Then we invoke the function, createStore() to create the store.</p><p>Now, the createStore function takes in a few arguments. The first is a reducer.</p><p>So, a more complete store creation would be represented like this: createStore(reducer)</p><p>Now, let me explain why we\u2019ve got a reducer in there.</p><h1>The Store and Reducer Relationship</h1><p>Back to the bank analogy.</p><p>When you go to the bank to make a withdrawal, you meet with the Cashier. After you make your WITHDRAW_MONEY intent/action known to the Cashier, they do not just hand you the requested money.</p><p>No.</p><p>The Cashier first confirms that you have enough money in your account to perform the withdrawal transaction you seek.</p><p>The Cashier first makes sure you have the money you say you do.</p><p>From the computer, they can see all that \u2014 kind of communicating with the Vault, since the Vault keeps all the money in the bank.</p><p>In a nutshell, the Cashier and Vault are always in sync. Great buddies!</p><p>The same may be said for a Redux STORE (our own Vault,) and the Redux REDUCER (our own Cashier)</p><p>The Store and the Reducer are great buddies. Always in sync.</p><p>Why?</p><p>The REDUCER always \u201ctalks\u201d to the STORE. Just like the Cashier stays in sync with the Vault.</p><p>This explains why the creation of the store needs to be invoked with a Reducer, and that is mandatory. The Reducer is the only mandatory argument passed into createStore()</p><p>In the following section we will have a brief look at Reducers and then create a STORE by passing the REDUCER into the createStore factory function.</p><h1>The Reducer</h1><p>We will go into greater details pretty soon, but I\u2019ll keep this short for now.</p><p>When you hear the word, reducer, what comes to your mind?</p><p>Reduce?</p><p>Yeah, that\u2019s what I thought.</p><p>It sounds like reduce.</p><p>Well, according to the Redux official docs:</p><p>Reducers are the most important concept in Redux.</p><p>Our Cashier is a pretty important person, huh?</p><p>So, what\u2019s the deal with the Reducer. What does it do?</p><p>In more technical terms, a reducer is also called a reducing function. You may not have noticed, but you probably already use a reducer \u2014 if you\u2019re conversant with the Array.reduce() method.</p><p>Here\u2019s a quick refresher.</p><p>Consider the code below.</p><p>It is a popular way to get the sum of values in a JavaScript Array:</p><p>Under the hood, the function passed into arr.reduce is called a reducer.</p><p>In this example, the reducer takes in two values, an accumulator and a currentValue , where x is the accumulator and y is the currentValue.</p><p>In the same manner, the Redux Reducer is just a function. A function that takes in two parameters. The first being the STATE of the app, and the other the ACTION .</p><p>Oh my gosh! But where does the STATE and ACTION passed into the REDUCER come from?</p><p>When I was learning Redux, I asked myself this question a few times.</p><p>First, take a look at the Array.reduce() example again:</p><p>The Array.reduce method is responsible for passing in the needed arguments, x and y into the function argument, the reducer . So, the arguments didn\u2019t come out of thin air.</p><p>The same may be said for Redux.</p><p>The Redux reducer is also passed into a certain method. Guess what is it?</p><p>Here you go!</p><p>The createStore factory function. There\u2019s a little more involved in the process as you\u2019ll soon see.</p><p>Like Array.reduce(), createStore() is responsible for passing the arguments into the reducer.</p><p>If you aren\u2019t scared of technical stuff, here\u2019s the stripped down version of the implementation of createStore within the Redux source code.</p><p>Don\u2019t beat yourself up if you don\u2019t get the code above. What I really want to point out is within the dispatch function.</p><p>Notice how the reducer is called with state and action</p><p>With all that being said, the most minimal code for creating a Redux store is this:</p><h1>Getting back to the Refactoring Process</h1><p>Let\u2019s get back to refactoring the \u201cHello World\u201d React application to use Redux.</p><p>If I lost you at any point in the previous section, please read the section just one more time and I\u2019m sure it\u2019ll sink in. Better still, you can ask me a question.</p><p>Okay so here\u2019s all the code we have at this point:</p><p>Makes sense?</p><p>You may have noticed a problem with this code. See Line 4.</p><p>The reducer function passed into createStore doesn\u2019t exist yet.</p><p>Now we need to write one. The reducer is just a function, remember?</p><p>Create a new directory called reducers and create an index.js file in there. Essentially, our reducer function will be in the path src/reducers/index.js .</p><p>First export a simple function in this file:</p><p>Remember, that the reducer takes in two arguments \u2014 as established earlier. Right now, we\u2019ll concern ourselves with the first argument, STATE</p><p>Put that into the function, and we have this:</p><p>Not bad.</p><p>A reducer always returns something. In the initial Array.reduce()reducer example, we returned the sum of the accumulator and current value.</p><p>For a Redux reducer, you always return the new state of your application.</p><p>Let me explain.</p><p>After you walk into the bank and make a successful withdrawal, the current amount of money held in the bank\u2019s vault for you is no longer the same. Now, if you withdrew $200, you are now short $200. Your account balance is down $200.</p><p>Again, the Cashier and Vault remain in sync on how much you now have.</p><p>Just like the Cashier, this is exactly how the reducer works.</p><p>Like the Cashier, the reducer always returns the new state of your application. Just in case something has changed. We don\u2019t want to issue the same bank balance even though a withdrawal action was performed.</p><p>We\u2019ll get to the internals of how to change/update the state later on. For now, blind trust will have to suffice.</p><p>Now, back to the problem at hand.</p><p>Since we aren\u2019t concerned about changing/updating the state at this point, we will keep new statebeing returned as the same state passed in.</p><p>Here\u2019s the representation of this within the reducer:</p><p>If you go to the bank without performing an action, your bank balance remains the same, right?</p><p>Since we aren\u2019t performing any ACTION or even passing that into the reducer yet, we will just return the same state.</p><h1>The Second createStore Argument</h1><p>When you visit the Cashier in the bank, if you asked them for your account balance, they\u2019ll look it up and tell it to you.</p><p>But how?</p><p>When you first created an account with your bank, you either did so with some amount of deposit or not.</p><p>Let\u2019s call this the Initial Deposit into your account.</p><p>Back to Redux.</p><p>In the same way, when you create a redux STORE (our own money keeping Vault), there\u2019s the option of doing so with an initial deposit.</p><p>In Redux terms, this is called the initialState of the app.</p><p>Thinking in code, initialState is the second argument passed into the createStore function call.</p><p>Before making any monetary action, if you requested your bank account balance, the Initial Deposit will always be returned to you.</p><p>Afterwards, anytime you perform any monetary action, this initial deposit will also be updated.</p><p>Now, the same goes for Redux.</p><p>The object passed in as initialState is like the initial deposit to the Vault. This initialState will always be returned as the state of the application unless you update the state by performing an action.</p><p>We will now update the application to pass in an initial state:</p><p>Note how initialState is just an object, and it is exactly what we had as the default state in the React App before we began refactoring.</p><p>Now, here\u2019s all the code we have at this point \u2014 with the reducer also imported into App.</p><p>App.js</p><p>reducers/index.js</p><p>If you\u2019re coding along and try to run the app now, you\u2019ll get an error. Why?</p><p>Have a look at the tech prop passed into <HelloWorld />. It still reads, this.state.tech.</p><p>There\u2019s no longer a state object attached to <App />, so that will be undefined.</p><p>Let\u2019s fix that.</p><p>The solution is quite simple. Since the store now manages the state of our application, this means the application STATEobject must be retrieved from the store. But how?</p><p>Whenever you create a store with createStore(), the created store has three exposed methods.</p><p>One of these is getState().</p><p>At any point in time, calling the getState method on the created store will return the current state of your application.</p><p>In our case, store.getState() will return the object { tech: \"React\"} since this is the INITIAL STATE we passed into the createStore() method when we created the STORE.</p><p>You see how all this comes together now?</p><p>Hence the tech prop will be passed into <HelloWorld /> as shown below:</p><p>App.js</p><p>Reducers/Reducer.js</p><p>And that is it! You just learned the Redux basics and successfully refactored a simple React app to use Redux.</p><p>The React application now has its state managed by Redux. Whatever needs to be gotten from the state object will be grabbed from the store as shown above.</p><p>Hopefully, you understood this whole refactoring process.</p><p>For a quicker overview, have a look at this Github diff.</p><p>With the \u201cHello World\u201d project, we have taken a good look at some essential Redux concepts. Even though it\u2019s such a tiny project, it provides a decent foundation to build upon!</p><h1>Possible Gotcha</h1><p>In the just concluded Hello World example, a possible solution you may have come up with for grabbing the state from the store may look like this:</p><p>What do you think? Will this work?</p><p>Just as a reminder, the following two ways are correct ways to initialize a React component\u2019s state.</p><p>(a)</p><p>(b)</p><p>So, back to answering the question, yes, the solution will work just fine.</p><p>store.getState() will grab the current state from the Redux STORE.</p><p>However, the assignment, state = store.getState() will assign the state gotten from Redux to that of the <App /> component.</p><p>By implication, the return statement from render such as <HelloWorld tech={this.state.tech} /> will be valid.</p><p>Note that this reads this.state.tech not store.getState().tech.</p><p>Even though this works, it is against the ideal philosophy of Redux.</p><p>If, within the app, you now run this.setState(), the App\u2019s state will be updated without the help of Redux.</p><p>This is the default React mechanism, and it isn\u2019t what you want. You want the state managed by the Redux STORE to be the single source of truth.</p><p>Whether you\u2019re retrieving state, as in store.getState() or updating/changing state (as we\u2019ll cover later), you want that to be entirely managed by Redux, not by setState().</p><p>Since Redux manages the app\u2019s state, all you need to do is feed in state from the Redux STORE as props to any required component.</p><p>Another big question you\u2019re likely asking yourself is \u201cWhy did I have to go through all this stress just to have the state of my App managed by Redux?\u201d</p><p>Reducer, Store, createStore blah, blah, blah \u2026</p><p>Yeah, I get it.</p><p>I felt that way too.</p><p>However, consider the fact that you do not just go to the bank and not follow a due process for withdrawing your own money. It\u2019s your money, but you do have to follow a due process.</p><p>The same may be said for Redux.</p><p>Redux has it\u2019s own \u201cprocess\u201d for doing things. We\u2019ve got to learn how that works \u2014 and hey, you\u2019re not doing badly!</p><h1>Conclusion and Summary</h1><p>This chapter has been exciting. We focused mostly on setting a decent foundation for the more interesting things to come.</p><p>Here are a few things you learned in this chapter:</p><ul><li>Redux is a predictable state container for JavaScript apps.</li><li>The createStore factory function from Redux is used to create a Redux STORE.</li><li>The Reducer is the only mandatory argument passed into createStore()</li><li>A REDUCER is just a function. A function that takes in two parameters. The first is the STATE of the app, and the other is an ACTION.</li><li>A Reducer always returns the new stateof your application.</li><li>The Initial State of your application, initialState is the second argument passed into the createStore function call.</li><li>Store.getState() will return the current state of your application. Where Store is a valid Redux STORE.</li></ul><h1>Introducing Exercises</h1><p>Please, please, please, don\u2019t skip the exercises. Especially if you\u2019re not confident about your Redux skills and really want to get the best out of this guide.</p><p>So, grab your dev hats, and write some code :)</p><p>Also, if you want me to give you feedback on any of your solutions at any point in time, tweet at me with the hashtag #UnderstandingRedux and I\u2019ll be happy to have a look. I\u2019m not promising to get to every single tweet, but I\u2019ll definitely try!</p><p>Once you get the exercises sorted out, I\u2019ll see you in the next section.</p><p>Remember that a good way to read long content is to break it up into shorter digestible bits. These exercises help you do just that. You take some time off, try to solve the exercises, then you come back to read on. That\u2019s an effective way to study.</p><p>Want to see my solutions to these exercises? I have included the solutions to the exercises in the book package. You\u2019ll find instructions on how to get the accompanying code and exercise solutions once you download the (free) Ebook (PDF & Epub).</p><p>So, here\u2019s the exercise for this section.</p><h1>Exercise</h1><p>(a) Refactor the user card app to use Redux</p><p>In the accompanying code files for the book, you\u2019ll find a user card app written solely in React. The state of the App is managed via React. Your task is to move the state to being managed solely by Redux.</p><h1>Chapter 3 : Understanding State Updates with Actions</h1><p>Now that we\u2019ve discussed the foundational concepts of Redux, we will begin to do some more interesting things.</p><p>In this chapter, we will continue to learn by doing as I walk you through another project \u2014 while explaining every process in detail.</p><p>So, what project are going to work on this time?</p><p>I\u2019ve got the perfect one.</p><p>Please, consider the mockup below:</p><p>Oh, it looks just like the previous example \u2014 but with a few changes. This time we will take account of user actions. When we click any of the buttons, we want to update the state of the application as shown in the GIF below:</p><p>Here\u2019s how this is different from the previous example. In this scenario, the user is performing certain actions that influence the state of the application. In the former example, all we did was display the initial state of the app with no user actions taken into consideration.</p><h1>What is a Redux Action?</h1><p>When you walk into a bank, the Cashier receives your action, that is, your intent for coming into the bank. In our previous example, it was WITHDRAWAL_MONEY . The only way money leaves the bank Vault is if you make your action or intent known to the Cashier.</p><p>Now, the same goes for the Redux Reducer.</p><p>Unlike setState() in pure React, the only way you update the state of a Redux application is if you make your intent known to the REDUCER.</p><p>But how?</p><p>By dispatching actions!</p><p>In the real world, you know the exact action you want to perform. You could probably write that down on a slip and hand it over to the Cashier.</p><p>This works almost the same way with Redux. The only challenge is, how do you describe an action in a Redux app? Definitely not by speaking over the counter or writing it down on a slip.</p><p>Well, there\u2019s good news.</p><p>An action is accurately described with a plain JavaScript object. Nothing more.</p><p>There\u2019s just one thing to be aware of. An action must have a type field. This field describes the intent of the action.</p><p>In the bank story, if we were to describe your action to the bank, it\u2019d look like this:</p><p>That\u2019s all, really.</p><p>A Redux action is described as a plain object.</p><p>Please have a look at the action above.</p><p>Do you think only the type field accurately describes your supposed action to make a withdrawal at a bank?</p><p>Hmmm. I don\u2019t think so. How about the amount of money you want to withdraw?</p><p>Many times your action will need some extra data for a complete description. Consider the action below. I argue that this makes for a more well-described action.</p><p>Now, there\u2019s sufficient information describing the action. For the sake of the example, ignore every other detail the action may include, such as your bank account number.</p><p>Other than the type field, the structure of your Redux Action is really up to you.</p><p>However, a common approach is to have a type field and payload field as shown below:</p><p>The type field describes the action, and all other required data/information that describes the action is put in the payload object.</p><p>For example:</p><p>So, yeah! That\u2019s what an action is.</p><h1>Handling Responses to Actions in the Reducer</h1><p>Now that you successfully understand what an action is, it is important to see how they become useful in a practical sense.</p><p>Earlier, I did say that a reducer takes in two arguments. One state, the other action.</p><p>Here\u2019s what a simple Reducer looks like:</p><p>The action is passed in as the second parameter to the Reducer. But we\u2019ve done nothing with it within the function itself.</p><p>To handle the actions passed into the reducer, you typically write a switch statement within your reducer, like this:</p><p>Some people seem not to like the switch statement, but it\u2019s basically an if/else for possible values on a single field.</p><p>The code above will switch over the action type and do something based on the type of action passed in. Technically, the do something bit is required to return a new state.</p><p>Let me explain further.</p><p>Assume that you had two hypothetical buttons, button #1 and button #2, on a certain webpage, and your state object looked something like this:</p><p>When button #1 is clicked, you want to toggle the isOpen field. In the context of a React app, the solution is simple. As soon as the button is clicked, you would do this:</p><p>Also, let\u2019s assume that when #2 is clicked, you want to update the isClicked field. Again, the solution is simple, and along the lines of this:</p><p>Good.</p><p>With a Redux app, you can\u2019t use setState() to update the state object managed by Redux.</p><p>You have to dispatch an action first.</p><p>Let\u2019s assume the actions are as below:</p><p>#1 :</p><p>#2 :</p><p>In a Redux app, every action flows through the reducer.</p><p>All of them. So, in this example, both action #1 and action #2 will pass through the same reducer.</p><p>In this case, how does the reducer differentiate each of them?</p><p>Yeah, you guessed right.</p><p>By switching over the action.type , we can handle both actions without hassle.</p><p>Here is what I mean:</p><p>Now you see why the switch statement is useful. All actions will flow through the reducer. Thus, it is important to handle each action type separately.</p><p>In the next section, we will continue with the task of building the mini app below:</p><h1>Examining the Actions in the Application</h1><p>As I explained earlier, whenever there\u2019s an intent to update the application state, an action must be dispatched.</p><p>Whether that intent is initiated by a user click, or a timeout event, or even an Ajax request, the rule remains the same. You have to dispatch an action.</p><p>The same goes for this application.</p><p>Since we intend to update the state of the application, whenever any of the buttons is clicked, we must dispatch an action.</p><p>Firstly, let\u2019s describe the actions.</p><p>Give it a try and see if you get it.</p><p>Here\u2019s what I came up with:</p><p>For the React button:</p><p>For the React-Redux button:</p><p>And finally:</p><p>Easy, right?</p><p>Note that the three actions have the same type field. This is because the three buttons all do the same thing. If they were customers in a bank, then they\u2019d all be depositing money, but different amounts of money. The type of action will then be DEPOSIT_MONEY but with different amount fields.</p><p>Also, you\u2019ll notice that the action type is all written in capital letters. That was intentional. It\u2019s not compulsory, but it\u2019s a pretty popular style in the Redux community.</p><p>Hopefully you now understand how I came up with the actions.</p><h2>Introducing Action Creators</h2><p>Take a look at the actions we created above. You\u2019ll notice that we are repeating a few things.</p><p>For one, they all have the same type field. If we had to dispatch these actions in multiple places, we\u2019d have to duplicate them all over the place. That\u2019s not so good. Especially because it\u2019s a good idea idea to keep your code DRY.</p><p>Can we do something about this?</p><p>Sure!</p><p>Welcome, Action Creators.</p><p>Redux has all these fancy names, eh? Reducers, Actions, and now, Action Creators :)</p><p>Let me explain what those are.</p><p>Action Creators are simply functions that help you create actions. That\u2019s all. They are functions that return action objects.</p><p>In our particular example, we could create a function that will take in a text parameter and return an action, like this:</p><p>Now we don\u2019t have to bother about duplicating code everywhere. We can just call the setTechnology action creator at any time, and we\u2019ll get an action back!</p><p>What a good use of functions.</p><p>Using ES6, the action creator we created above could be simplified to this:</p><p>Now, that\u2019s done.</p><h1>Bringing Everything Together</h1><p>I\u2019ve discussed all important components required to build the more advanced Hello World app in isolation in the earlier sections.</p><p>Now, let\u2019s put everything together and build the app. Excited?</p><p>Firstly, let\u2019s talk about folder structure.</p><p>When you get to a bank, the Cashier likely sits in their own cubicle/office. The Vault is also kept safe in a secure room. For good reasons, things feel a little more organized that way. Everyone in their own space.</p><p>The same may be said for Redux.</p><p>It is a common practice to have the major actors of a redux app live within their own folder/directory.</p><p>By actors, I mean, the reducer, actions,and store.</p><p>It is common to create three different folders within your app directory, and name each after these actors.</p><p>This isn\u2019t a must \u2014 and inevitably, you decide how you want to structure your project. For big applications, though, this is certainly a pretty decent practice.</p><p>We\u2019ll now refactor the current app directories we have. Create a few new directories/folders. One called reducers, another, store, and the last one, actions</p><p>You should now have a component structure that looks like this:</p><p>In each of the folders, create an index.js file. This will be the entry point for each of the Redux actors (reducers, store, and actions). I call them actors, like movie actors. They are the major components of a Redux system.</p><p>Now, we\u2019ll refactor the previous app from Chapter 2: Your First Redux Application, to use this new directory structure.</p><p>store/index.js</p><p>This is just like we had before. The only difference is that the store is now created in its own index.js file, like having separate cubicles/offices for the different Redux actors.</p><p>Now, if we need the store anywhere within our app, we can safely import the store, as in import store from \"./store\";</p><p>With that being said, the App.js file for this particular example is slightly different from the former.</p><p>App.js</p><p>What is different?</p><p>In line 4, the store is imported from it\u2019s own \u2018cubicle\u2019. Also, there\u2019s now a <ButtonGroup /> component that takes in an array of technologies and spits out buttons. The ButtonGroup component handles the rendering of the three buttons below the \u201cHello World\u201d text.</p><p>Also, you may notice that the App component returns an array. That\u2019s a React 16 goodie. With React 16, you don\u2019t have to wrap adjacent JSX elements in a div. You can use an array if you want \u2014 but pass in a key prop to each element in the array.</p><p>That is it for the App.js component.</p><p>The implementation of the ButtonGroup component is quite simple. Here it is:</p><p>ButtonGroup.js</p><p>ButtonGroup is a stateless component that takes in an array of technologies, denoted by technologies.</p><p>It loops over this array using map and renders a <button></button for each of the tech in the array.</p><p>In this example, the buttons array passed in is [\"React\", \"Elm\", \"React-redux\"]</p><p>The buttons generated have a few attributes. There\u2019s the obvious className for styling purposes. There\u2019s key to prevent the pesky React warning about rendering multiple items without a key prop. Gosh, that error haunts me every time :(</p><p>Lastly, there\u2019s a data-tech attribute on each button too. This is called a data attribute. It is a way to store some extra information that doesn\u2019t have any visual representation. It makes it slightly easier to grab certain values off of an element.</p><p>A completely rendered button will look like this:</p><p>Right now, everything renders correctly, but upon clicking the button, nothing happens yet.</p><p>Well, that\u2019s because we haven\u2019t provided any click handlers yet. Let\u2019s do that now.</p><p>Within the render function, let\u2019s set up an onClick handler:</p><p>Good. Let\u2019s write the dispatchBtnAction now.</p><p>Don\u2019t forget that the sole aim of this handler is to dispatch an action when a click has happened.</p><p>For example, if you click the React button, dispatch the action:</p><p>If you click the React-Redux button, dispatch this action:</p><p>So, here\u2019s the dispatchBtnAction function.</p><p>Hmmm. Does the code above make sense to you?</p><p>e.target.dataset.tech will get the data attribute set on the button, data-tech . Hence, tech will hold the value of the text.</p><p>store.dispatch() is how you dispatch an action in Redux, and setTechnology() is the action creator we wrote earlier!</p><p>I have gone ahead and added a few comments in the illustration below, just so you understand the code.</p><p>Like you already know, store.dispatch expects an action object, and nothing else. Don\u2019t forget the setTechnology action creator. It takes in the button text and returns the required action.</p><p>Also, the tech of the button is grabbed from the dataset of the button. You see, that\u2019s exactly why I had a data-tech attribute on each button. So we could easily grab the tech off each of the buttons.</p><p>Now we\u2019re dispatching the right actions. Can we tell if this works as expected now?</p><h1>Actions Dispatched. Does this Thing Work?</h1><p>Firstly, here\u2019s a short quiz question. Upon clicking a button and consequently dispatching an action, what happens next within Redux? Which of the Redux actors come into play?</p><p>Simple. When you hit the bank with a WITHRAW_MONEY action, to whom do you go? The Cashier, yes.</p><p>Same thing here. The actions, when dispatched, flow through the reducer.</p><p>To prove this, I\u2019ll log whatever action comes into the reducer.</p><p>reducers/index.js</p><p>The reducer then returns the new sate of the app. In our particular case, we\u2019re just returning the same initial state .</p><p>With the console.log() in the reducer, let\u2019s have a look at what happens when we click.</p><p>Oh, yeah!</p><p>The actions are logged when the buttons are clicked. Which proves that the actions indeed go through the Reducer. Amazing!</p><p>There\u2019s one more thing though. As soon as the app starts, there\u2019s a weird action being logged as well. It looks like this:</p><p>What\u2019s that?</p><p>Well, do not concern yourself so much about that. It is an action passed by Redux itself when setting up your app. It is usually called the Redux init action, and it is passed into the reducer when Redux initializes your application with the initial state of the app.</p><p>Now, we are sure that the actions indeed pass through the Reducer. Great!</p><p>While that\u2019s exciting, the only reason you go to the Cashier with a withdrawal request is because you want money. If the Reducer isn\u2019t taking the action we pass in and doing something with our action, of what value is it?</p><h1>Making the Reducer Count</h1><p>Up until now, the reducer we\u2019ve worked on hasn\u2019t done anything particularly smart. It\u2019s like a Cashier who is new to the job and does nothing with our WITHDRAW_MONEY intent.</p><p>What exactly do we expect the reducer to do?</p><p>For now, here\u2019s the initialState we passed into createStore when the STORE was created.</p><p>When a user clicks any of the buttons, thus passing an action to the reducer, the new state we expect the reducer to return should have the action text in there!</p><p>Here\u2019s what I mean.</p><p>Current state is { tech: \"React\"}</p><p>Given a new action of type SET_TECHNOLOGY, and text, React-Redux :</p><p>What do you expect the new state to be?</p><p>Yeah, {tech: \"React-Redux\"}</p><p>The only reason we dispatched an action is because we want a new application state!</p><p>Like I mentioned earlier, the common way to handle different action types within a reducer is to use the JavaScript switch statement as shown below:</p><p>Now we switch over the action type. But why?</p><p>Well, if you went to see a Cashier, you could have many different actions in mind.</p><p>You could want to WITHDRAW_MONEY, or DEPOSIT_MONEY or maybe just SAY_HELLO.</p><p>The Cashier is smart, so they take in your action and respond based on your intent.</p><p>This is exactly what we\u2019re doing with the Reducer.</p><p>The switch statement checks the type of the action.</p><p>What do you want to do? Withdraw, deposit, whatever\u2026</p><p>After that, we then handle the known cases we expect. For now, there\u2019s just one case which is SET_TECHNOLOGY.</p><p>And by default, be sure to just return the state of the app.</p><p>So far so good.</p><p>The Cashier (Reducer) now understands our action. However, they aren\u2019t giving us any money (state) yet.</p><p>Let\u2019s do something within the case.</p><p>Here\u2019s the updated version of the reducer. One that actually gives us money :)</p><p>Aw, yeah!</p><p>You see what I\u2019m doing there?</p><p>I\u2019ll explain what\u2019s going on in the next section.</p><h1>Never Mutate State Within the Reducers</h1><p>When returning state from reducers, there\u2019s something that may put you off at first. However, if you already write good React code, then you should be familiar with this.</p><p>You should not mutate the state received in your Reducer. Instead, you should always return a new copy of the state.</p><p>Technically, you should never do this:</p><p>This is exactly why the reducer I\u2019ve written returned this:</p><p>Instead of mutating (or changing) the state received from the reducer, I am returning a new object. This object has all the properties of the previous state object. Thanks to the ES6 spread operator, ...state. However, the tech field is updated to what comes in from the action, action.text.</p><p>Also, every Reducer you write should be a pure function with no side-effects \u2014 No API calls or updating a value outside the scope of the function.</p><p>Got that?</p><p>Hopefully, yes.</p><p>Now, the Cashier isn\u2019t ignoring our actions. They\u2019re in fact giving us cash now!</p><p>After doing this, click the buttons. Does it work now?</p><p>Gosh it still this doesn\u2019t work. The text doesn\u2019t update.</p><p>What in the world is wrong this time?</p><h1>Subscribing to Store Updates</h1><p>When you visit the bank, let the Cashier know your intended WITHDRAWAL action, and successfully receive your money \u2014 so what\u2019s next?</p><p>Most likely, you will receive an alert via email/text or some other mobile notification saying you have performed a transaction, and your new account balance is so and so.</p><p>If you don\u2019t receive mobile notifications, you\u2019ll definitely receive some sort of \u201cpersonal receipt\u201d to show that a successful transaction was carried out on your account.</p><p>Okay, note the flow. An action was initiated, you received your money, you got an alert for a successful transaction.</p><p>We seem to be having a problem with our Redux code.</p><p>An action has been successfully initiated, we\u2019ve received money (state), but hey, where\u2019s the alert for a successful state update?</p><p>We\u2019ve got none.</p><p>Well, there\u2019s a solution. Where I come from, you subscribe to receive transaction notifications from the bank either by email/text.</p><p>The same is true for Redux. If you want the updates, you\u2019ve got to subscribe to them.</p><p>But how?</p><p>The Redux store, whatever store you create has a subscribe method called like this: store.subscribe().</p><p>A well-named function, if you ask me!</p><p>The argument passed into store.subscribe() is a function, and it will be invoked whenever there\u2019s a state update.</p><p>For what it\u2019s worth, please remember that the argument passed into store.subscribe() should be a function. Okay?</p><p>Now let\u2019s take advantage of this.</p><p>Think about it. After the state is updated, what do we want or expect? We expect a re-render, right?</p><p>So, state has been updated. Redux, please, re-render the app with the new state values.</p><p>Let\u2019s have a look at where the app is being rendered in index.js</p><p>Here\u2019s what we\u2019ve got.</p><p>This is the line that renders the entire application. It takes the App/> component and renders it in the DOM. The root ID to be specific.</p><p>First, let\u2019s abstract this into a function.</p><p>See this:</p><p>Since this is now within a function, we have to invoke the function to render the app.</p><p>Now, the <App /> will be rendered just like before.</p><p>Using some ES6 goodies, the function can be made simpler.</p><p>Having the rendering of the <App/> wrapped within a function means we can now subscribe to updates to the store like this:</p><p>Where render is the entire render logic for the <App /> \u2014 the one we just refactored.</p><p>You understand what\u2019s happening here, right?</p><p>Any time there\u2019s a successful update to the store, the <App/> will now be re-rendered with the new state values.</p><p>For clarity, here\u2019s the <App/> component:</p><p>Whenever a re-render occurs, store.getState() on line 4 will now fetch the updated state.</p><p>Let\u2019s see if the app now works as expected.</p><p>Yeah! This works, and I knew we could do this!</p><p>We are successfully dispatching an action, receiving money from the Cashier, and then subscribing to receive notifications. Perfect!</p><h1>Important Note on Using store.subscribe()</h1><p>There are a few caveats to using store.subscribe() as we\u2019ve done here. It\u2019s a low-level Redux API.</p><p>In production, and largely for performance reasons, you\u2019ll likely use bindings such as react-redux when dealing with larger apps. For now, it is safe to continue using store.subscribe() for our learning purposes.</p><p>In one of the most beautiful PR comments I\u2019ve seen in a long time, Dan Abramov, in one of the Redux application examples, said:</p><p>The new Counter Vanilla example is aimed to dispel the myth that Redux requires Webpack, React, hot reloading, sagas, action creators, constants, Babel, npm, CSS modules, decorators, fluent Latin, an Egghead subscription, a PhD, or an Exceeds Expectations O.W.L. level.</p><p>I believe the same.</p><p>When learning Redux, especially if you\u2019re just starting out, you can do away with as many \u201cextras\u201d as possible.</p><p>Learn to walk first, then you can run as much as you want.</p><h1>Okay, Are We Done Yet?</h1><p>Yeah, we\u2019re done, technically. However, there\u2019s one more thing I\u2019d love to show you. I\u2019ll bring up my browser Devtools and enable paint-flashing.</p><p>Now, as we click and update the state of the app, note the green flashes that appear on the screen. The green flashes represent parts of the app being re-painted or re-rendered by the Browser engine.</p><p>Have a look:</p><p>As you can see, even though it appears that the render function is invoked every time a state update is made, not the entire app is re-rendered. Just the component with a new state value is re-rendered. In this case, the <HelloWorld/> component.</p><p>One more thing.</p><p>If the current state of the app renders, Hello World React, clicking the React button again doesn\u2019t re-render since the state value is the same.</p><p>Good!</p><p>This is the React Virtual DOM Diff algorithm at work here. If you know some React, you must have heard this before.</p><p>So, yeah. We\u2019re done with this section! I\u2019m having so much fun explaining this. I hope you are enjoying the read, too.</p><h1>Conclusion and Summary</h1><p>For a supposedly simple application, this chapter was longer than you probably anticipated. But that\u2019s fine. You\u2019re now equipped with even greater knowledge on how Redux works.</p><p>Here are a few things you learned in this chapter:</p><ul><li>Unlike setState() in pure React, the only way you update the state of a Redux application is by dispatching an action.</li><li>An action is accurately described with a plain JavaScript object, but it must have a type field.</li><li>In a Redux app, every action flows through the reducer. All of them.</li><li>By using a switch statement, you can handle different action types within your Reducer.</li><li>Action Creators are simply functions that return action objects.</li><li>It is a common practice to have the major actors of a redux app live within their own folder/directory.</li><li>You should not mutate the state received in your Reducer. Instead, you should always return a new copy of the state.</li><li>To subscribe to store updates, use the store.subscribe() method.</li></ul><h1>Exercises</h1><p>Okay, now it\u2019s your time to do something cool.</p><ol><li>In the exercise files, I have set up a simple React application that models a user\u2019s bank application.</li></ol><p>Have a good look at the mockup above. In addition to the the user being able to view their total balance, they can also perform withdrawal actions.</p><p>The name and balance of the user are stored in the application state.</p><p>There are two things you need to do.</p><p>(i) Refactor the App\u2019s state to be managed solely by Redux.</p><p>(ii) Handle the withdrawal actions to actually deplete the user\u2019s balance (that is, on clicking the buttons, the balance reduces).</p><p>You must do this via Redux only.</p><p>As a reminder, upon downloading the Ebook, you\u2019ll find instructions on how to get the accompanying code files, exercise files, and exercise solutions as well.</p><p>2. The following image is that of a time counter created as a React application.</p><p>The state object looks like this:</p><p>Depending on the active session, clicking any of the \u201cincrease\u201d or \u201cdecrease\u201d buttons should update the value displayed in the counter.</p><p>There are two things you need to do.</p><p>(i) Refactor the App\u2019s state to be managed solely by Redux.</p><p>(ii) Handle the increase and decrease actions to actually affect the displayed time on the counter.</p><h1>Chapter 4: Building Skypey: A More Advanced Example.</h1><p>We\u2019ve come a long way, and I salute you for following along.</p><p>In this section, I will walk you through the process of building a more advanced example.</p><p>Even though we\u2019ve covered a lot of ground on the basics of Redux, I really think this example will give you a deeper perspective as to how some of the concepts you\u2019ve learned work on a much broader scale.</p><p>We will talk about planning your application, designing and normalizing the state object, and a lot more. Real apps require much more than just Redux. You\u2019ll still need some CSS and React as well.</p><p>Buckle up, as this will be a long worthy ride!</p><h1>Planning the Application</h1><p>Okay. Here\u2019s the big question. What do you generally do first when starting a new React application?</p><p>Well, we all have our preferences.</p><p>Do you break down the entire application into components and build your way up?</p><p>Do you start off with the overall layout of the application first?</p><p>How about the state object of your app? Do you spend sometime thinking about that too?</p><p>There\u2019s indeed a lot to put into consideration. I\u2019ll leave you with your preferred way of doing things.</p><p>In building Skypey, I\u2019ll take a top-down approach. We\u2019ll discuss the overall layout of the app, then the design of the app\u2019s state object, then we\u2019ll build out the smaller components.</p><p>Again, there isn\u2019t a perfect way to do this. For a more complex project, perhaps, a bottom-top approach would suit that.</p><p>One more time, here\u2019s the finished result we are gunning for:</p><h1>Resolving the Initial App Layout</h1><p>From the CLI, create a new react app with create-react-app, and call it Skypey.</p><p>Skypey\u2019s layout is a simple 2-column layout. A fixed width sidebar on the left, and on the right a main section that takes up the remaining viewport width.</p><p>Here\u2019s a quick note on how this app is styled.</p><p>If you\u2019re a more experienced Engineer, be sure to use whatever CSS in JavaScript solution works for you. For simplicity, I\u2019ll style the Skypey app with good \u2018ol CSS \u2014 nothing more.</p><p>Let\u2019s get cracking.</p><p>Create two new files, Sidebar.js and Main.js within the root directory.</p><p>As you may have guessed, by the time we build out the Sidebar and Main components, we will have it rendered within the App component like this:</p><p>App.js</p><p>I suppose you\u2019re familiar with the structure of a create-react-app project. There\u2019s the entry point of the app, index.js which renders an App component.</p><p>Before moving on to building the Sidebar and Main components, first some CSS house-keeping. Make sure that the DOM node where the app is rendered, #root , takes up the entire height of the viewport.</p><p>index.css</p><p>While you\u2019re at it, you should also remove any unwanted spacing from body:</p><p>Good!</p><p>The layout of the app will be structured using Flexbox.</p><p>Get the Flexbox juice running by making .App a flex-container and making sure it takes up 100% of the available height.</p><p>App.css</p><p>Now, we can comfortably get to building the Sidebar and Main components.</p><p>Let\u2019s keep it simple for now.</p><p>Sidebar.js</p><p>All that is rendered is the text Sidebar within an <aside> element. Also, note that a corresponding stylesheet, Sidebar.css , has been imported too.</p><p>Within Sidebar.css we need to restrict the width of the Sidebar, plus a few other simple styles.</p><p>Sidebar.css</p><p>Taking a mobile-first approach, the width of the Sidebar will be 80px and 320px on larger devices.</p><p>Okay, now on to the Main component.</p><p>Like before, we\u2019ll keep this simple.</p><p>Simply render a simple text within a <main> element.</p><p>While developing apps, you want to be sure to build progressively. In other words, build in bits, and make sure that the app works.</p><p>Below\u2019s the <Main> component:</p><p>Again, a corresponding stylesheet, Main.css , has been imported.</p><p>With the rendered elements of both <Main /> and <Sidebar />, there exist the CSS class names, .Main and .Sidebar .</p><p>Since the components are both rendered within <App /> , the .Sidebar and .Main classes are children of the parent class, .App.</p><p>Remember that .App is a flex-container. Consequently, .Main can be made to fill the remaining space in the viewport like this:</p><p>Now, here\u2019s the full code:</p><p>That was easy :)</p><p>And here\u2019s the result of all the code we\u2019ve written up until this point.</p><p>Not so exciting. Patience. We\u2019ll get there.</p><p>For now, the basic layout of the application is set. Well done!</p><h1>Designing the State object</h1><p>The way React apps are created is that your entire App is mostly a function of the state object.</p><p>Whether you\u2019re creating a sophisticated application, or something simple, a lot of thought should be put into how you\u2019ll structure the state object of your app.</p><p>Particularly when working with Redux, you can reduce a lot of complexity by designing the state object correctly.</p><p>So, how do you do it right?</p><p>First, consider the Skypey app.</p><p>A user of the app has multiple contacts.</p><p>Each contact in turn has a number of messages, making up their conversation with the main app user. This view is activated when you click any of the contacts.</p><p>By association, you wouldn\u2019t be wrong to have a picture like this in your mind.</p><p>You may then go on to describe the state of the app like this.</p><p>Okay, in plain JavaScript, here\u2019s what you\u2019d likely have:</p><p>Within the state object above is a user field represented by a giant array. Since the user has a number of contacts, those are represented by objects within the array. Oh, since there could be many different messages, these are stored in an array, too.</p><p>At first glance, this may look like a decent solution.</p><p>But is it?</p><p>If you were to receive data from some back-end, the structure may look just like this!</p><p>Good, right?</p><p>No mate. Not so good.</p><p>This is a pretty good representation of data. It seems like it shows the relationship between each entity, but in terms of the state of your front-end application, this is a bad idea. Bad is a strong word. Let\u2019s just say, there\u2019s a better way to do this.</p><p>Here\u2019s how I see it.</p><p>If you had to manage a football team, a good plan would be to pick out the best scorers in the team, and put them in the front to get you goals.</p><p>You can argue that good players can score from wherever \u2014 yes. I bet they\u2019ll be more effective when they are well positioned in front of the opposition\u2019s goal post.</p><p>The same goes for the state object.</p><p>Pick out the front runners within the state object, and place them in \u201cfront\u201d.</p><p>When I say \u201cfront runners\u201d, I mean the fields of the state object you\u2019ll be performing more CRUD actions on. The parts of the state you\u2019ll be Creating, Reading, Updating and Deleting more often than others. The parts of the state that are core to the application.</p><p>This is not an iron-clad rule, but it is a good metric to go by.</p><p>Looking at the current state object and the needs of our application, we can pick out the \u201cfront runners\u201d together.</p><p>For one, we\u2019ll be reading the \u201cMessages\u201d field quite often \u2014 for each user\u2019s contact. There\u2019s also the need to edit and delete a user\u2019s message.</p><p>Now, that\u2019s a front runner right there.</p><p>The same goes for \u201cContacts\u201d too.</p><p>Now, let\u2019s place them \u201cin front.\u201d</p><p>Here\u2019s how.</p><p>Instead of having the \u201cMessages\u201d and \u201cContacts\u201d fields nested, pick them out, and make them primary keys within the state object. Like this:</p><p>This is still an incomplete representation, but we have greatly improved the representation of the app\u2019s state object.</p><p>Now let\u2019s keep going.</p><p>Remember that a user can message any of their contacts. Right now, the messages and contact field within the state object are independent.</p><p>After making these fields primary keys within the state object, there\u2019s nothing that shows the relationship between a certain message and the associated contact. They are independent, and that\u2019s not good because we need to know what list of messages belongs to whom. Without knowing that, how do we render the correct messages when a contact is clicked?</p><p>No way. We can\u2019t.</p><p>Here\u2019s one way to handle this:</p><p>So, all I\u2019ve done is make the messages field an array of message objects. objects with a messageTo key. This key shows which contact a particular message belongs to.</p><p>We are getting close. Just a bit of refactoring, and we are done.</p><p>Instead of just an array, a user may be better described by an object \u2014 a user object.</p><p>A user will have a name, email, profile picture, fancy text status and a unique user ID. The user ID is important \u2014 and must be unique for each user.</p><p>Think about it. The contacts of a person may also be represented by a similar user object.</p><p>So, the contacts field within the state object may be represented by a list of user objects.</p><p>Okay. So far so good.</p><p>The contacts field is now represented by a huge array of user objects.</p><p>However, instead of using an array, we can have the contacts represented by an object, too. Here\u2019s what I mean.</p><p>Instead of wrapping all the user contacts in a giant array, they could also be put in an object.</p><p>See below:</p><p>Since objects must have a key value pair, the unique IDs of the contacts are used as keys to their respective user objects.</p><p>Makes sense?</p><p>There\u2019s some advantages to using objects over arrays. There\u2019s also downsides.</p><p>In this application, I\u2019ll mostly be using objects to describe the fields within the state object.</p><p>If you\u2019re not used to this approach, this lovely video explains some of the advantages to it.</p><p>Like I said earlier, there are a few disadvantages to this approach, but I\u2019ll show you how to get over them.</p><p>We have resolved how the contacts field will be designed within the application state object. Now, let\u2019s move unto the messages field.</p><p>We currently have the messages as an array with message objects.</p><p>We will now define a more appropriate shape for the message objects. A message object will be represented by the message object below:</p><p>The text is the displayed text within the chat bubble. However, is_user_msg will be a Boolean \u2014 true or false. This is important to differentiate if a message is from a contact or the default app user.</p><p>Looking at the graphic above, you\u2019ll notice that the user\u2019s messages and those of a contact are styled differently in the chat window. The user\u2019s messages stay on the right, and the contact, on the left. One is blue, the other is dark.</p><p>You now see why the boolean, is_user_msg is important. We need it to render the messages appropriately.</p><p>For example, the message object may look like this:</p><p>Now, representing the messages field within the state with an object, we should have something like this:</p><p>Notice how I\u2019m also using an object instead of an array again. Also, we\u2019re going to map each message to the unique key, user_id of the contact.</p><p>This is because a user can have different conversations with different contacts, and it is important to show this representation within the state object. For example, when a contact is clicked, we need to know which was clicked!</p><p>How do we do this? Yes, with their user_id.</p><p>The representation above is incomplete but we\u2019ve made a whole lot of progress! The messages field we\u2019ve represented here assumes that each contact (represented by their unique user id) has only one message.</p><p>But, that\u2019s not always the case. A user can have many messages sent back and forth within a conversation.</p><p>So how do we do this?</p><p>The easiest way is to have an array of messages, but instead, I\u2019ll represent this with objects:</p><p>Now, we are taking into consideration whatever amount of messages are sent within a conversation. One message, two messages, or more, they are now represented in the messages representation above.</p><p>You may be wondering why I have used numbers, 0, 1 and so on to create a mapping for each contact message.</p><p>I\u2019ll explain that next.</p><p>For what it\u2019s worth, the process of removing nested entities from your state object and designing it like we\u2019ve done here is called \u201cNormalizing the State Object\u201d. I don\u2019t want you confused in case you see that somewhere else.</p><h1>The Major Problem with Using Objects Over Arrays</h1><p>I love the idea of using objects over arrays \u2014 for most use cases. There are some caveats to be aware of, though.</p><h2>Caveat #1 : It\u2019s a lot easier to iterate over Arrays in your view logic</h2><p>A common situation you\u2019ll find yourself in is the need to render a list of components.</p><p>For example, to render a list of users given a users prop, your logic would look something like this:</p><p>However, if users were stored in the state as an object, when retrieved and passed on as props, users will remain an object. You can\u2019t use map on objects \u2014 and it\u2019s a lot harder to iterate over them.</p><p>So, how do we resolve this?</p><h2>Solution #1a:</h2><p>Use Lodash for iterating over objects.</p><p>For the uninitiated, Lodash is a robust JavaScript utility library. Even for iterating over arrays, many would argue that you still use Lodash as it helps deal with falsey values.</p><p>The syntax for using Lodash for iterating over objects isn\u2019t hard to grasp. It looks like this:</p><p>You call the map method on the Lodash object, _.map(). You pass in the object to be iterated over, and then pass in a callback function like you would with the default JavaScript map function.</p><h2>Solution #1b:</h2><p>Consider the usual way you\u2019d map over an array to create a rendered list of users:</p><p>Now, assume that users was an object. This means we can\u2019t map over it. What if we could easily convert users to an array without much hassle?</p><p>Lodash to the rescue again.</p><p>Here\u2019s what that would look like:</p><p>You see that?</p><p>_.values() will convert the object to an array. This makes map possible!</p><p>Here\u2019s how that works.</p><p>If you had a users object like this:</p><p>_.values(users) will convert that to this:</p><p>Yes! An array with the object values. Exactly what you need to iterate over. Problem solved.</p><p>There\u2019s one more caveat. It\u2019s perhaps a bigger one.</p><h2>Caveat #2 : Preservation of Order</h2><p>This is perhaps the number one reason people use arrays. Arrays preserve the order of their values.</p><p>You have to see an example to understand this.</p><p>Whatever you do, fetching the value of numbers will always return the same array, with the order of the inputs unaltered.</p><p>How about an object?</p><p>The order of the numbers is the same as in the array before.</p><p>Now, watch me copy and paste this in the browser console, and then try to retrieve the values.</p><p>Ok, you might have missed that. Look below:</p><p>See the highlights in the image above. The order of the object values aren\u2019t returned in the same way!</p><p>Now, depending on the kind of application you\u2019re building, this can cause very serious problems. Especially in apps where order is paramount.</p><p>You know any examples of such app?</p><p>Well, I do. A chat application!</p><p>If you\u2019re representing user conversations as an object, you sure care about the order in which the messages are displayed!</p><p>You don\u2019t want a message sent yesterday, showing like it was sent today. Order matters.</p><p>So, how would you solve this?</p><h2>Solution #2:</h2><p>Keep a separate array of IDs to denote order.</p><p>You must have seen this before, but you perhaps didn\u2019t pay attention.</p><p>For example, if you had the following object:</p><p>You could keep another array to denote the order of values.</p><p>This way you can always keep track of the order of values \u2014 regardless of the behavior of the object. If you need to add values to the object, you do so, but push the associated ID to the numbersOrderIDs as well.</p><p>It is important to be aware of these things as you may not always have control over some things. You may pick up applications with state modeled in this way. And even if you don\u2019t like the idea, you definitely should be in the know.</p><p>For the sake of simplicity, the IDs of the messages for the Skypey application will always be in order \u2014 as they are numbered in increasing values from zero upwards.</p><p>This may not be the case in a real app. You may have weird auto generated IDs that looks like gibberish such as y68fnd0a9wyb.</p><p>In such cases, you want to keep a separate array to track the order of values.</p><p>That is it!</p><p>It is worth stating that the entire process of normalizing the state object may be summarized as follows:</p><p>\u2022 Each type of data should have its own key in the state object.</p><p>\u2022 Each key should store the individual items in an object, with the IDs of the items as keys and the items themselves as the values.</p><p>\u2022 Any references to individual items should be done by storing the item\u2019s ID.</p><p>\u2022 Ideally, keep an array of IDs to indicate ordering.</p><h1>Recap on the Design of the State Object</h1><p>Now I know this has been a long discourse on the structure of the state object.</p><p>It may not seem important to you now, but as you build projects you\u2019ll come to see how invaluable putting some thought into designing your state can be. It\u2019ll help you perform CRUD operations much more easily, will reduce a lot of overly complex logic within your reducers, and will also help you take advantage of Reducer Composition, a term I\u2019ll describe later in this book.</p><p>I wanted you to understand the reason behind my decisions, and be able to make informed decisions as you build your own applications. I believe you\u2019re now empowered with the right information.</p><p>With all said and done, here\u2019s a visual representation of the Skypey state object:</p><p>The image assumes just two user contacts. Please have a good look at it.</p><h1>Building the List of Users</h1><p>Moving on, it\u2019s time to write some code. First, here\u2019s the goal of this section. To build the list of users shown below:</p><p>What is needed to build this?</p><p>From a high level, it should be pretty clear that within the Sidebar component, there\u2019s the need to render a list of a user\u2019s contacts.</p><p>Presumably, within Sidebar, you may have something like this:</p><p>Got that?</p><p>You map over some contacts data from the state, and for each contact, you render a User component.</p><p>But where does the data for this come from?</p><p>Ideally, and in a real world scenario, you will fetch this data from the server with an Ajax call. For our learning purposes, this brings in a layer of complexity we can avoid \u2014 for now.</p><p>So, as opposed to fetching data remotely from a server, I have created a few functions that will handle the creation of data for the App. We will be using this static data to build the Application.</p><p>For example, there\u2019s a contacts variable already created within static-data.js, that will always return a randomly generated list of contacts. All you have to do is import this into the App. No Ajax calls.</p><p>Thus, create a new file in the root directory of the project and call it static-data.js</p><p>Copy the contents of the gist here into that file. We\u2019ll be making use of it pretty soon.</p><h1>Setting up the Store</h1><p>Let\u2019s quickly go over the process of setting up the store of the App so we can retrieve the data required to build the list of users within the sidebar.</p><p>One of the first steps when creating a Redux app is setting up the Redux store. Since this is where data will be read from, it becomes imperative to resolve this.</p><p>So, please install redux from the cli with:</p><p>Once the installation is done, create a new folder called store and in the directory, create a new index.js file.</p><p>Don\u2019t forget the analogy of having the major Redux actors in their own directories.</p><p>Like you already know, the store will be created via the createStore factory function from redux like this:</p><p>store/index.js</p><p>The Redux createStore needs to be aware of the reducer (remember the store and reducer relationship I explained earlier).</p><p>Now, edit the second line to look like this:</p><p>Now, import the reducer , and contacts from the static data:</p><p>Since we actually haven\u2019t created any reducers directory, please do so now. Also create an index.js file with this reducers directory.</p><p>Now, create the reducer.</p><p>reducers/index.js</p><p>A reducer is just a function that takes in state and action, and returns a new state.</p><p>If I lost you in the creation of the store, const store = createStore(reducer, {contacts}); you should remember that the second argument in createStore is the initial state of the app.</p><p>I have set this to the object {contacts}.</p><p>This is an ES6 syntax, similar to this: {contacts: contacts} with a contacts key and a value of contacts from static-data.</p><p>There\u2019s no way to know that what we\u2019ve done is right. Let\u2019s attempt to fix that.</p><p>In Index.js , here\u2019s what you should have now:</p><p>Index.js</p><p>Like we did with the first example, refactor the ReactDOM.render call to sit inside a render function.</p><p>Then involve the render function to have the App render correctly.</p><p>Now, import the store you created earlier \u2026</p><p>And make sure any time the store is updated, the render function is invoked.</p><p>Good!</p><p>Now, let\u2019s take advantage of this setup.</p><p>Each time the store updates and invokes render , let\u2019s log the state from the store.</p><p>Here\u2019s how:</p><p>Just call a new function, fancyLog() , that you\u2019ll soon write.</p><p>Here\u2019s the fancyLog function:</p><p>Hmmm. What have I done?</p><p>console.log(store.getState()) is the bit you\u2019re familiar with. This will log the state retrieved from the store.</p><p>The first line, console.log(\"%c Rendered with \ud83d\udc49 \ud83d\udc49\ud83d\udc47\", \"background: purple; color: #fff\"); will log the text, \u201cRendered with \u2026\u201d, plus some emoji, and some CSS style to make it distinguishable. The %c written before the \u201cRendered with \u2026\u201d text makes it possible to use the CSS styling.</p><p>Enough talking. Here\u2019s the complete code:</p><p>index.js</p><p>Here\u2019s the state object being logged.</p><p>As you can see, within the state object is a contacts field that holds the contacts available for the particular user. The structure of the data is as we discussed before now. Each contact is mapped with their user_id</p><p>We\u2019ve made decent progress.</p><h2>Passing the Sidebar data via Props</h2><p>If you take a look at the entire code now, you\u2019ll agree that the entry point of the app remains index.js .</p><p>Index.js then renders the App component. The App component is then responsible for rendering the Main and Sidebar components.</p><p>For Sidebar to have access to the required contacts data, we\u2019ll pass in the data via props.</p><p>In App.js, retrieve contacts from the store, and pass it on to Sidebar like this:</p><p>App.js</p><p>As I have done in the screenshot above, inspect the Sidebar component and you\u2019ll find the contacts passed as a prop. Contacts are an object with mapped IDs to user objects.</p><p>Now we can proceed to rendering the contacts.</p><p>First, install Lodash from the cli:</p><p>Import lodash in App.js</p><p>I know. The underscore looks funny, but it\u2019s a nice convention. You\u2019ll get to love it :)</p><p>Now, to use any of the utility methods lodash avails to us, call the methods on the imported underscore, such as .fakeMethod().</p><p>Now, put Lodash to good use. Using one of the Lodash utility functions, the contacts object can be easily converted to an array when passed in as props.</p><p>Here\u2019s how:</p><p>You can read more about the Lodash .values method if you want. In a nutshell, it creates an array out of all key values of the object passed in.</p><p>Now, let\u2019s really render something in the Sidebar.</p><p>Sidebar.js</p><p>In the code block above, we map over the contacts prop and render a User component for each contact.</p><p>To prevent the React warning key, the contact\u2019s user_id is used as a key. Also, each contact is passed in as a user prop to the User component.</p><h1>Building the User Component</h1><p>We are rendering a User component within the Sidebar , but this component doesn\u2019t exist yet.</p><p>Please create a User.js and User.css file within the root directory.</p><p>Done that?</p><p>Now, here\u2019s the content of the User.js file:</p><p>User.js</p><p>Don\u2019t let the big chunk of code fool you. It is actually very easy to read and understand. Have a second look.</p><p>The name, profile_pic URL and status of the user are gotten from the props via destructuring: const { name, profile_pic, status } = user;</p><p>These values are then used in the return statement for proper rendering, and here\u2019s the result of that:</p><p>The result above is super ugly, but it is an indication that this works!</p><p>Now, let\u2019s style this.</p><p>First, prevent the list of users from overflowing the Sidebar container.</p><p>Sidebar.css</p><p>Also, the font is ugly. Let\u2019s change that.</p><p>Index.css</p><p>Finally, handle the overall display of the User component.</p><p>User.css</p><p>Since this is not a CSS book, I\u2019m skipping some of the styling explanations. However, if anything confuses you, just ask me on Twitter, and I\u2019ll be happy to help.</p><p>Voila!</p><p>Here\u2019s the beautiful display we\u2019ve got now:</p><p>Amazing!</p><p>We\u2019ve gone from nothing to having a beautiful list of users rendered on the screen.</p><p>If you\u2019re coding along, resize the browser to see the beautiful view on mobile as well.</p><p>Hang In there!</p><h1>Got questions?</h1><p>It\u2019s perfectly normal to have questions.</p><p>The quickest way to reach me will be to tweet your question via Twitter, with the hashtag, #UnderstandingRedux. This way I can easily find and answer your question.</p><h1>You don\u2019t have to Pass Down Props</h1><p>Have a look at the high level structure of the Skypey UI below:</p><p>In traditional React apps (without using the context API), you are required to pass down props from <App /> to <Sidebar /> and <Main /></p><p>With Redux however, you are not bound by this rule.</p><p>If a certain component needs access to a value from the state object, you can simply reach out to the store and retrieve the current state.</p><p>For instance, <Sidebar /> and <Main /> can access the Redux store without the need to depend on <App /></p><p>The only reason I haven\u2019t done so here is because <App /> is a direct parent, with <Sidebar /> and <Main /> NOT more than one level deep in component hierarchy.</p><p>As you\u2019ll see in later sections, for components that are nested deeper in the component hierarchy, we will reach out directly to the Redux store to retrieve the current state.</p><p>There\u2019s no need to pass down props.</p><p>You\u2019ll love the graphic below. It goes even further to describe the need not to pass down props when working with Redux.</p><h1>Container and Component Folder Structure</h1><p>There\u2019s a bit of refactoring you need to do before we move on to coding the Skypey application.</p><p>In Redux applications, it is a common pattern to split your components into two different directories.</p><p>Every component that talks directly to Redux, whether that is to retrieve state from the store, or to dispatch an action, should be moved to a containers directory.</p><p>Other components, those that do not talk to Redux, should be moved over to a components directory.</p><p>Well, well, well. Why go through the hassle?</p><p>For one, your codebase becomes a little cleaner. It also becomes easier to find certain components as long as you know if they talk to Redux or not.</p><p>So, go ahead.</p><p>Have a look at the components in the current state of the application, and reshuffle accordingly.</p><p>So you don\u2019t screw things up, remember to move the components\u2019 associated CSS file.</p><p>Here\u2019s my solution:</p><ol><li>Create two folders: containers and components.</li><li>App.js attempts to retrieve contacts from the store. So, move App.js and App.css to the containers folder.</li><li>Move Sidebar.js, Sidebar.css , Main.js and Main.css to the components folder. They do not talk to Redux directly for anything.</li><li>Please do not move Index.js and Index.css. Those are the entry point of the App. Just leave those at the root of the project directory.</li><li>Please move User.js and User.css to the containers directory. The User component does NOT talk to Redux yet but it will. Remember that when the App is completed, upon clicking a user from the sidebar, their messages will be shown. By implication, an action will be dispatched. In the coming sections, we\u2019ll build this out.</li><li>By now, a lot of your import URLs will be broken, that is, the components that imported these moved components. You have to change their import URL. I\u2019ll leave this up to you. It\u2019s an easy fix :)</li></ol><p>Here\u2019s an example solution for #6 above: In App.js, change the Sidebar and Main imports to this:</p><p>As opposed to the former:</p><p>Got that?</p><p>Here are some tips to solve the challenge yourself:</p><ol><li>Check the Sidebar.js import statement for the User component.</li><li>Check Index.js import statement for the App component.</li><li>Check App.js import statement for the store</li></ol><p>Once that is done, you\u2019ll have Skypey working as expected!</p><h1>Refactoring to Set Initial State from the Reducer</h1><p>Firstly, please have a look at the creation of the store in store/index.js. In particular, consider this line of code:</p><p>The initial state object is passed directly into createStore. Remember that the store is created with the signature, createStore(reducer, initialState). In this case, the initial state has been set to the object, {contacts: contacts}</p><p>Even though this approach works, this is typically used for server side rendering (don\u2019t bother if you don\u2019t know what this means). For now, understand that this approach of setting an initial state in createStore is more used in the real world for server side rendering.</p><p>Right now, remove the initial state in the createStore method.</p><p>We\u2019ll have the initial state of the application set solely by the reducer.</p><p>Trust me, you\u2019ll get the hang of this.</p><p>Here\u2019s what the store/index.js file will look like once you remove the initial state from createStore.</p><p>And here\u2019s the current content of the reducer/index.js file:</p><p>Please change that to this:</p><p>So, what\u2019s happening here?</p><p>Using ES6 default parameters, we have set the state parameter to an initial value of {contacts}.</p><p>This is essentially the same as {contacts: contacts}.</p><p>Hence, the return state statement within the reducer will return this value, {contacts: contacts} as the initial state of the application.</p><p>At this point, the app now works \u2014 just like before. The only difference here is that the initial state of the application is now managed by the Reducer.</p><p>Let\u2019s keep refactoring.</p><h1>Reducer Composition</h1><p>In all the apps we\u2019ve create so far, we have used just one reducer to manage the entire state of the applications.</p><p>What\u2019s the implication of this?</p><p>It is like having just one Cashier in the entire bank hall. How scalable is that?</p><p>Even if the Cashier can do all the work effectively, it may be more manageable \u2014 and perhaps a better customer experience \u2014 to have more than one Cashier in the bank hall.</p><p>Someone\u2019s got to attend to everybody, and it\u2019s a lot of work for just one person!</p><p>The same goes with your Redux applications.</p><p>It is common to have multiple reducers in your application as opposed to one reducer handling all the operations of the state. These reducers are then combined into one.</p><p>For example, there could be 5 or 10 Cashiers in the bank hall, but all of them combined all serve one purpose. That\u2019s how this works as well.</p><p>Consider the state object of the Hello World app we built earlier.</p><p>Pretty simple.</p><p>All we did was have one reducer manage the entire state updates.</p><p>However, consider the state object of the more complex Skypey application:</p><p>Having a single reducer manage the entire state object is doable \u2014 but not the best approach.</p><p>Instead of having the entire object managed by one reducer, what if we had one reducer manage one field in the state object?</p><p>Like a one to one mapping?</p><p>You see what we\u2019re doing there? Introducing more Cashiers!</p><p>Reducer composition requires that a single reducer handles the state update for a single field in the state object.</p><p>For example, for the messages field, you have a messagesReducer. For a contacts field, you also have a contactsReducer and so on.</p><p>One more important thing to point out is that the return value from each of the reducers is solely for the field they represent.</p><p>So, if I had messagesReducer written like this:</p><p>The state returned here is not the state of the entire application.</p><p>No.</p><p>It is only the value of the messages field.</p><p>The same goes for the other reducers.</p><p>Got that?</p><p>Let\u2019s see this in practice, and how exactly these reducers are combined for a single purpose.</p><h1>Refactoring Skypey to Use Multiple Reducers</h1><p>Remember how I talked about multiple reducers handling each field in the state object?</p><p>Right now, you can tell we\u2019ll have the following multiple reducer as seen in the figure below:</p><p>Now, for every field in the state object, we will create a corresponding reducer. The current ones at this stage are, contacts and user.</p><p>Let\u2019s go over how this affects our code first. Then I\u2019ll take a step back to explain how it works again.</p><p>Take a look at reducer/index.js:</p><p>Rename this file to contacts.js.</p><p>This will become the contacts reducer.</p><p>Create a user.js file within the reducers directory.</p><p>This will be the user reducer.</p><p>Here\u2019s the content:</p><p>Again, I have created a generateUser function to generate some static user information.</p><p>Using ES6 default parameters, the initial state is set to the result of invoking this function. Therefore return state will now return a user object.</p><p>Right now, we have two different reducers. Let\u2019s combine them for the greater good :)</p><ul><li>Create an index.js file within the reducers directory</li></ul><p>Firstly, import the two reducers, user and contacts:</p><p>To combine these reducers, we need the helper function combineReducers from redux</p><p>Import it like this:</p><p>Now, index.js will export the combination of both reducers like this:</p><p>Notice that the combineReducers function takes in an object. An object whose shape is exactly like the state object of the application.</p><p>The code block is the same as this:</p><p>The object has keys user and contacts, just like the state object we\u2019ve got in mind.</p><p>What about the values of these keys?</p><p>The values come from the reducers!</p><p>It is important to understand this. Okay?</p><h1>I\u2019m Lost. How does this work again?</h1><p>Let me take a step back and explain how reducer composition works again. This time, from a different perspective.</p><p>Consider the JavaScript object below:</p><p>Now, assume that instead of having the values of the keys hardcoded, we wanted it to be represented by function calls. That may look like this:</p><p>This assumes that getUser() will also return the previous value, \u201cme\u201d. The same goes for the other replaced functions.</p><p>Still following?</p><p>Now, let\u2019s rename these functions.</p><p>Now, the functions have names identical to their corresponding object keys. Instead of getUser(), we now have user().</p><p>Let\u2019s get imaginative.</p><p>Imagine that there existed a certain utility function imported from some library. Let\u2019s call this function, killerFunction.</p><p>Now, killerFunction makes it possible to do this:</p><p>What has changed?</p><p>Instead of invoking each of the functions, you just write the function names. killerFunction will take care of invoking the functions.</p><p>Now using ES6, we can simplify the code further:</p><p>This is the same as the previous code block. Assuming the functions are in scope, and have the same name (identifier) as the object key.</p><p>Got that?</p><p>Now, this is kind of how combineReducer from Redux works.</p><p>The values of every key in your state object will be gotten from the reducer. Do not forget that a reducer is just a function.</p><p>Just like killerFunction, combineReducers is capable of making sure the values are gotten from invoking the passed functions.</p><p>All the key and values put together will then result in the state object of the application.</p><p>That is it!</p><p>An important point to always remember is that when using combineReducers, the value returned from each reducer is not the state of the application.</p><p>It is only the value of the particular key they represent in the state object!</p><p>For example, the user reducer returns the value for the user key in the state. Likewise, the messages reducer returns the value for the messages key in the state.</p><p>Now, here\u2019s the complete content of reducers/index.js:</p><p>Now if you inspect the logs, you\u2019ll find user and contacts right there in the state object.</p><h1>Building the Empty Screen</h1><p>Right now, the Main component just displays the text, main stuff. This isn\u2019t what we want.</p><p>The end goal is to show an empty screen, but show user messages when a contact is clicked on.</p><p>Let\u2019s build the empty screen.</p><p>For this, we\u2019ll need a new component called, Empty.js. While you\u2019re at it, also create a corresponding CSS file, Empty.css.</p><p>Please create these in the components directory.</p><p><Empty /> will render the markup for the empty screen. To do this, it will require a certain user prop.</p><p>Definitely, the user is to be passed in from the state of the application. Don\u2019t forget the overall structure of the state object we resolved earlier:</p><p>So, here\u2019s the current content of the <Main /> component:</p><p>It just returns the text, Main Stuff.</p><p>The <Main /> component is responsible for displaying the <Empty /> component when no user is active. As soon as a user is clicked, <Main /> renders the conversations of the clicked user. This could be represented by a component, <ChatWindow />.</p><p>For this render toggle to work and for <Main /> to render either <Empty /> or <ChatWindow />, we need to keep track of certain activeUserId.</p><p>For example, by default activeUserId will be null, then <Empty /> will be shown.</p><p>However, as soon as a user is clicked, the activeUserId becomes the user_id of the clicked contact. Now, <Main /> will render the <ChatWindow /> component.</p><p>Cool, huh?</p><p>For this to work, we will keep a new field in the state object, activeUserId</p><p>By now, you should know the drill already. To add a new field to the state object, we\u2019ll have this set up in the reducers.</p><p>Create a new file, activeUserId.js in the reducers folder.</p><p>And here\u2019s the content of the file:</p><p>reducers/activeUserId.js</p><p>By default, it returns null.</p><p>Now, hook this newly created reducer to the combineReducer method call like this:</p><p>Now if you inspect the logs, you\u2019ll find activeUserId right there in the state object.</p><p>Let\u2019s move on.</p><p>In App.js, retrieve the user and activeUserId from the store, like this:</p><p>What we had previously was this:</p><p>Now, pass on these values as props to the <Main /> component.</p><p>What we had previously was this:</p><p>Now, let\u2019s have the render logic fleshed out in <Main /></p><p>before:</p><p>now:</p><p>What has changed isn\u2019t difficult to grasp. user and activeUserId are received as props. The return statement within the component has the function renderMainContent invoked.</p><p>All renderMainContent does is check if activeUserId doesn\u2019t exist. If it doesn\u2019t, it renders the empty screen. If it does exist, then the ChatWIndow is rendered.</p><p>Great!</p><p>We don\u2019t have the Empty and ChatWindow components built out yet.</p><p>Forgive me, I\u2019m going to paste in a lot of code at once.</p><p>Edit the Empty.js file to contain this:</p><p>Oops. What\u2019s all that code???</p><p>Take a step back, it\u2019s not as complex as it seems.</p><p>The <Empty /> component takes in a user prop. This user prop is an object that has the following shape:</p><p>Using the ES6 destructuring syntax, grab the name, profile_pic and status from the user object:</p><p>For most users, the name contains two words such as Ohans Emmanuel. Grab the first word and assign it to the variable first_name like this:</p><p>The return statement just spits out a chunk of markup.</p><p>You\u2019ll see the result of this very soon.</p><p>Before we go ahead, let\u2019s not forget to create a ChatWindow component within the containers directory.</p><p>ChatWindow will be responsible for displaying the conversations for an active user contact, and it\u2019s going to do a lot of direct talking to Redux!</p><p>In ChatWIndow.js write the following:</p><p>We will come back to flesh this out. Right now, this is good enough.</p><p>Save all the changes we\u2019ve made so far, and here\u2019s what I\u2019ve got!</p><p>You should have something very similar too.</p><p>The empty screen works, but it is ugly, and no one loves ugly apps.</p><p>I have written the CSS for the <Empty /> component.</p><p>Empty.css</p><p>Just good ol\u2019 CSS. I bet you can figure out the styles.</p><p>Now, here\u2019s the result of that:</p><p>Here\u2019s the result with the devtools docked:</p><p>Now, that definitely looks good!</p><h1>Building the Chat Window</h1><p>Have a look at the logic within the <Main /> component. <ChatWindow /> will only be displayed when activeUserId is present.</p><p>Right now, activeUserId is set to null.</p><p>We need to make sure that the activeUserId is set whenever a contact is clicked.</p><p>What do you think?</p><p>We need to dispatch an action, right?</p><p>Yeah!</p><p>Let\u2019s define the shape of the action.</p><p>Remember than an action is just an object with a type field and a payload.</p><p>The type field is compulsory, while you can call payload anything you like. payload is a good name though. Very common, too.</p><p>Thus, here\u2019s a representation of the action:</p><p>The type or name of the action will be called SET_ACTION_ID.</p><p>In case you were wondering, it is pretty common to use the snake case with capital letters in action types such as SET_ACTION_ID and not setactionid or set-action-id.</p><p>Also, the action payload will be the user_id of the user to be set as active.</p><p>Let\u2019s now dispatch actions upon user interaction.</p><p>Since this is the first time we\u2019re dispatching actions in this application, create a new actions directory. While at it, also create a constants folder.</p><p>In the constants folder, create a new file, action-types.js.</p><p>This file has the sole responsibility of keeping the action type constants. I\u2019ll explain why this is important, shortly.</p><p>Write the following in action-types.js.</p><p>constants/action-types.js</p><p>So, why is this important?</p><p>To understand this, we need to investigate where action types are used in a Redux application.</p><p>In most Redux applications, they will show up in two places.</p><p>1. The Reducer</p><p>When you do switch over the action type in your reducers:</p><p>2. The Action creator</p><p>Within the action creator, you also write code that resembles this:</p><p>Now, have a look at the reducer and action creator logic above. What is common to both?</p><p>The \u201dWITHDRAW_MONEY\u201d string!</p><p>As your application grows and you have lots of these strings flying around the place, you (or someone else) may someday make the mistake of writing \u201dWITDDRAW_MONEY\u201d or \u201dWITHDRAW_MONY\u201d instead of \u201dWITHDRAW_MONEY_\u201d</p><p>The point I\u2019m trying to make is that using raw strings like this makes it easier to have a typo. From experience, bugs that come from typos are super annoying. You may end up searching for so long, only to see the problem was caused by a very small miss on your end.</p><p>Prevent yourself from having to deal with this hassle.</p><p>A good way to do that is to store the strings as constants in a separate file. This way, instead of writing the raw strings in multiple places, you just import the string from the declared constant.</p><p>You declare the constants in one place, but can use them in as many places as possible. No typos!</p><p>This is exactly why we have created the constants/action-types.js file.</p><p>Now, let\u2019s create the action creator.</p><p>action/index.js</p><p>As you can see, I have imported the action type string from the constants folder. Just like I explained earlier.</p><p>Again, the action creator is just a function. I have called this function setActiveUserId. It\u2019ll take in an id of a user and return the action (that is, the object) with the type and payload rightly set.</p><p>With that in place, what\u2019s left is dispatching this action when a user clicks a user, and doing something with the dispatched action within our reducers.</p><p>Let\u2019s keep moving.</p><p>Take a look at the User.js component.</p><p>The first line of the return statement is a div with the class name, User:</p><p>This is the right place to set up the click handler. As soon as this div is clicked, we will dispatch the action we just created.</p><p>So, here\u2019s the change:</p><p>And the handleUserClick function is right here:</p><p>Where setActiveUserId has been imported from where? The action creator!</p><p>Now, below\u2019s all the User.js code you should have at this point:</p><p>containers/User.js</p><p>To dispatch the action, I also had to import the store and called the method, store.dispatch().</p><p>Also note that I have used the ES6 destructuring syntax to grab the user_id from the user argument in handleUserClick.</p><p>If you\u2019re coding along, as I recommend, click any of the user contacts and inspect the logs. You can add a console log to the handleUserClick like this:</p><p>You\u2019ll find the logged user id of the user contact.</p><p>As you may have already noticed, the action is being dispatched, but nothing is changing on the screen. The activeUserId isn\u2019t set in the state object. This is because right now, the reducers know nothing about the dispatched action.</p><p>Let\u2019s fix this, but don\u2019t forget to remove the console.log(user_id) after inspecting the logs.</p><p>Have a look at the activeUserId reducer:</p><p>reducer/activeUserId.js</p><p>You should understand what\u2019s going on here.</p><p>The first line imports the string, SET_ACTIVE_USER_ID.</p><p>We then check if the action passed in is of type SET_ACTIVE_USER_ID . If yes, then the new value of activeUserId is set to action.payload.</p><p>Don\u2019t forget that the action payload contains the user_id of the user contact.</p><p>Let\u2019s see this in action. Does it work as expected?</p><p>Yes!</p><p>Now, the ChatWindow component is rendered with the right activeUserId set.</p><p>As a reminder, it is important to remember that with reducer composition, the returned value of each reducer is the value of the state field they represent, and not the entire state object.</p><h1>Breaking the ChatWindow into smaller components</h1><p>Have a look at what the completed chat window looks like:</p><p>For a more sane development approach, I have broken this into three sub components, Header, Chats and MessageInput:</p><p>So, in order to complete the chatWindow component, we will build these three sub components. We\u2019ll then compose them to form the chatWindow component.</p><p>Ready?</p><p>Let\u2019s begin with the Header component.</p><p>The current content of the chatWindow component is this:</p><p>Not very helpful.</p><p>Update the code to this:</p><p>What\u2019s changed?</p><p>Remember that the activeUserId is passed as props into the ChatWindow component.</p><p>Now, instead of rendering the text, Conversation for user id: \u2026 , render the Header component.</p><p>The Header component cannot be rendered properly without having knowledge of the clicked user. Why?</p><p>The name and status rendered in the Header are those of the clicked user.</p><p>To keep track of the active user, a new variable, activeUser is created, and the value retrieved from the state object like this: const activeUser = state.contacts[activeUserId].</p><p>How does this work?</p><p>First, we grab the state from the Redux store: const state = store.getState().</p><p>Now, remember that every contact of the application user is stored in the contacts field. Also, every user is mapped by their user_id.</p><p>Thus, the active user can be retrieved by fetching the user with the corresponding id field from the contacts object: state.contacts[activeUserId].</p><p>All good?</p><p>At this point we need to build out the rendered Header component.</p><p>Create the files, Header.js and Header.css within the components directory.</p><p>The content of Header.js is simple. Here it is:</p><p>It\u2019s a stateless functional component that renders a header element and h1 and p tags to hold the name and status of the active user.</p><p>Remember that the active user is the clicked user from the sidebar.</p><p>The styles for the <Header /> component are equally simple. Here they are:</p><p>Now, we\u2019ve got this baby kicking!</p><p>Amazing. If you\u2019re still here, you\u2019re doing really great!</p><p>Let\u2019s move on to building the <Chats /> component.</p><p>The <Chats /> component is essentially a rendered list of a user\u2019s conversations.</p><p>So, where do we get these conversations from?</p><p>Yeah, from the state of the application.</p><p>Like I explained earlier, a real world app will fetch the user conversations from a server. However, my approach to learning Redux is that you eliminate as many complexities as possible when learning the fundamentals.</p><p>To that effect, there\u2019ll be no server fetching resource here. We\u2019ll hook up the data using some helper functions I have created for random user data generation.</p><p>Let\u2019s start by hooking up the required data to the state of the application.</p><p>The process is the same as we\u2019ve done multiple times already.</p><ol><li>Create a Reducer</li><li>Using ES6, add a default parameter value to the reducer</li><li>Include the reducer in the combineReducers function call.</li></ol><p>Will you try that out before moving on to my solution?</p><p>Here comes my solution, anyway.</p><p>Create a new file, messages.js in the reducers directory. This will be the messages reducer.</p><p>Here is the content of the messages reducer.</p><p>reducers/messages.js</p><p>To generate random messages, I have imported the getMessages function from static-data</p><p>This function takes an amount, represented by a number. The getMessages function will then generate that amount of messages for each user contact.</p><p>For example, getMessages(10) will generate 10 messages per user contact.</p><p>Now, include the reducer in the combineReducers function call in reducers/index.js</p><p>reducers/index.js</p><p>Doing this will include a messages field in the state object.</p><p>Here\u2019s a look at the logs. You\u2019ll now find messages as seen below:</p><p>With that in place, we can safely resume building the Chats component.</p><p>If you haven\u2019t already, create the files, Chats.js and Chats.css in the components directory.</p><p>Now, import Chats and render it below the <Header /> component in ChatWindow.</p><p>containers/ChatWindow.js</p><p>The <Chats/> component will take the list of messages from the state object, map over these, and then render them beautifully.</p><p>Remember that the messages passed into Chats are specifically the messages for the active user!</p><p>Whereas state.messages holds all the messages for every user contact, state.messages[activeUserId] will fetch the messages for the active user.</p><p>This is why every conversation is mapped to the user id of the user \u2014 for easy retrieval as we have done.</p><p>Grab the active user\u2019s messages and pass them as props in Chats.</p><p>containers/ChatWindow.js</p><p>Now, remember that the messages of each user is a giant object with each message having a number field:</p><p>For easier iteration and rendering, we\u2019ll convert this to an array. Just like we did with the list of users in the Sidebar.</p><p>For that, we\u2019ll need Lodash.</p><p>containers/ChatWindow.js</p><p>Now, instead of passing activeMsgs, we pass in _.values(activeMsgs).</p><p>There\u2019s one more important step before we view the results.</p><p>The component Chats has not been created.</p><p>In Chats.js, write the following. I\u2019ll explain afterwards.</p><p>containers/Chat.js</p><p>It isn\u2019t too much to comprehend, but I\u2019ll explain what\u2019s going on.</p><p>Firstly, have a look at the the Chats component. You\u2019ll notice that I have used a class-based component here. You\u2019ll see why later on.</p><p>In the render function, we map over the messages props and for each message , we return a Chat component.</p><p>The Chat component is super simple:</p><p>For each message that\u2019s passed in, the text content of the message and the is_user_msg flag are both grabbed using the ES6 destructuring syntax, const { text, is_user_msg } = message;</p><p>The return statement is more interesting.</p><p>A simple span tag is rendered.</p><p>Strip out some of the JSX magic, and here\u2019s the simple form of what is rendered:</p><p>The text content of the message is wrapped in a span element. Simple.</p><p>However, we need to differentiate between the application user\u2019s message, and the contact\u2019s message.</p><p>Don\u2019t forget that a conversation happens with at least two people sending messages back and forth.</p><p>If the message being rendered is the user\u2019s message, we want the rendered markup to be this:</p><p>And if not, we want this:</p><p>Note that what\u2019s changed is the is-user-msg class being toggled.</p><p>This way we can specifically style the user\u2019s message using the css selector shown below:</p><p>So, this is why we have some fancy JSX for rendering the class names based on the presence or absence of the is_user_msg flag.</p><p>The real sauce is this:</p><p>${is_user_msg ? \"is-user-msg\" : \u201c\u201d</p><p>That\u2019s the ternary operator right there!</p><p>You can make sense of all the code within containers/Chats.js now, huh?</p><p>Here\u2019s the result so far.</p><p>The messages are rendered but it doesn\u2019t look so good. This is because all the messages are rendered in span tags.</p><p>Since span tags are inline elements, all the messages just render in a continuous line, looking squashed.</p><p>This is where my homeboy CSS shines.</p><p>Let\u2019s sprinkle on some CSS goodness and get this party started :)</p><p>Starting with the Chat Window, create a new file, ChatWindow.css in the containers directory.</p><p>Do not forget to import it in ChatWindow.js like this: import \"./ChatWindow.css\"</p><p>Write this in there:</p><p>This will make sure that the ChatWindow takes up all available height, 100vh. I have also made it a flex container so I can use some flex goodies while aligning its items, namely, Header, Chats and Message.</p><p>You can see the ChatWindow with a red border below:</p><p>Let\u2019s move on to styling the Chat Messages.</p><p>components/Chats.css</p><p>Gosh! This is looking so good already!</p><p>Let me explain some of the importance style declarations in there.</p><p>With flex: 1 1 0, .Chats is made to grow (take up available space) and shrink accordingly within ChatWindow.</p><p>.Chats is also made of a flex-container with display: flex. By setting flex-direction: column all the chat messages are aligned vertically. They are no longer inline elements but flex items!</p><p>Chats that aren\u2019t those of the user are given a blueish background gradient with background: linear-gradient(90deg, #1986d8, #7b9cc2);</p><p>This is overridden if the message is the user\u2019s:</p><p>I believe you can make sense of everything else.</p><p>So far so good!</p><p>I\u2019m really excited about how far we\u2019ve come. One last step, and the chat window is completely built!</p><p>Let\u2019s build the Message Input component.</p><p>We\u2019ve had to build more difficult components. This one won\u2019t be difficult to build.</p><p>However, there\u2019s one point to consider.</p><p>The Input component will be a controlled component. Therefore we will be storing the input value in the application state object.</p><p>For this, we\u2019ll need a new field called typing in the state object.</p><p>Let\u2019s get that in there.</p><p>For our considerations, whenever a user types, we will dispatch a SET_TYPING_VALUE action type.</p><p>Be sure add this constant in the constants/action-types.js file:</p><p>Also, the shape of the dispatched action will look like this:</p><p>Where the payload of the action is the value typed in the input. Let\u2019s create an action creator to handle the creation of this action:</p><p>actions/index.js</p><p>Now, let\u2019s create a new typing reducer, one that will take this created action into consideration.</p><p>reducers/typing.js</p><p>The default value for the typing field will be set to an empty string.</p><p>However, when an action with type SET_TYPING_VALUE is dispatched, the value in the payload will be returned.</p><p>Otherwise, the default state \"\" will be returned.</p><p>Before I forget, be sure to include this newly created reducer in the combineReducers function call.</p><p>reducers/index.js</p><p>Be sure to inspect the logs and confirm that a typing field is indeed attached to the state object.</p><p>Okay. Let\u2019s now create the actual MessageInput component. Since this component will talk directly to the Redux store for setting and getting its typing value, it should be created in the containers directory.</p><p>While at it, also create a MessageInput.css file as well.</p><p>containers/MessageInput</p><p>Nothing magical happening up there.</p><p>Whenever the user types into the input box, the onChange event is fired. This is turn fires the handleChange function. handleChange in turn dispatches the setTypingValue action we created earlier. This time, passing the required payload, e.target.value.</p><p>We\u2019ve created the component, but to show up in the chat window we need to include it in the return statement of ChatWindow.js:</p><p>And now, we\u2019ve got this working!</p><p>Uh, but it is really ugly :(</p><p>Let\u2019s make it beautiful.</p><p>containers/MessageInput.css</p><p>That should be enough to do the Magic!</p><p>Looking better?</p><p>I bet it is!</p><h1>Submitting the Form</h1><p>Right now, when you type a message and hit enter, it doesn\u2019t show up in the conversation list, and the page reloads.</p><p>Terrible!</p><p>Let\u2019s handle the form submission.</p><p>In MessageInput.js, add a handleSubmit event handler as shown below:</p><p>Think about it for a minute. To update the list of messages in the conversation\u2026we need to dispatch an action!</p><p>This action needs to take the value in the input box, and add it to the messages of the active user.</p><p>Okay, so this looks like a good shape for the action:</p><p>Got that?</p><p>Now, let\u2019s write the handleSubmit function:</p><p>Here\u2019s what is going on within the handleSubmit function:</p><p>With e.preventDefault(), I think you already know what that does. The typing value and activeUserId are fetched from the state since they\u2019ll both be used to create the dispatched action.</p><p>And finally, the action is dispatched with store.dispatch(sendMessage(typing, activeUserId)).</p><p>Oops, but with an action creator, sendMessage.</p><p>In actions/index.js, create the sendMessage action creator:</p><p>That also means the SEND_MESSAGE action type constant needs to be created in constants/action-types.js.</p><p>Before testing the code, you should not forget to update the action creator imports in MessageInput.js to include sendMessage.</p><p>So try it out. Does the code work?</p><p>Uh, no it doesn\u2019t.</p><p>The form is submitted, the page doesn\u2019t reload due to the form submission, the action is dispatched, but still no updates.</p><p>We\u2019ve done nothing wrong, except that the action type hasn\u2019t been catered for in any of the reducers.</p><p>The reducers know nothing about this newly created action of type, SEND_MESSAGE.</p><p>Let\u2019s fix that next.</p><h1>Updating the Message State</h1><p>Here\u2019s a list of all the reducers we\u2019ve got at this point:</p><p>Which of these do you think should be concerned with updating the messages in a user conversation?</p><p>Yes, the messages reducer.</p><p>Here\u2019s the current content of the messages reducer:</p><p>Not so much going on in there.</p><p>Import the SEND_MESSAGE action type, and let\u2019s begin to handle that in this messages reducer.</p><p>Now, we are handling the the action type, SEND_MESSAGE but an empty string is returned.</p><p>This isn\u2019t what we want, but we\u2019ll build this up from here. In the mean time, what do you think is the consequence of returning an empty string here?</p><p>Let me show you.</p><p>All the messages disappear! But why? That\u2019s because as soon as we hit enter, the SEND_MESSAGE action is dispatched. As soon as this action reaches the reducer, the reducer returns an empty string \u201c\u201d.</p><p>Thus, there are no messages in the state object. It\u2019s all gone!</p><p>This is definitely unacceptable.</p><p>What we want is to retain whatever messages are in state. However, we want to add a new message only to the messages of the active user.</p><p>Okay. But how?</p><p>Remember that every user has their messages mapped to their ID. All we need to do is target this ID and ONLY update the messages in there.</p><p>Here\u2019s what that looks like graphically:</p><p>Please take a look at the console in the graphic above. The graphic assumes that a user has submitted the form input three times with the text, Hi.</p><p>As expected the text, Hi shows up three different times in the chat conversations for the particular contact.</p><p>Now, have a look at the console. It\u2019ll give you an idea of what we\u2019re aiming for in the code solution to come.</p><p>In this application, every user has 10 messages. Each of the messages has a number that ranges from 0 to 9.</p><p>Thus, whenever a user submits a new message, we want to add a new message object but with increasing numbers!</p><p>In the console in the graphic above, you\u2019ll notice that the number increases. 10 , 11 and 12.</p><p>Also, the message shape remains the same, having the number , text and is_user_msg fields.</p><p>is_user_msg will always be true for these messages. They come from the user!</p><p>Now, let\u2019s represent this with some code.</p><p>I\u2019m going to explain this well, because the code may look complex at first.</p><p>Anyway, here is the representation within the switch block of the messages reducer:</p><p>Let\u2019s go over this line by line.</p><p>Just after the case SEND_MESSAGE:, we keep a reference to the message and userId passed in from the action.</p><p>To go on, it\u2019s also important to grab the active user\u2019s messages. That is done on the next line with:</p><p>As you may already know, state here isn\u2019t the overall state object of the application. No. It is the state managed by the reducer for the messages field.</p><p>Since every contact\u2019s message is mapped with their user ID, the code above gets the messages for the specific user ID passed in from the action.</p><p>Now, every message has a number. This acts like a unique ID of some sorts. For incoming messages to have a unique ID, _.keys(allUserMsgs) will return an array of all the keys of the user\u2019s messages.</p><p>Okay let me explain.</p><p>_.keys is like Object.keys(). The only difference here is that I\u2019m using the helper from Lodash. You can use Object.keys() if you want.</p><p>Also, allUserMsgs is an object that contains all of the user\u2019s messages. It will look something like this:</p><p>This will continue until the 10th message!</p><p>When we do _.keys(allUserMsgs) or Object.keys(allUserMsgs), this will return an array of all the keys. Something like this:</p><p>The Array.pop() function is used to retrieve the last item in the array. This is the largest number already existing for the contact\u2019s messages. Kind of like the last contact\u2019s message ID.</p><p>Once that is retrieved, we add + 1 to it. Making sure that the new message gets + 1 of the highest number of the available messages.</p><p>Here\u2019s all the code responsible for that again:</p><p>If you\u2019re wondering why there\u2019s a + before the _.keys(allUserMsgs).pop() + 1, this is to make sure that the result is converted to a Number instead of a String.</p><p>That is it!</p><p>On to the meat of the code block:</p><p>Take a look closely, and I\u2019m sure you\u2019ll make sense out of it.</p><p>...state will make sure we don\u2019t mess with the previous messages in the application.</p><p>Because we are using Object notations, we can easily grab the message with the particular user ID with [userID]</p><p>Within the object, we make sure that all of the user\u2019s messages are untouched: ...allUserMsgs</p><p>Finally, we add the new message object with the previously computed number!</p><p>It may look complex, but it isn\u2019t. Hopefully, you have experience with this sort of non-mutating state computations from your React development.</p><p>Still confused?</p><p>Have a look at the return statement again. This time, with some code colours. That may help breathe life into the code:</p><p>And that, my friend, is the end of updating the conversation when an input is entered!</p><p>We have just a few tweaks to make.</p><h1>Tweaks to Make the Chat Experience Natural</h1><p>Here\u2019s what the current state of things looks like when I write Hello! and submit three times.</p><p>You\u2019ll quickly notice two problems.</p><ol><li>Even though the inputs are submitted, and the messages rightly added to the conversations, I have to scroll down to see the messages. This isn\u2019t how chat apps work. The chat window should automatically scroll down.</li><li>It would be nice to clear the value of the input when submitted. This way the user gets some immediate feedback that their input has been submitted.</li></ol><p>The second is a much easier fix. Let\u2019s start with that.</p><p>We are already dispatching a SEND_MESSAGE action. We can listen for this action and clear the input value in the typing.js reducer.</p><p>Let\u2019s do just that.</p><p>Add this within the switch block of the typing.js reducer:</p><p>Which brings all the code to this:</p><p>reducer/typing.js</p><p>Now, once the action gets here, the typing value will be cleared and an empty string will be returned.</p><p>Here\u2019s that in action:</p><p>It works!</p><p>As expected, the input value is now cleared.</p><p>Okay, let\u2019s make sure the chat window scrolls when updated.</p><p>To do this we\u2019ll need a bit of DOM manipulation. This is the reason I insisted on making <Chats /> a class component.</p><p>Okay, let\u2019s talk code.</p><p>Firstly, we need to create a Ref to hold the Chats DOM Node.</p><p>If you\u2019re not familiar with React.createRef(), it is perfectly normal. This is because React 16 introduced a new way to create Refs.</p><p>We keep a reference to this Ref via this.chatsRef.</p><p>In the DOM rendered, we then update the ref like this:</p><p>We now have a reference to the div that holds all the chat conversations.</p><p>Let\u2019s make sure this is always scrolled to the bottom when updated.</p><p>Say hello to the lifecycle methods!</p><p>So, as soon as the component mounts, we invoke a scrollToBottom function. We do the same whenever the app updates, too!</p><p>Now, here\u2019s the scrollToBottom function:</p><p>All we are doing is updating the scrollTop property to match the scrollHeight</p><p>Not so difficult. The this.chatsRef.current refers to the DOM node in question.</p><p>Here\u2019s all the code for Chats.js at this point.</p><p>Hey! With that we have Skypey working as expected!</p><p>Here\u2019s a Demo. Note how the scroll position updates as soon the component mounts, and when a messaged is typed, the component also updates.</p><p>Awesome stuff!</p><p>So, excited!</p><p>We\u2019ve come so far :)</p><h1>Conclusion and Summary</h1><p>Oh my! This has been an awesome experience for me. Building Skypey was a lot of fun.</p><p>Did you love it? I\u2019d love to see your own version of Skypey. Change the colors, tweak the design, and build something better!</p><p>When you\u2019re done, send me a tweet and I\u2019ll be delighted to cheer you up.</p><p>Here\u2019s a summary of some of the things we\u2019ve learned so far:</p><ul><li>It is a good practice to always plan your application development process before jumping into the code.</li><li>In your state object, avoid nested entities at all cost. Keep the state object normalized.</li><li>Storing your state fields as objects does have some advantages. Be equally aware of the issues with using objects, mainly the lack of order.</li><li>The lodash utility library comes very handy if you choose to use objects over arrays within your state object.</li><li>No matter how little, always take some time to design the state object of your application.</li><li>With Redux, you don\u2019t always have to pass down props. You can access state values directly from the store.</li><li>Always keep a neat folder structure in your Redux apps, like having all major Redux actors in their own folders. Apart from the neat overall code structure, this makes it easier for other people to collaborate on your project as they are likely conversant with the same folder structure.</li><li>Reducer composition is really great especially as your app grows. This increases testability and reduces the tendency for hard-to-track errors.</li><li>For reducer composition, make use of combineReducers from the redux library.</li><li>The object passed into the combineReducers function is designed to resemble the state of your application, with each value gotten from the associated reducers.</li><li>Always break larger components into smaller manageable bits. It\u2019s a lot easier to build your way up that way.</li></ul><p>Catch you later!</p><h1>Exercises</h1><p>The Skypey app we\u2019ve built here isn\u2019t all there is to the app. There are two more tasks for you.</p><ul><li>Extend the Skypey app we built to handle editing a user\u2019s message as shown below.</li></ul><ul><li>Extend the Skypey app we built to also handle the deletion of a user\u2019s message. Just as shown below.</li></ul><p>Those should be fun to implement!</p><h1>Chapter 5: What Next ?</h1><p>The book you\u2019re currently reading is one out of three in the Redux Trio sequel.</p><p>In the second book, Understanding Redux 2, I explain in great detail the tricky advanced Redux concepts such as Middlewares, Higher Order components, Making Ajax calls, and more.</p><p>It doesn\u2019t end there.</p><p>I\u2019ll also show you around some of the most loved community Redux libraries for solving common problems. Reselect, Redux-form, Redux-thunk, Recompose, and many more.</p><p>The following section is an excerpt from, Understanding Redux 2.</p><p>Introducing React-Redux</p><p>Going to the bank each time you need to make a withdrawal from your account is such a pain. Well, don\u2019t sweat it. This is 2018. We\u2019ve got internet banking, right?</p><p>Back to Redux.</p><p>Setting up the Reducer, subscribing to the Store, listening and re-rendering upon state changes \u2026 we can reduce some of the hassles.</p><p>Like Internet banking brings a breath of fresh air to the process of withdrawing money from your account, \u2018bindings\u2019 such as React-redux also make it slightly easier to use Redux with React \u2014 without performance concerns.</p><p>How sweet.</p><p>Ready?</p><p>I cover this deeply in the follow up book, Understanding Redux 2.</p><p>And lots more!</p><p>Until then, I\u2019ll catch you later!</p><p>Hey, keep coding!</p><p>Much love \ud83d\ude0d\ud83d\ude0d</p>", "tags": ["Technology", "React", "Redux", "Programming", "JavaScript"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*nUcpS2tW6e2SGzyMowxF8A.png"], "url": "https://medium.com/webbdev/solid-4ffc018077da", "dateCreated": "2018-10-22T07:06:04.020Z", "datePublished": "2018-10-22T07:06:04.020Z", "dateModified": "2019-08-25T13:08:09.700Z", "headline": "\u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b SOLID, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u043d\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a", "name": "\u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b SOLID, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u043d\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a", "description": "\u041e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u043e \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u041f\u041e \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u0412 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u041e\u041e\u041f \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430\u043c \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0435 \u043d\u0435\u043a\u043e\u0435\u0439\u2026", "identifier": "4ffc018077da", "author": {"@type": "Person", "name": "Nikita", "url": "https://medium.com/@nbandaruk"}, "creator": ["Nikita"], "publisher": {"@type": "Organization", "name": "WebbDEV", "url": "https://medium.com/webbdev", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*sUzNLrHa6z-Ab1RmkvjqdA.png"}}, "mainEntityOfPage": "https://medium.com/webbdev/solid-4ffc018077da"}, "content": "<h1>\u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b SOLID, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u043d\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a</h1><a></a><a>Nikita</a><a>Oct 22, 2018</a><p>\u0415\u0449\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u043d\u0430 \u043d\u0430\u0448\u0435\u043c \u0441\u0430\u0439\u0442\u0435.</p><p>\u041e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u043e \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u041f\u041e \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u0412 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u041e\u041e\u041f \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430\u043c \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0435 \u043d\u0435\u043a\u043e\u0435\u0439 \u043e\u0431\u0449\u0435\u0439 \u0446\u0435\u043b\u044c\u044e \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043e\u043c, \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445, \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0430\u0441\u0442\u0435\u0439 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041e\u0434\u043d\u0430\u043a\u043e \u0441\u0430\u043c\u043e \u043f\u043e \u0441\u0435\u0431\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u041e\u041e\u041f \u043d\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u0430\u0441\u0442\u0440\u0430\u0445\u043e\u0432\u0430\u043d \u043e\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0433\u043e, \u0437\u0430\u043f\u0443\u0442\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u044f\u0436\u0435\u043b\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c. \u0420\u043e\u0431\u0435\u0440\u0442 \u041c\u0430\u0440\u0442\u0438\u043d, \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043c\u043e\u0447\u044c \u0432\u0441\u0435\u043c \u0436\u0435\u043b\u0430\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u041e\u041e\u041f-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u043f\u044f\u0442\u044c \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0433\u043e\u0432\u043e\u0440\u044f \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445, \u0441 \u043f\u043e\u0434\u0430\u0447\u0438 \u041c\u0430\u0439\u043a\u043b\u0430 \u0424\u044d\u0437\u0435\u0440\u0441\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0430\u043a\u0440\u043e\u043d\u0438\u043c SOLID.</p><h1>\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 SOLID?</h1><p>\u0412\u043e\u0442 \u043a\u0430\u043a \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0430\u043a\u0440\u043e\u043d\u0438\u043c SOLID:</p><ul><li>S: Single Responsibility Principle (\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438).</li><li>O: Open-Closed Principle (\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438-\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438).</li><li>L: Liskov Substitution Principle (\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0411\u0430\u0440\u0431\u0430\u0440\u044b \u041b\u0438\u0441\u043a\u043e\u0432).</li><li>I: Interface Segregation Principle (\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430).</li><li>D: Dependency Inversion Principle (\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0438\u043d\u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439).</li></ul><p>\u0421\u0435\u0439\u0447\u0430\u0441 \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u044d\u0442\u0438 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u043d\u0430 \u0441\u0445\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043c\u043e\u0447\u044c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044e \u043f\u043e\u043d\u044f\u0442\u044c \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b SOLID, \u0443\u0437\u043d\u0430\u0442\u044c, \u043a\u0430\u043a \u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0438 \u043a\u0430\u043a \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0438\u043c, \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u0443\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0410\u0432\u0442\u043e\u0440 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u043d\u0435 \u0441\u0442\u0440\u0435\u043c\u0438\u043b\u0441\u044f \u043a \u0442\u043e\u043c\u0443, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0439\u0442\u0438 \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445.</p><h1>\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438</h1><p>\u00ab\u041e\u0434\u043d\u043e \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0435. \u0412\u0441\u0435\u0433\u043e \u043e\u0434\u043d\u043e.\u00bb \u2014 \u041b\u043e\u043a\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u0421\u043a\u0443\u0440\u0434\u0436\u0443 \u0432 \u0444\u0438\u043b\u044c\u043c\u0435 \u00ab\u0422\u043e\u0440: \u0420\u0430\u0433\u043d\u0430\u0440\u0451\u043a\u00bb.\u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0435\u0448\u0430\u0442\u044c \u043b\u0438\u0448\u044c \u043e\u0434\u043d\u0443 \u0437\u0430\u0434\u0430\u0447\u0443.</p><p>\u041a\u043b\u0430\u0441\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u0435\u043d \u043b\u0438\u0448\u044c \u0437\u0430 \u0447\u0442\u043e-\u0442\u043e \u043e\u0434\u043d\u043e. \u0415\u0441\u043b\u0438 \u043a\u043b\u0430\u0441\u0441 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447, \u0435\u0433\u043e \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u0437\u0430\u0434\u0430\u0447, \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c. \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043e\u0434\u043d\u043e\u0439 \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432\u0435\u0434\u0443\u0442 \u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c \u0432 \u0434\u0440\u0443\u0433\u043e\u0439.</p><p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043a \u043a\u043b\u0430\u0441\u0441\u0430\u043c, \u043d\u043e \u0438 \u043a \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0432 \u0431\u043e\u043b\u0435\u0435 \u0448\u0438\u0440\u043e\u043a\u043e\u043c \u0441\u043c\u044b\u0441\u043b\u0435.</p><p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u044d\u0442\u043e\u0442 \u043a\u043e\u0434:</p><p>\u041a\u043b\u0430\u0441\u0441 Animal, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0437\u0434\u0435\u0441\u044c, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0435. \u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u041a\u0430\u043a \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442\u0441\u044f \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f?</p><p>\u0412 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u043c \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0430\u0441\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0435\u0448\u0430\u0442\u044c \u043b\u0438\u0448\u044c \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u043e\u0434\u043d\u0443 \u0437\u0430\u0434\u0430\u0447\u0443. \u041e\u043d \u0436\u0435 \u0440\u0435\u0448\u0430\u0435\u0442 \u0434\u0432\u0435, \u0437\u0430\u043d\u0438\u043c\u0430\u044f\u0441\u044c \u0440\u0430\u0431\u043e\u0442\u043e\u0439 \u0441 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 saveAnimal \u0438 \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u0438\u0440\u0443\u044f \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0438 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 getAnimalName.</p><p>\u041a\u0430\u043a \u0442\u0430\u043a\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u043c?</p><p>\u0415\u0441\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c, \u0442\u043e \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0435 \u0441 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\u043c. \u0422\u0430\u043a\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c\u044e, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043e\u0434\u043d\u0438\u0445 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c \u0437\u0430\u0442\u0440\u0430\u0433\u0438\u0432\u0430\u044e\u0442 \u0434\u0440\u0443\u0433\u0438\u0435, \u0447\u0442\u043e \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442 \u0434\u043e\u043c\u0438\u043d\u043e.</p><p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0432\u044b\u0448\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u043c \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0449\u0451 \u043e\u0434\u0438\u043d \u043a\u043b\u0430\u0441\u0441, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\u043c, \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u2014 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432 \u043d\u0451\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 Animal:</p><p>\u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0432\u043e\u0434\u0443 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u0421\u0442\u0438\u0432 \u0424\u0435\u043d\u0442\u043e\u043d: \u00ab\u041f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u0443\u044f \u043a\u043b\u0430\u0441\u0441\u044b, \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u044c\u0441\u044f \u043a \u0442\u043e\u043c\u0443, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0438\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442 \u043f\u043e \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u0436\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c. \u041d\u0430\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u0442\u0430\u0440\u0430\u0442\u044c\u0441\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b\u00bb.</p><p>\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u043d\u0443\u0442\u0440\u0438 \u043c\u043e\u0434\u0443\u043b\u044f, \u0442\u043e \u0435\u0441\u0442\u044c \u043a \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0438, \u0440\u0435\u0448\u0430\u0435\u043c\u044b\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u043d\u0435\u0433\u043e, \u0445\u043e\u0440\u043e\u0448\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0435\u0433\u043e \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0446\u0435\u043b\u0438.</p><h1>\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438-\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438</h1><p>\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 (\u043a\u043b\u0430\u0441\u0441\u044b, \u043c\u043e\u0434\u0443\u043b\u0438, \u0444\u0443\u043d\u043a\u0446\u0438\u0438) \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f, \u043d\u043e \u043d\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.</p><p>\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u043a\u043b\u0430\u0441\u0441\u043e\u043c Animal.</p><p>\u041c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0430 Animal, \u0438 \u0443\u0437\u043d\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u043a\u0430\u043a\u0438\u0435 \u0437\u0432\u0443\u043a\u0438 \u043e\u043d\u0438 \u0438\u0437\u0434\u0430\u044e\u0442. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c, \u0447\u0442\u043e \u043c\u044b \u0440\u0435\u0448\u0430\u0435\u043c \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 AnimalSounds:</p><p>\u0421\u0430\u043c\u0430\u044f \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0442\u0430\u043a\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0442\u043e, \u043a\u0430\u043a\u043e\u0439 \u0437\u0432\u0443\u043a \u0438\u0437\u0434\u0430\u0451\u0442 \u0442\u043e \u0438\u043b\u0438 \u0438\u043d\u043e\u0435 \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0435, \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b. \u0424\u0443\u043d\u043a\u0446\u0438\u044f AnimalSound \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438-\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438, \u0442\u0430\u043a \u043a\u0430\u043a, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0432\u0438\u0434\u043e\u0432 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445, \u043d\u0430\u043c, \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441 \u0435\u0451 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0443\u0437\u043d\u0430\u0432\u0430\u0442\u044c \u0437\u0432\u0443\u043a\u0438, \u0438\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0438\u043c\u0438, \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u0435\u0451 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c.</p><p>\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u043e\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442:</p><p>\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u043c \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043a\u043e\u0434 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 AnimalSound:</p><p>\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u0442\u0435, \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u043e\u0432\u043e\u0433\u043e \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043a\u043e\u0434 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440 \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439, \u043d\u043e \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435, \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0432 \u043d\u0435\u0451 \u043d\u043e\u0432\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f if.</p><p>\u041a\u0430\u043a \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044e AnimalSound \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438-\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438? \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u2014 \u0442\u0430\u043a:</p><p>\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0443 \u043a\u043b\u0430\u0441\u0441\u0430 Animal \u0442\u0435\u043f\u0435\u0440\u044c \u0435\u0441\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 makeSound. \u041f\u0440\u0438 \u0442\u0430\u043a\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u043d\u0443\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043a\u043b\u0430\u0441\u0441\u044b, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445, \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u043b\u0438 \u0431\u044b \u043a\u043b\u0430\u0441\u0441 Animal \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u043b\u0438 \u0431\u044b \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434.</p><p>\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0435\u0433\u043e \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e, \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 makeSound, \u0430 \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u043c\u0438 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 AnimalSound \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430.</p><p>\u0415\u0441\u043b\u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u0431\u044a\u0435\u043a\u0442, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043d\u043e\u0432\u043e\u0435 \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0435, \u0444\u0443\u043d\u043a\u0446\u0438\u044e AnimalSound \u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0435 \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f. \u041c\u044b \u043f\u0440\u0438\u0432\u0435\u043b\u0438 \u0435\u0451 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438-\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438.</p><p>\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0435\u0449\u0451 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u043c\u0435\u0440.</p><p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043c\u0430\u0433\u0430\u0437\u0438\u043d. \u041c\u044b \u0434\u0430\u0451\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u0441\u043a\u0438\u0434\u043a\u0443 \u0432 20%, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0442\u0430\u043a\u043e\u0439 \u043a\u043b\u0430\u0441\u0441:</p><p>\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0435\u0448\u0435\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u0434\u0432\u0435 \u0433\u0440\u0443\u043f\u043f\u044b. \u041b\u044e\u0431\u0438\u043c\u044b\u043c (fav) \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u0434\u0430\u0451\u0442\u0441\u044f \u0441\u043a\u0438\u0434\u043a\u0430 \u0432 20%, \u0430 VIP-\u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c (vip) \u2014 \u0443\u0434\u0432\u043e\u0435\u043d\u043d\u0430\u044f \u0441\u043a\u0438\u0434\u043a\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u2014 40%. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u043b\u043e\u0433\u0438\u043a\u0443, \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p><p>\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438-\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438. \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e, \u0437\u0434\u0435\u0441\u044c, \u0435\u0441\u043b\u0438 \u043d\u0430\u043c \u043d\u0430\u0434\u043e \u0434\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e\u0441\u043e\u0431\u0443\u044e \u0441\u043a\u0438\u0434\u043a\u0443, \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0432 \u043a\u043b\u0430\u0441\u0441 \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u0434.</p><p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438-\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438, \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 Discount. \u0412 \u044d\u0442\u043e\u043c \u043d\u043e\u0432\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u043c\u044b \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c:</p><p>\u0415\u0441\u043b\u0438 \u0440\u0435\u0448\u0435\u043d\u043e \u0434\u0430\u0442\u044c \u0441\u043a\u0438\u0434\u043a\u0443 \u0432 80% \u00ab\u0441\u0443\u043f\u0435\u0440-VIP\u00bb \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0442\u0430\u043a:</p><p>\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u0442\u0435, \u0442\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0430 \u043d\u0435 \u0438\u0445 \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f.</p><h1>\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0411\u0430\u0440\u0431\u0430\u0440\u044b \u041b\u0438\u0441\u043a\u043e\u0432</h1><p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0437\u0430\u043c\u0435\u043d\u043e\u0439 \u0434\u043b\u044f \u0441\u0432\u043e\u0438\u0445 \u0441\u0443\u043f\u0435\u0440\u043a\u043b\u0430\u0441\u0441\u043e\u0432.</p><p>\u0426\u0435\u043b\u044c \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043a\u043b\u0430\u0441\u0441\u044b-\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432\u043c\u0435\u0441\u0442\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u044b, \u043d\u0435 \u043d\u0430\u0440\u0443\u0448\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0415\u0441\u043b\u0438 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432 \u043a\u043e\u0434\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0442\u0438\u043f \u043a\u043b\u0430\u0441\u0441\u0430, \u0437\u043d\u0430\u0447\u0438\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442\u0441\u044f.</p><p>\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430, \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0441\u044c \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c Animal. \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430\u0445 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0435\u0439 \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e.</p><p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 (\u0438 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438-\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438). \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u043d\u0430\u0442\u044c \u043e \u0442\u0438\u043f\u0430\u0445 \u0432\u0441\u0435\u0445 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0438\u043f\u0430, \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e. \u041a\u0430\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c:</p><p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u043d\u0430\u0440\u0443\u0448\u0430\u043b\u0430 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0435\u0451 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439, \u0441\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0421\u0442\u0438\u0432\u043e\u043c \u0424\u0435\u043d\u0442\u043e\u043d\u043e\u043c. \u041e\u043d\u0438 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043c\u0435\u0442\u043e\u0434\u044b, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0435 \u0438\u043b\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441 \u0442\u0438\u043f\u043e\u043c \u043d\u0435\u043a\u043e\u0435\u0433\u043e \u0441\u0443\u043f\u0435\u0440\u043a\u043b\u0430\u0441\u0441\u0430 (Animal \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435) \u0434\u043e\u043b\u0436\u043d\u044b \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0442\u0438\u043f\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0435\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u044b (Pigeon).</p><p>\u0412\u043e\u043e\u0440\u0443\u0436\u0438\u0432\u0448\u0438\u0441\u044c \u044d\u0442\u0438\u043c\u0438 \u0441\u043e\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e AnimalLegCount:</p><p>\u0422\u0435\u043f\u0435\u0440\u044c \u044d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442\u0441\u044f \u0442\u0438\u043f\u0430\u043c\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0435\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041e\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u044b LegCount. \u0412\u0441\u0451, \u0447\u0442\u043e \u043e\u043d\u0430 \u0437\u043d\u0430\u0435\u0442 \u043e \u0442\u0438\u043f\u0430\u0445 \u2014 \u044d\u0442\u043e \u0442\u043e, \u0447\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0435 \u0435\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0443 Animal \u0438\u043b\u0438 \u0435\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430\u043c.</p><p>\u0422\u0435\u043f\u0435\u0440\u044c \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 Animal \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u044f\u0432\u0438\u0442\u044c\u0441\u044f \u043c\u0435\u0442\u043e\u0434 LegCount:</p><p>\u0410 \u0435\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434:</p><p>\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043c\u0435\u0442\u043e\u0434\u0443 LegCount \u0434\u043b\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 Lion \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u044b\u0437\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u0430, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u044d\u0442\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u043e, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043e\u0442 \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430.</p><p>\u0422\u0435\u043f\u0435\u0440\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 AnimalLegCount \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0437\u043d\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u043a\u043e\u0433\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 Animal\u043e\u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0435\u0439 \u0443 \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u0442\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 LegCount \u043a\u043b\u0430\u0441\u0441\u0430 Animal, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u044b \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u043e \u043d\u0435\u0433\u043e, \u043d\u0435 \u043d\u0430\u0440\u0443\u0448\u0430\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.</p><h1>\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430</h1><p>\u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0443\u0437\u043a\u043e\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d\u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442.</p><p>\u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d \u043d\u0430 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432.</p><p>\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Shape:</p><p>\u041e\u043d \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0440\u0443\u0433\u043e\u0432 (drawCircle), \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 (drawSquare) \u0438 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 (drawRectangle). \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0435 \u044d\u0442\u043e\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u0433\u0443\u0440\u044b, \u0442\u0430\u043a\u0438\u0435, \u043a\u0430\u043a \u043a\u0440\u0443\u0433 (Circle), \u043a\u0432\u0430\u0434\u0440\u0430\u0442 (Square) \u0438 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a (Rectangle), \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432\u0441\u0435\u0445 \u044d\u0442\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432. \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u044d\u0442\u043e \u0442\u0430\u043a:</p><p>\u0421\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u0443 \u043d\u0430\u0441 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u043a\u043e\u0434. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043b\u0430\u0441\u0441 Rectangle, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u044b (drawCircle \u0438 drawSquare), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u043c\u0443 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e \u043d\u0435 \u043d\u0443\u0436\u043d\u044b. \u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u0438 \u043f\u0440\u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0435 \u043a\u043e\u0434\u0430 \u0434\u0432\u0443\u0445 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.</p><p>\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u043c\u044b \u0440\u0435\u0448\u0438\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Shape \u0435\u0449\u0451 \u043e\u0434\u0438\u043d \u043c\u0435\u0442\u043e\u0434, drawTriangle, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432:</p><p>\u042d\u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u0442 \u043a \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043a\u043b\u0430\u0441\u0441\u0430\u043c, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u043c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u0433\u0443\u0440\u044b, \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0435\u0449\u0451 \u0438 \u043c\u0435\u0442\u043e\u0434 drawTriangle. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0430.</p><p>\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e, \u043f\u0440\u0438 \u0442\u0430\u043a\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u043a\u0440\u0443\u0433\u0430, \u043d\u043e \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430, \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0422\u0430\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438 \u0438\u0445 \u0432\u044b\u0432\u043e\u0434\u0435 \u0432\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u043b\u0430\u0441\u044c \u0431\u044b \u043e\u0448\u0438\u0431\u043a\u0430, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u0443\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.</p><p>\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0435\u0440\u0435\u0433\u0430\u0435\u0442 \u043d\u0430\u0441 \u043e\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432, \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 Shape \u0438\u0437 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430. \u041a\u043b\u0438\u0435\u043d\u0442\u044b (\u0443 \u043d\u0430\u0441 \u044d\u0442\u043e \u043a\u043b\u0430\u0441\u0441\u044b Circle, Square \u0438 Rectangle) \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0435\u0448\u0430\u0442\u044c \u043b\u0438\u0448\u044c \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u043e\u0434\u043d\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 (\u0432 \u044d\u0442\u043e\u043c \u043e\u043d \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0441\u0451, \u0447\u0442\u043e \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438, \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u044b\u043d\u0435\u0441\u0435\u043d\u043e \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0438\u043b\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b.</p><p>\u0412 \u043d\u0430\u0448\u0435\u043c \u0436\u0435 \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Shape \u0440\u0435\u0448\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438, \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b. \u0421\u043b\u0435\u0434\u0443\u044f \u044d\u0442\u043e\u0439 \u0438\u0434\u0435\u0435, \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043a\u043e\u0434, \u0441\u043e\u0437\u0434\u0430\u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0443\u0437\u043a\u043e\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447:</p><p>\u0422\u0435\u043f\u0435\u0440\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 ICircle \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043b\u0438\u0448\u044c \u0434\u043b\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0440\u0443\u0433\u043e\u0432, \u0440\u0430\u0432\u043d\u043e \u043a\u0430\u043a \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u2014 \u0434\u043b\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0438\u0433\u0443\u0440. \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Shape \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430.</p><h1>\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0438\u043d\u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439</h1><p>\u041e\u0431\u044a\u0435\u043a\u0442\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f, \u0430 \u043d\u0435 \u0447\u0442\u043e-\u0442\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435.</p><ol><li>\u041c\u043e\u0434\u0443\u043b\u0438 \u0432\u0435\u0440\u0445\u043d\u0438\u0445 \u0443\u0440\u043e\u0432\u043d\u0435\u0439 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u043d\u0438\u0436\u043d\u0438\u0445 \u0443\u0440\u043e\u0432\u043d\u0435\u0439. \u041e\u0431\u0430 \u0442\u0438\u043f\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0439.</li><li>\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u0434\u0435\u0442\u0430\u043b\u0435\u0439. \u0414\u0435\u0442\u0430\u043b\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0439.</li></ol><p>\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u043e\u043c\u0435\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0451\u0442 \u043f\u043e\u043c\u0435\u0449\u0430\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f. \u041a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442, \u043d\u0430\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0440\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u0435\u0439. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u0435\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u043a, \u0447\u0442\u043e \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.</p><p>\u0417\u0434\u0435\u0441\u044c \u043a\u043b\u0430\u0441\u0441 Http \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u0430 XMLHttpService \u2014 \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439. \u0422\u0430\u043a\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u043f\u0443\u043d\u043a\u0442 A \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430 \u0438\u043d\u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439: \u00ab\u041c\u043e\u0434\u0443\u043b\u0438 \u0432\u0435\u0440\u0445\u043d\u0438\u0445 \u0443\u0440\u043e\u0432\u043d\u0435\u0439 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u043d\u0438\u0436\u043d\u0438\u0445 \u0443\u0440\u043e\u0432\u043d\u0435\u0439. \u041e\u0431\u0430 \u0442\u0438\u043f\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0439\u00bb.</p><p>\u041a\u043b\u0430\u0441\u0441 Http \u0432\u044b\u043d\u0443\u0436\u0434\u0435\u043d\u043d\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 XMLHttpService. \u0415\u0441\u043b\u0438 \u043c\u044b \u0440\u0435\u0448\u0438\u043c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043a\u043b\u0430\u0441\u0441\u043e\u043c Http \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0441\u0435\u0442\u044c\u044e \u2014 \u0441\u043a\u0430\u0436\u0435\u043c, \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 Node.js-\u0441\u0435\u0440\u0432\u0438\u0441 \u0438\u043b\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0435\u0440\u0432\u0438\u0441-\u0437\u0430\u0433\u043b\u0443\u0448\u043a\u0430, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0439 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u0430\u043c \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430 Http, \u0438\u0437\u043c\u0435\u043d\u0438\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434. \u042d\u0442\u043e \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438-\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438.</p><p>\u041a\u043b\u0430\u0441\u0441 Http \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u043d\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0442\u0435\u0432\u043e\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Connection:</p><p>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Connection \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 request \u0438 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u043c \u043a\u043b\u0430\u0441\u0441\u0443 Http \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0442\u0438\u043f\u0430 Connection:</p><p>\u0422\u0435\u043f\u0435\u0440\u044c, \u0432\u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0441\u0435\u0442\u044c\u044e, \u043a\u043b\u0430\u0441\u0441 Http \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0435\u043c, \u0447\u0442\u043e \u0435\u043c\u0443 \u043f\u0435\u0440\u0435\u0434\u0430\u043b\u0438, \u043d\u0435 \u0437\u0430\u0431\u043e\u0442\u044f\u0441\u044c \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u043c Connection.</p><p>\u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u043a\u043b\u0430\u0441\u0441 XMLHttpService \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u043b \u044d\u0442\u043e\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441:</p><p>\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Connection \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 Http \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0431\u043c\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e \u0441\u0435\u0442\u0438:</p><p>\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0437\u0434\u0435\u0441\u044c \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0435 \u0438 \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0439. \u041a\u043b\u0430\u0441\u0441 Http (\u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c) \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 Connection (\u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f). \u041a\u043b\u0430\u0441\u0441\u044b XMLHttpService, NodeHttpService \u0438 MockHttpService (\u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438) \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 Connection.</p><p>\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0441\u0442\u043e\u0438\u0442 \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0441\u043b\u0435\u0434\u0443\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 \u0438\u043d\u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u043c\u044b \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u0435\u043c \u0438 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0411\u0430\u0440\u0431\u0430\u0440\u044b \u041b\u0438\u0441\u043a\u043e\u0432. \u0410 \u0438\u043c\u0435\u043d\u043d\u043e, \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0442\u0438\u043f\u044b XMLHttpService, NodeHttpService \u0438 MockHttpService \u043c\u043e\u0433\u0443\u0442 \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0437\u0430\u043c\u0435\u043d\u043e\u0439 \u0431\u0430\u0437\u043e\u0432\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 Connection.</p><h1>\u0418\u0442\u043e\u0433\u0438</h1><p>\u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u043f\u044f\u0442\u044c \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 SOLID, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u041e\u041e\u041f-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443. \u041f\u043e\u043d\u0430\u0447\u0430\u043b\u0443 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043d\u0435\u043f\u0440\u043e\u0441\u0442\u043e, \u043d\u043e \u0435\u0441\u043b\u0438 \u043a \u044d\u0442\u043e\u043c\u0443 \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u044c\u0441\u044f, \u043f\u043e\u0434\u043a\u0440\u0435\u043f\u043b\u044f\u044f \u0436\u0435\u043b\u0430\u043d\u0438\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u0439, \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0442\u0441\u044f \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430, \u0447\u0442\u043e \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0433\u0440\u043e\u043c\u043d\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u043e\u0437\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043d\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0435\u0442 \u0438\u0445 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443.</p><p>\u0415\u0449\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u043d\u0430 \u043d\u0430\u0448\u0435\u043c \u0441\u0430\u0439\u0442\u0435.</p>", "tags": ["Programming", "Development", "Programming Languages", "Software Development", "Software Engineering"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*TjFEp_SQMG3xh41Ly9cKig.png"], "url": "https://bayareabelletrist.medium.com/how-i-negotiated-a-software-engineer-offer-in-silicon-valley-f11590f5c656", "dateCreated": "2019-01-28T13:01:01.058Z", "datePublished": "2019-01-28T13:01:01.058Z", "dateModified": "2020-11-26T21:46:44.297Z", "headline": "How I negotiated a $300,000 job offer in Silicon Valley", "name": "How I negotiated a $300,000 job offer in Silicon Valley", "description": "In the span of a week, I had job offers to work as a software engineer at Google, Facebook, Amazon, Apple, LinkedIn, and Yelp. Here\u2019s how I negotiated them.", "identifier": "f11590f5c656", "author": {"@type": "Person", "name": "Bay Area Belletrist", "url": "https://bayareabelletrist.medium.com"}, "creator": ["Bay Area Belletrist"], "publisher": {"@type": "Organization", "name": "Medium", "url": "https://bayareabelletrist.medium.com/", "logo": {"@type": "ImageObject", "width": 308, "height": 60, "url": "https://miro.medium.com/max/616/1*OMF3fSqH8t4xBJ9-6oZDZw.png"}}, "mainEntityOfPage": "https://bayareabelletrist.medium.com/how-i-negotiated-a-software-engineer-offer-in-silicon-valley-f11590f5c656"}, "content": "<h1>How I negotiated a $300,000 job offer in Silicon Valley</h1><h2>In the span of a week, I had job offers to work as a software engineer at Google, Facebook, Amazon, Apple, LinkedIn, and Yelp. Here\u2019s how I negotiated them.</h2><a></a><a>Bay Area Belletrist</a><a>Jan 28, 2019\u00b718 min read</a><p>Note: If you\u2019re looking to get actual Silicon Valley recruiters to help you out negotiate your offer, the best service I\u2019ve had pitch me is from Levels.fyi. That\u2019s my affiliate link, so I\u2019ll get a portion of whatever package you choose.</p><p>You\u2019re almost finished with the long grind of interviewing. You\u2019re almost free of the stress associated with interviewing at big tech companies. You\u2019re practically envisioning sending off a final \u201cI\u2019ll sign\u201d email.</p><p>But you\u2019re not quite there yet.</p><p>There\u2019s one last hurdle to clear: negotiating an offer.</p><p>You\u2019ve shown that you can interview, but how well can you close a deal?</p><p>Late last year I interviewed at six top companies in Silicon Valley in six days, and stumbled into six job offers. I had one last task to make sure my work wasn\u2019t in vain. Here are the principles I had, the rules I followed, and what I did to negotiate an offer worth $100,000/year more than I planned on.</p><h1>Introduction</h1><p>First, some assumptions on my part:</p><ul><li>Your mileage may vary. I\u2019m obviously not stating that everything I went through is easily reproduced. I am using it as a backdrop to color some advice that I think anyone totally new to this to keep in mind.</li><li>You have offers, plural. This can be two or this can be ten, but you need to have more than one offer concurrently. I\u2019ve negotiated on behalf of (many) friends in the past with no leverage, but I\u2019m not going to focus on that scenario.</li><li>You\u2019re not afraid to negotiate. The night before my Google interview I spoke with another candidate in my hotel. His strategy was to low-ball himself to increase his chances of getting an offer. That\u2019s not the path that I took, it\u2019s not a path I\u2019d advocate, and it\u2019s not one I\u2019m going to even entertain. You should always be willing to see what you can get.</li><li>You won\u2019t practice the Dark Arts of Negotiation\u2122. I\u2019m pretty sure you can negotiate by lying your way through the process. From a moral perspective, though, c\u2019mon. From a practical perspective, getting caught in a lie is not going to help you.</li><li>You won\u2019t renege on an offer. Could I have squeezed a bit more out of the eventual offer I signed if I had? Maybe. But I\u2019m not comfortable accepting an offer and later rejecting it. I\u2019m sure other candidates do it and I don\u2019t think it gets you banned from the Valley. It\u2019s just not something I wanted to do.</li><li>You\u2019re willing to work at any of the companies if the price is right. I definitely had a personal ranking of which companies I\u2019d prefer over each other, but each company had a chance. No one was just there to beef up offers.</li><li>I\u2019m going to both anonymize the companies I negotiated with and fuzz their numbers. My goal is not to answer \u201chow much does MegaCorp offer if you have competing offers.\u201d My goal is to answer \u201chow do I respectfully ask for a larger comp package?\u201d for people that don\u2019t know where to start. The total compensation for each offer is accurate (within 5%).</li><li>You\u2019re starting at square one. I give my personal experience in this article and some examples of conversations I\u2019ve had when negotiating. I don\u2019t draw on decades of experience with very in-depth detail. I link some pieces at the end that are more suited towards that type of read.</li></ul><h1>Before the Offer</h1><p>Congrats! You have multiple interviews. I\u2019m sure you\u2019re nervous. I\u2019m sure you\u2019re telling yourself you don\u2019t deserve it, that you got lucky. You think you\u2019re going to fail miserably. The last thing on your mind is how to talk numbers with recruiters.</p><p>Chill out. We all go through that! \ud83d\ude42</p><p>It\u2019s understandable. But you don\u2019t want to shoot your future self in the foot. There\u2019s only a few things you need to keep in mind at this point, anyway.</p><p>My first major piece of advice: do not make this process adversarial.</p><p>I\u2019ve read a lot of people that view this very cynically.</p><p>It\u2019s us against them.</p><p>Candidate versus recruiter.</p><p>You\u2019re trying to extract the absolute most out of a company and they\u2019re trying to cheat you out of the most they can. Right?</p><p>Wrong. This may be the case sometimes, I guess, but that mindset will not lend itself to a healthy negotiating phase. I had very good relationships with my recruiters and in the end it paid off. Maybe it would have gone better if I were more aggressive or lied to them. I won\u2019t ever know how that alternative universe played out. But I do know that I have no regrets about it all. I\u2019m confident I could ping any of those recruiters to kick off the process again. Also, recruiters are people, too. \ud83d\ude05 Be nice!</p><p>Next, make it clear throughout the process that you\u2019re interviewing elsewhere. This is critical to make sure that your offers are overlapping. I had to deal with one exploding offer. I had to pass on because the company refused to move the deadline. It took a piece of leverage away from me. If I didn\u2019t let everyone know about my situation I may have lost even more.</p><p>It\u2019s up to you if you want to disclose where you\u2019re interviewing. I would share it if you think it\u2019s \u201cimpressive\u201d. Keep in mind that you should be proud of interviewing anywhere. You\u2019ll have more leverage, though, if you don\u2019t remove the possibility of a Google. My recruiters were very respectful about asking. Companies understand that who you talk to is your business and only theirs if you decide it is. With that said \u2014 the threat of getting (and signing) an offer elsewhere is fantastic leverage for everything from scheduling to getting an offer.</p><h1>The Initial Offers</h1><p>Alright, it\u2019s the moment of truth. You\u2019re going to hear how you did. \ud83d\ude31</p><p>My recruiters all opted to deliver the news over the phone. Nearly every call followed the same pattern:</p><p>Do you have any updates from other companies? Do you have a range you\u2019re expecting from us? How does something in the neighborhood of $package sound? What do you think?</p><p>Pretty much anything you read will say never give a range. I mostly agree with that, but sometimes it makes sense to give something. It takes some experience and familiarity with comp packages to do so comfortably. I only gave the first numbers to one or two companies and it was because I was familiar enough with the companies to know they would come in around $50k/yr lower than other offers I had.</p><p>I would never give a range to a company that sends out sky-high offers. With that said, I\u2019m not going to waste a back-and-forth cycle with a recruiter when I know they\u2019re not going to come close to an existing offer. Recruiters won\u2019t want to go back-and-forth and back-and-forth writing up new offers for you. If they won\u2019t be close, let them know where the range is going to start. Wasting time waiting on a non-competitive offer isn\u2019t advantageous to anyone.</p><p>That being said, if you are dealing with a company whose budget is infinite, be smart. Levels.fyi is the best resource I\u2019ve seen (far better than Glassdoor) when it comes to learning what\u2019s typically offered. Shoot for the sky and never, ever assume you can\u2019t get a top offer. Watch the situation play out and be willing to adapt to it. I ended up getting far, far more than I ever though a company would offer me, and a lot of that is due to never anchoring myself mentally to a \u201ctop value\u201d. \ud83d\udc4d</p><p>Never sound \u201cgiddy\u201d. Remain measured, even if you\u2019re confident you\u2019d accept an offer. It\u2019s a lot to take in on the phone \u2014 especially if it\u2019s an offer that surpasses what you ever expected \u2014 and you\u2019re probably not thinking straight. Always think on any package for awhile.</p><p>Make it clear you won\u2019t accept an offer until you hear back from everyone. In my experience, recruiters understood. I made it clear I would like to go to any of the companies I was interviewing at. I definitely had a dream company throughout the process, but that wasn\u2019t really anyone\u2019s business but my own. \ud83d\ude42</p><p>I don\u2019t see actual examples of things to actually say in these situations. I\u2019ll provide here what it sounded like for me. That should help those that don\u2019t know where to start. Don\u2019t follow this as a script (because that\u2019s weird and unnatural), but this is the sort of thing I would say to remain respectful and open to negotiate. Let\u2019s assume the offer you\u2019ve heard is something you might sign (that is, it meets your bar to go work there):</p><p>Recruiter: So, what do you think?</p><p>You: That\u2019s an interesting offer. I think it\u2019s probably in the ballpark, but it\u2019s not something I\u2019m going to sign right now. I\u2019m going to wait until I hear back from the other places I\u2019m speaking to.</p><p>In the above, you let your recruiter know that they\u2019re \u201cin the running\u201d, but that it\u2019s not enough to blow you away. You\u2019re respectful but firm. This is the blueprint for how your discussions should go.</p><p>Don\u2019t give away more information than you need to, don\u2019t be aggressive, and don\u2019t give numbers if it doesn\u2019t make sense. The above is all honest, too, so you don\u2019t need to worry about getting caught in a lie. Essentially, you\u2019re trying to maintain good standing with your recruiters and avoid getting into the nitty-gritty until you have all of your offers on the table. That\u2019s the fun part!</p><h1>The Counter-Offers</h1><p>So, you\u2019ve got numbers from everyone that you\u2019re considering. Now you can start counter-offering based on what information you have. When I counter-offered, I never used solid numbers \u2014 I gave ranges. I don\u2019t like the idea of committing to a solid number until the very end.</p><p>There\u2019s a few reasons for this:</p><ul><li>For one, giving a solid number feels weird; why is $120,000 acceptable, but $119,000 is a bit low? I\u2019d much rather present that as \u201csomewhere between $120,000 and $140,000\u201d. It also leaves room for a company to move upward if you keep things a bit in the dark. Note that once you have numbers from a company it makes a lot more sense to be more explicit in what you\u2019re looking for.</li><li>To me, there\u2019s an implication when giving a solid number that it\u2019s \u201cthe one.\u201d If a company can hit \u201cyour number\u201d, you\u2019ve lost out on the chance to negotiate much more unless more offers coming in. Companies can still hit your number if they offer the top of your range; keep that in mind. If you give a $5,000 range, don\u2019t be surprised if companies meet your demands and expect to get a signed offer.</li></ul><p>Some may object to how I presented the above, as recruiters have a lot of flexibility. You can always give a number, have them match it, and then ask for higher. I\u2019m not denying that. But it was a goal throughout my negotiations to keep on very good standing with my recruiters and it paid off very well in the end.</p><p>My initial counter-offers sounded something like this (I made up the numbers here and provide a few examples):</p><p>Bar, Inc.: We were thinking of offering a base salary of around $120,000 with a four-year RSU package of $150,000 and a signing bonus of $10,000. What do you think of that?</p><p>Me: How flexible is Bar, Inc. on equity? I\u2019m really looking to stay and grow at a company, and equity is something I really interested in wherever I go. I\u2019m comfortable with something in the neighborhood of $120,000 on base, but I\u2019d definitely like to sign an offer with a larger equity package.</p><p>FooCorp: We were thinking of offering a base salary of around $100,000 with a four-year RSU package of $150,000 and a signing bonus of $10,000. What do you think of that?</p><p>Me: I think the base is a little bit lower than what I\u2019d like based on my offer from Bar, Inc. for $120,000, and base salary is really important to me. As for the equity package, I was looking for something closer to $200,000. The signing bonus is around what I was looking for.</p><p>There\u2019s a lot of actionable information above for a recruiter without you giving any implicit commitment to any number. FooCorp knows they need to get to $120,000 to meet your other offer. Bar knows that equity is important to you, and equity is something that companies tend to move a lot more willingly. You now have two companies moving in tandem to get a better offer to you and neither of them is talking to each other. This is pretty much how you want this entire process to go.</p><p>It makes sense to change an established range once another company ups the ante. This is how that discussion went for me:</p><p>Me: Hey, I finally heard back from Baz LLC. Their offer came in a lot higher than I was expecting. They offered $150,000 in base, $200,000 in stock, and $40,000 in signing. That being said I think the work FooCorp aligns more closely with my interests, so I\u2019d really like to make something work with you guys. Can we do what we can to get to those numbers? I\u2019d love to figure this out.</p><p>FooCorp: Wow, that\u2019s a good offer. Keep in mind FooCorp is {making the world a better place / has amazing potential / is better for your career} and I would hope you wouldn\u2019t be deciding based on a paycheck. I don\u2019t know if we can match that offer exactly, but I\u2019ll see what we can do.</p><p>I went through the above sample conversations so many times and they all went pretty similarly.</p><p>They always sounded very doubtful about moving their numbers. They always said it was more than they would typically give up.</p><p>They always explained why their company\u2019s mission and culture made up for the difference in comp.</p><p>But almost always, they upped the package.</p><p>Sometimes they\u2019ll match it. Sometimes they won\u2019t. Sometimes they\u2019ll come close enough that you\u2019ll pull the trigger because it\u2019s such an exciting opportunity. You should always give it a shot, though.</p><h1>My Offers</h1><p>I\u2019m including this because lots of people have pinged me about it. I don\u2019t know how much people can take away from it, but I\u2019ll put it out there anyway. I\u2019ll include what tips I can.</p><p>I was able to get ballpark numbers from every company before I disclosed any numbers. Here they are, anonymized and randomized. The format is base salary+bonus / 4yr stock package / signing bonus.</p><p>Alpha: 180k / 150k / 0k (218k/yr)</p><p>Bravo: 180k / 200k / 30k (238k/yr)</p><p>Charlie: 140k / 180k / 30k (193k/yr)</p><p>Delta: 160k / 220k / 50k (228k/yr)</p><p>Echo: 160k / 200k / 30k (218k/yr)</p><p>Foxtrot: 165k / 210k / 30k (225k/yr)</p><p>I thought it was pretty interesting how closely most of the numbers aligned despite not being able to see each other\u2019s initial offers. That must be the going rate\u2026 or something.</p><p>Anyway, once I had all of the offers, it was time for constant communication for me. I called my least-favorite offer and told them what the best offer was and asked them to close the gap as much as possible. Once those numbers moved, I talked to more companies. I usually had daily or every-other-day update calls with my recruiters, and they sounded like this:</p><p>Bravo: Any updates from your end?</p><p>Me: Yeah, I was able to get some preliminary numbers from Foxtrot. They were thinking somewhere in the ballpark of $225k TC, but Delta says they will comfortably beat that. I wasn\u2019t blown away by the offer, but given Delta\u2019s position on it, that\u2019s probably the low end of what I\u2019ll end up signing.</p><p>Bravo: Great, thanks so much for sharing that. I\u2019ll talk to the team and see what I can do. We\u2019d love to have you!</p><p>Alpha refused to negotiate and refused to move their deadline, so they were out of the running pretty quickly.</p><p>Once everyone had a chance to move their numbers, it looked like this:</p><p>Bravo: 180k / 220k / 75k (254k/yr; +16k)</p><p>Charlie: 140k / 200k / 30k (198k/yr; +5k)</p><p>Delta: 160k / 220k / 50k (228k/yr; no movement)</p><p>Echo: 160k / 250k / 30k (230k/yr; +12k)</p><p>Foxtrot: 180k / 240k / 30k (248k/yr; +18k)</p><p>More rinse and repeat. My goal was to whittle down the offers once I had things moving in the direction I wanted. It was a logistical nightmare keeping up with six companies during this. It was also becoming clearer that there was a gap that some companies couldn\u2019t overcome.</p><p>I also had a lot more time to think about company culture and perks/benefits, so certain companies began to pull away from each other. I didn\u2019t formally reject any offers until I signed my final offer, but mentally, I wrote off a few of the companies and stopped negotiating with them. I just asked them for a few more days to decide.</p><p>Recruiters constantly told me they couldn\u2019t up their packages anymore, but inevitably, they always did. I\u2019m sure a ceiling exists and I\u2019m sure it\u2019s rarer to get number past a certain point, but it was dangerously close to a lie to continuously tell me they couldn\u2019t go any higher (\u201cyou don\u2019t have the experience\u201d) and then watch them up their offer by 10%. Part of doing business, I guess. \ud83e\udd37\u200d\ufe0f</p><p>After another round of negotiation (and a few days), it was down to three:</p><p>Bravo: 180k / 250k / 75k (261k/yr; +23k/yr from initial)</p><p>Delta: 170k / 250k / 50k (245k/yr; +17k/yr from initial)</p><p>Foxtrot: 180k / 250k / 50k (248k/yr; +18k/yr from initial)</p><p>At this point, it had been something like a week and a half of negotiation, and this after months of interviews/prep. I was so ready to be done. I had decided based on product, culture, pay, perks, benefits, reputation that it was between Bravo and Delta.</p><p>Delta wanted me to give a final number and commit to it. They were extremely insistent that I provide one.</p><p>I told them to give me a few hours and called my recruiter from Bravo.</p><p>I explained that Bravo had a lot that I respected more than Delta, but that Delta wanted me to verbally commit to a number to move forward.</p><p>I was going to work at Bravo or Delta. They were offering similar packages, but I didn\u2019t know how high I could push Delta on the last counter. I also wasn\u2019t comfortable playing that game.</p><p>Everyone gets one last ask. You\u2019ve been building up to a point where you get to launch your most powerful salvo \u2014 use it wisely.</p><p>For me, this was that moment. It was time.</p><p>I asked Bravo to up their package by a meager $5k yearly in stock (a very small ask in retrospect\u2026), something companies are far more flexible on. I said if they could do that, I would sign and be confident I didn\u2019t leave too much on the table. He said he\u2019d get back to me and that he was confident we could work something out.</p><h1>My Final Offer</h1><p>Bravo\u2019s recruiter emailed back and said he worked out a new package for me and wanted to run it by me over the phone. I already knew at this point that if he met my ask (180k / 270k / 70k, TC 265k) that I would sign right then and there. I\u2019d thought long and hard about this last little dance.</p><p>Bravo: I heard back and got approval for a new offer and I wanted to see what you thought. We\u2019d like to offer you a {salary + annual bonus} of $180,000. In addition to that, we would like to offer $400,000 in RSUs that vest over four years. Lastly, I was able to get approval for a $90,000 {signing bonus + relocation expenses} package. That would put your four-year compensation package at around $1,210,000, or an annual compensation package of around $300,000. What do you think?</p><p>Me: Yeah, I\u2019ll sign that.</p><p>Bravo: Really? Awesome!</p><p>And that was that. No, there\u2019s no embellishment here. My final ask was for $265k/yr and I was offered around $300k/yr. I don\u2019t know if that was due to the goodwill I had built up with the recruiter or if they were concerned I\u2019d defect. Whatever it was, I\u2019m fine with it. :)</p><h1>The Takeaways</h1><p>I\u2019m going to summarize a lot of the above in a more digestible way:</p><ul><li>\ud83e\udd11 Get multiple offers. Obviously this is way easier said than done, but even if it adds a lot of stress to your life, it certainly pays off. With interviews being quite a bit of a crapshoot, it\u2019s tough. If you want to get a new job, though, don\u2019t put your eggs in one basket and do what you can to try to get at least two offers.</li><li>\ud83d\ude4a Don\u2019t lie. I wasn\u2019t personally asked to provide evidence of other offers, but my friends definitely have been. It\u2019s not worth it to lie, especially when your candidate profile is saved at various companies. Good luck getting into a company that catches you.</li><li>\ud83e\udd17 Be kind and respectful. Recruiters are people, too. They\u2019re also the people that act as the path for you getting into your dream company. You don\u2019t need to schmooze them, but be friendly. Help them help you! You may have competing philosophies, but both of you want the same thing in the end: a signed offer from their company.</li><li>\ud83d\udde3 Be (selectively) communicative. Make it very clear to everyone what your timelines are and if you\u2019re waiting on other companies. Keep people in the loop. We hate getting ghosted by recruiters and I\u2019m sure recruiters hate being ghosted by us. Let them know if you\u2019ve signed another offer or if you\u2019re no longer considering theirs. Let them know if other companies have sent you offers and share the names if you think it\u2019ll help your case.</li><li>\ud83d\udc4e Don\u2019t give a minimum (unless it makes sense). You don\u2019t want to give a lower number than a company would have offered you, but you also don\u2019t want to waste anyone\u2019s time. If you know a company won\u2019t be competitive at first, let them know what the other company\u2019s range is. If they\u2019re out, they\u2019re out. Your time is better spent talking to companies you\u2019d actually go to.</li></ul><ul><li>\ud83c\udf20 Shoot for the sky. Transparently, my goal was to get a total comp of around $180k. That was the number where I\u2019d quit my current job. I ended up getting over 50% more than that. I didn\u2019t think it was possible for someone with two years of experience to do so. Don\u2019t set a limit in your head of what you can think you can get or it may discourage negotiating.</li><li>\ud83d\udeab Don\u2019t reject an offer until you\u2019ve signed another one. You never know what could happen. You don\u2019t want to leave someone hanging on your decision when there is no way on earth you\u2019d sign their offer. But even if an offer isn\u2019t competitive, you\u2019d still sign it if the other companies lost their headcount. Keep your options open. You earned it.</li><li>\ud83e\udd14 Think a lot and whittle down your offers. Over the course of your negotiations you\u2019ll converge on the one or two offers you think are \u201cbest\u201d. As that happens, focus your time on the ones that make sense, and don\u2019t waste brain cycles on the ones that don\u2019t.</li><li>\ud83e\udd26\ud83c\udffb\u200d\u2642\ufe0f Bonus: don\u2019t tell teams you\u2019re disinterested in them. I\u2019ve seen people \u201cnegotiate\u201d by asking for a larger packages by saying they\u2019re less interested in the company. This sounds like a recipe for disaster \u2014 why would you tell a company you don\u2019t want to work for them? Find a new slant.</li><li>\ud83c\udf89 Everything above worked. The final offer I signed was ~$300,000 in total yearly compensation (over four years, including a variable annual bonus, and amortizing the signing/relo package). I negotiated it up from ~$225,000*, an increase of 33%.</li></ul><h1>Wrap-Up</h1><p>After my previous post, I primarily saw three questions:</p><ul><li>How did I negotiate?</li><li>How much was I offered?</li><li>Which offer did I take?</li></ul><p>I answered two of those three here. Maybe you can piece together the rest. I\u2019d rather provide value than advertise for my employer. I don\u2019t want the focus here to be on the decision I made for my life. I\u2019d rather help everyone else get to make the same decision.</p><p>There\u2019s also much more in-depth, less-anecdotal pieces I\u2019d recommend reading. There\u2019s this legendary one from Patrick McKenzie and another from Haseeb Qureshi. What you see here is more of a collection of my personal thoughts (and a response to all of the questions I got regarding numbers).</p><p>Please follow (and chat with!) me on Twitter if you want to provide feedback or if you have any questions. I\u2019d love to hear if there are other topics you\u2019d like to read about. I\u2019ve been getting a ton of DMs on Twitter and Discord and I\u2019ve tried to help out where possible. I vastly prefer responding on Twitter, though, so if you want to chat, try there first.</p><p>Happy negotiating. \ud83d\ude0a</p><ul><li>the initial offer didn\u2019t talk about a relocation package; my guess is I would have received it anyway, so the starting value was likely higher</li></ul><a></a><p>\ud83d\udcdd Read this story later in Journal.</p><p>\ud83d\udc69\u200d\ud83d\udcbb Wake up every Sunday morning to the week\u2019s most noteworthy stories in Tech waiting in your inbox. Read the Noteworthy in Tech newsletter.</p>", "tags": ["Technology", "Interview", "Programming", "Silicon Valley", "Tech"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*IwvkEcaGGVihZ8PBj_Y4hA.jpeg"], "url": "https://medium.com/javascript-scene/the-typescript-tax-132ff4cb175b", "dateCreated": "2019-01-23T04:24:16.562Z", "datePublished": "2019-01-23T04:24:16.562Z", "dateModified": "2019-11-07T20:46:26.770Z", "headline": "The TypeScript Tax - JavaScript Scene - Medium", "name": "The TypeScript Tax - JavaScript Scene - Medium", "description": "TypeScript grew a great deal between 2017 and 2019, and in many ways, for good reason. There\u2019s a lot to love about TypeScript. In the 2018 State of JavaScript survey, almost half the respondents said\u2026", "identifier": "132ff4cb175b", "author": {"@type": "Person", "name": "Eric Elliott", "url": "https://medium.com/@_ericelliott"}, "creator": ["Eric Elliott"], "publisher": {"@type": "Organization", "name": "JavaScript Scene", "url": "https://medium.com/javascript-scene", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*k98ylK8u1sha-tSDD4UiBA.png"}}, "mainEntityOfPage": "https://medium.com/javascript-scene/the-typescript-tax-132ff4cb175b"}, "content": "<h1>The TypeScript Tax</h1><h2>A Cost vs Benefit Analysis</h2><a></a><a>Eric Elliott</a><a>Jan 23, 2019</a><p>TypeScript grew a great deal between 2017 and 2019, and in many ways, for good reason. There\u2019s a lot to love about TypeScript. In the 2018 State of JavaScript survey, almost half the respondents said they\u2019d tried TypeScript and would use it again. But should you use it for your large scale app development project?</p><p>This article takes a more critical, data-driven approach to analyze the ROI of using TypeScript to build large scale applications.</p><h1>TypeScript Growth</h1><p>TypeScript is one of the fastest growing languages, and is currently the leading compile-to-JavaScript language.</p><a>Source</a><p>This is very impressive traction that shouldn\u2019t be discounted, but it is still far from dominating the over-all JavaScript ecosystem. You might say it\u2019s a big wave in a much bigger ocean.</p><a>Source</a><p>That said, TypeScript hit an inflection point in 2018, and in 2019, a large number of production projects will use it. As a JavaScript developer, you may not have a choice. The TypeScript decision will be made for you, and you shouldn\u2019t be afraid of learning and using it.</p><p>But if you\u2019re in the position of deciding whether or not to use it, you should have a realistic understanding of both the benefits and the costs. Will it have a positive or negative impact?</p><p>In my experience, it has both, but falls short of positive ROI. Many developers love using it, and there are many aspects of the TypeScript developer experience I genuinely love. But all of this comes with a cost.</p><h1>Background</h1><p>I come from a background using statically typed languages including C/C++ and Java. JavaScript\u2019s dynamic types were hard to adjust to at first, but once I got used to them, it was like coming out of a long, dark tunnel and into the light. There\u2019s a lot to love about static types, but there\u2019s a lot to love about dynamic types, too.</p><p>On and off over the last few years, I\u2019ve gone all-in on TypeScript full time and racked up more than a year of hands-on daily experience. I went on to lead multiple large-scale production teams using TypeScript as the primary language, and got to see the high-level multi-project impact of TypeScript and compare it to similar large-scale native JavaScript builds.</p><p>In 2018, decentralized applications took off, and most of them use smart contracts and open-source software. When you\u2019re dealing with the internet of value, bugs can cost users money. It\u2019s more important than ever to write reliable code, and because these projects are generally open-source, I figured it was nice that we developed the code in TypeScript so that it\u2019s easier for other TypeScript teams to integrate, while maintaining compatibility with projects using JavaScript, as well.</p><p>My understanding of TypeScript, including its benefits, costs, and weaknesses have deepened considerably. I\u2019m saddened to say that it wasn\u2019t as successful as I\u2019d hoped. Unless it improves considerably, I would not pick TypeScript for another large scale project.</p><h2>What I Love About TypeScript</h2><p>I\u2019m still long-term optimistic about TypeScript. I want to love TypeScript, and there\u2019s a lot I still do love about it. I hope that the TypeScript developers and proponents will read this as a constructive critique rather than a hostile take-down piece. TypeScript developers can fix some of the issues, and if they do, I may repeat the ROI analysis and come to different results.</p><p>Static types can be very useful to help document functions, clarify usage, and reduce cognitive overhead. For example, I usually find Haskell\u2019s types to be helpful, low-cost, pain-free, and unobtrusive, but sometimes even Haskell\u2019s flexible higher-kinded type system gets in the way. Try typing a transducer in Haskell (or TypeScript). It\u2019s not easy, and probably a bit worse than the untyped equivalent.</p><p>I love that type annotations can be optional in TypeScript when they get in the way, and I love that TypeScript uses structural typing and has some support for type inference (though there\u2019s a lot of room for improvement with inference).</p><p>TypeScript supports interfaces, which are reusable (as opposed to inline) typings that you can apply in various ways to annotate APIs and function signatures. A single interface can have many implementations. Interfaces are one of the best features of TypeScript, and I wish this feature was built into JavaScript.</p><p>The best news: If you use one of the well supported editors (such as Atom or Visual Studio Code), TypeScript\u2019s editor plugins still provide the best IDE developer experience in the JavaScript ecosystem, in my opinion. Other plugin developers should try them out and take notes on how they can improve.</p><h1>TypeScript ROI in Numbers</h1><p>I\u2019m going to rate TypeScript on several dimensions on a scale of -10\u201310 to give you a better sense of how well suited TypeScript may or may not be for large scale applications.</p><p>Greater than 0 represents a positive impact. Less than 0 represents a negative impact. 3\u20135 points represent relatively strong impact. 2 points represents a moderate impact. 1 point represents a relatively low impact.</p><p>These numbers are hard to measure precisely, and will be somewhat subjective, but I\u2019ve estimated the best I can to reflect the actual costs and rewards we saw on real projects.</p><p>All projects for which impact was judged were >50k LOC with several collaborators working over several months. One project was Angular 2 + TypeScript, compared against a similar project written in Angular 1 with standard JavaScript. All other projects were built with React and Node, and compared against React/Node projects written in standard JavaScript. Subjective bug density, subjective relative velocity, and developer feedback were estimated, but not precisely measured. All teams contained a mix of experienced and new TypeScript developers. All members had access to more experienced mentors to assist with TypeScript onboarding.</p><p>Objective data was too noisy in the small sampling of projects to make any definitive objective judgements with a reliable error margin. On one project, native JavaScript showed a 41% lower public bug density over TypeScript. In another, the TypeScript project showed a 4% lower bug density over the comparable native JavaScript version. Obviously, the implementation (or lack) of other quality measures had a much stronger effect than TypeScript, which skewed the numbers beyond usability.</p><p>With margin-of-error so broad, I gave up on objective quantification, and instead focused on feature delivery pace and observations of where we spent our time. You\u2019ll see more of those details in the ROI point-by-point breakdown.</p><p>Because there\u2019s a lot of subjectivity involved, you should allow for a margin of error in interpretation (pictured in the chart), but the over-all ROI balance should give you a good idea of what to expect.</p><p>I can already hear the peanut gallery objections to the small benefits scores, and I don\u2019t entirely disagree with the arguments. TypeScript does provide some very useful, powerful capabilities. There\u2019s no question about that.</p><p>In order to understand the relatively small benefit scores, you have to have a good understanding of what I\u2019m comparing TypeScript to: Not just JavaScript, but JavaScript paired with tools built for native JavaScript.</p><p>Let\u2019s look at each point in more detail.</p><p>Developer Tooling: My favorite feature of TypeScript, and arguably the most powerful practical benefit from using TypeScript is its ability to reduce the cognitive load of developers by providing interface type hints and catch potential errors in realtime as you\u2019re programming. If none of that were possible in native JavaScript with some good plugins, I\u2019d give TypeScript more points on the benefit side, but the 0 point is what\u2019s already available using JavaScript, and the baseline is already pretty good.</p><p>Most TypeScript advocates don\u2019t seem to have a good understanding of what TypeScript is competing against. The development tool choice isn\u2019t TypeScript vs native JavaScript and no tooling. It\u2019s between TypeScript and the entire rich ecosystem of JavaScript developer tools. Native JavaScript autocomplete and error detection gets you 80% \u2014 90% of the benefits of TypeScript when you use autocomplete, type inference, and lint tooling. When you\u2019re running type inference, and you use ES6 default parameters, you get type hints just like you would with type-annotated TypeScript code.</p><p>In fairness, if you use default parameters to provide type hints, you don\u2019t need to supply the annotations for TypeScript code, either, which is a great trick to reduce type syntax overhead \u2014 one of the overhead costs of using TypeScript.</p><p>TypeScript\u2019s tooling for these things is arguably a little better, and more all-in-one \u2014 but it\u2019s not enough of an improvement to justify the costs.</p><p>API Documentation: Another great benefit of TypeScript is better documentation for APIs which is always in sync with your source code. You can even generate API documentation from your TypeScript code. This would also get a higher score, except you can get the same benefit using JSDoc and Tern.js in JavaScript, and documentation generators are abundant. Personally, I\u2019m not a big fan of JSDoc, so TypeScript does get some points, here.</p><p>Even with the best inline documentation in the world, you still need real documentation, so TypeScript enhances, rather than replaces existing documentation options.</p><p>Refactoring. In most cases, if you can gain a significant benefit from TypeScript in your refactoring, that\u2019s often a code smell indicating that your code is too tightly coupled. I have written an entire book on how to write more composable, more loosely coupled code, called \u201cComposing Software\u201d. If TypeScript is saving you a lot of refactoring pain, there\u2019s a good chance tight coupling is still causing you a lot of other avoidable problems. I strongly suggest reading the book, particularly the chapter \u201cMocking is a Code Smell\u201d, which provides a lot of information on the causes of tight coupling and some best practices that can help you avoid them.</p><p>On the other hand, some companies run very large ecosystems of connected projects sharing the same code repository (e.g., Google\u2019s famous monorepo). Using TypeScript enables them to upgrade API design choices to account for better designs and new use-cases. The developers responsible for those upgrades are also responsible for ensuring that their library changes don\u2019t break any of the software in the monorepo that depends on those libraries. TypeScript may offer significant time savings for this very limited subset of TypeScript users.</p><p>I say very limited subset, because giant, closed monorepo ecosystems are the exception, rather than the rule. The process might scale across Google, but can\u2019t scale to repositories that the library authors are not aware of. Making breaking changes to library APIs used by a broader ecosystem can break code you don\u2019t even know exists.</p><p>In traditional, more decentralized library ecosystems, people avoid breaking changes to APIs, and instead create new features following the open/closed principle (APIs are open for extension, and closed to breaking changes). This is how the web platform itself has mostly evolved, with a few exceptions. This is why React still supports features that have been replaced by better options since React 0.14. React evolves and adds great new features, radically improving the developer experience without breaking old functionality. For instance, class components will still be supported by React, even after the much improved React Hooks API matures.</p><p>That makes changes across the whole ecosystem optional, rather than required. Teams can upgrade their software gradually, on an as-needed basis rather than heaping a whole-ecosystem code change project on the library team.</p><p>Even in cases where whole ecosystem code changes are required, type inference and automated codemods can help \u2014 no TypeScript required.</p><p>I initially mentally scored refactoring a zero and left it off the list because I strongly favor the open/closed approach, inference, and codemods. However, some teams are getting real benefits from it under limited circumstances.</p><p>There\u2019s a very good chance that you\u2019d be better served in other ways using native JavaScript.</p><p>Type safety doesn\u2019t seem to make a big difference. TypeScript proponents frequently talk about the benefits of type safety, but there is little evidence that type safety makes much difference (really, static types seem to have very little impact) to production bug density. This is important because code review and TDD make a very big difference (40% \u2014 80% for TDD alone). Pair TDD with design review, spec review, and code review, and you\u2019re looking at 90%+ reductions in bug density. Many of those processes (particularly TDD) are capable of catching all of the same class of bugs that TypeScript catches, as well as many bugs that TypeScript will never be able to catch.</p><p>TypeScript is only capable of addressing a theoretical maximum of 20% of \u201cpublic bugs\u201d, where public means that the bugs survived past the implementation phase and got committed to the public repository, according to Zheng Gao and Earl T. Barr from University College London, and Christian Bird from Microsoft Research.</p><p>The authors of this study think they\u2019ve underestimated the impact of TypeScript because they assume that all the other quality measures have already been applied, but they made no effort to judge the quality of the other bug prevention measures. They acknowledge the variable, but leave it entirely out of the calculations.</p><p>In my experience, the vast majority of teams have partially applied some measures, but rarely applied all important bug prevention measures well. On my teams, we use design review, spec review, TDD, code review, lint, schema validation, and company-sponsored mentorship, which all have dramatic impacts on bug density, reducing type errors to very near zero.</p><p>In my experience, all but linting have a larger impact on code quality than static types. In other words, I\u2019m starting from a much stricter definition of zero than the authors of the paper.</p><p>If you have not properly implemented those other bug prevention measures, I have no doubt you\u2019ll see 15% \u2014 18% reduction in bug density using TypeScript alone, but you\u2019ll also completely miss 80% of the bugs until they get to production and start causing real problems.</p><p>Some will argue that TypeScript provides realtime bug feedback, so you can catch the bugs earlier, but so do type inference, lint, and TDD (I set up a watch script to run my unit tests on file save, so I get very near immediate, rich feedback). You may argue that these other measures have a cost, but because TypeScript will always miss 80% of bugs, you can\u2019t safely skip them either way, so their cost applies to both sides of the ROI math, and is already factored in.</p><p>The study looked at bugs that were known in advance, including the exact lines that were changed to fix the bugs in question, where the problem and potential solutions were known prior to introduction of typings. What this means is that even knowing that the bugs existed in advance, TypeScript was unable to detect 85% of public bugs \u2014 catching only 15%.</p><p>Update: We\u2019re going to give TypeScript the absolute theoretical maximum benefit of the doubt and use 20% in our calculations, to drive home the point about exponentially diminishing returns.</p><p>Why are so many bugs undetectable by TypeScript, and why did I call that 20% reduction a \u201ctheoretical maximum\u201d effect? For starters, specification errors caused about 78% of the publicly classified bugs studied on GitHub. The failure to correctly specify behaviors or correctly implement a specification is the most common type of bug by a huge margin, and that fact automatically renders an overwhelming majority of bugs impossible for TypeScript to detect or prevent. In \u201cTo Type or Not to Type\u201d, the study authors identified and classified a range of \u201cts-undetectable\u201d bugs.</p><a>\u201cTo Type or Not to Type\u201d</a><p>\u201cStringError\u201d above are the classification of errors where the string was the right type, but contained the wrong value (like an incorrect URL). Branch errors and predicate errors are logic errors that led to the wrong code paths being used. As you can see there are a variety of other errors that TypeScript just can\u2019t touch. There\u2019s little potential that TypeScript will ever be capable of detecting more than 20% of bugs.</p><p>But a 20% sounds like a lot! Why doesn\u2019t TypeScript get much higher bug prevention points?</p><p>Because there are so many bugs that are not detectable by static types, it would be irresponsible to skip other quality control measures like design review, spec review, code review, and TDD. So it\u2019s not fair to assume that TypeScript will be the only thing you\u2019re employing to prevent bugs. In order to really get a sense of ROI, we have to apply the bug reduction math after discounting the bugs caught by other measures which were not adequately factored in by the study authors.</p><p>Imagine your project would have contained 1,000 bugs with no bug prevention measures. After applying other quality measures, the potential production bug count is reduced to 100. Now we can look at how many additional bugs TypeScript would have prevented to get a truer sense of the bug catching return on our TypeScript investment. Close to 80% of bugs are not detectable by TypeScript, and all TypeScript-detectable bugs can potentially be caught with other measures like TDD.</p><ul><li>No measures: 1000 bugs</li><li>After other measures: 100 bugs remain \u2014 900 bugs caught</li><li>After adding TypeScript to other measures: 80 bugs remain \u2014 20 more bugs caught</li></ul><p>Some people argue that if you have static types, you don\u2019t need to worry about writing so many tests. Those people are making a silly argument. There is really no contest. Even if you\u2019re going to employ TypeScript, you still need the other measures.</p><p>In this scenario, reviews and TDD catch 900/1,000 bugs without TypeScript. TypeScript catches 200/1,000 bugs if you skip reviews and TDD. You obviously don\u2019t have to pick one or the other, but adding TypeScript after applying other measures leads to a very small improvement due to exponentially diminishing returns.</p><p>Update: 2019\u201302\u201311:</p><p>Airbnb recently reported a 38% reduction in bugs by adding TypeScript to their development process. How could that be? According to this article, that should be impossible, right? That\u2019s not how the math works. We\u2019re dealing with percentages, averages, and diminishing returns, not concrete values.</p><p>The study this article relies on represents averages, and the presence or absence of other quality measures impacts the percentage of bugs remaining that TypeScript could address.</p><p>The more ts-undetectable bugs the other measures address, the higher the percentage of remaining bugs TypeScript can address, but those other measures also reduce the total number of remaining bugs for TypeScript to address. So the percentage might go up, but the total number of bugs caught might change only a little.</p><p>As of this writing, they have not released their methodology or reported what other bug reduction measures they\u2019re employing, but my guess is that they\u2019re employing some form of design/spec review process to reduce the share of specification bugs that make it into their code in the first place.</p><p>In other words, when you eliminate a lot of bugs that TypeScript can\u2019t help with, TypeScript can provide a higher percentage of bug reduction to the remaining bugs.</p><p>This result doesn\u2019t change the 20% max value if TypeScript is the only quality control measure, and doesn\u2019t invalidate the point about exponentially diminishing returns.</p><p>Instead, it implies that Airbnb may have better-than-average design or spec review (or both), coupled with lower-than-average automated code coverage \u2014 perhaps missing unit test coverage, functional test coverage, or both. Proper unit test coverage can catch close to 100% of the bugs that static types can catch, along with a lot of bugs TypeScript can\u2019t catch.</p><p>Most teams have little or no design/spec review process implemented. Even having an engineer look at mock-ups with a critical eye before handing them off to a developer to implement would be better than average. Many teams don\u2019t have any formal design review process at all.</p><p>Here\u2019s what their TypeScript benefit chart might look like:</p><p>TypeScript is still catching just 38 out of 1,000 potential bugs, but since most of the potential bugs are caught by previous steps in the pipeline (like people reviewing mockups before they go to a developer to implement), TypeScript can address a larger share of remaining bugs. In this case, 18 more bugs than teams missing Airbnb\u2019s additional code quality measures.</p><p>The diminishing returns math could only be completely invalidated if TypeScript could catch a much larger share of all bugs: closer to 75%+, because at that stage, it might be viable to replace other expensive parts of the quality control process, like code review or TDD.</p><p>It would be interesting to learn exactly how many bugs Airbnb caught during the conversion to TypeScript, to learn about the classification of the bugs that TypeScript couldn\u2019t prevent, to learn the bug density (and how they calculated it), and to learn what other quality control measures they already employ.</p><p>Keep in mind: I\u2019m not arguing against using TypeScript. I\u2019m arguing for people to consider the costs and benefits and make a rational, informed decision that\u2019s right for you and your team. Some products require stricter quality control, and it may be worth the extra cost to eliminate 18 more bugs out of a thousand. For example, if your code powers critical parts of the self-driving system for a Tesla, I hope you\u2019re using static types along with all the other quality measures, because the cost of bugs is much higher. Each team should conduct their own ROI analysis and make the decision that is right for them.</p><p>Having implemented quality control systems on large scale, multi-million dollar development projects, I can tell you that my expectations for effectiveness on costly system implementations are in the territory of 30% \u2014 80% reductions. You can get those kinds of numbers from any of the following:</p><ul><li>Design and Spec Review (up to 80% reduction)</li><li>TDD (40% \u2014 80% reduction of remaining bugs)</li><li>Code Review (an hour of code review saves 33 hours maintenance)</li></ul><p>It turns out that type errors are just a small subset of the full range of possible bugs, and there are other ways to catch type errors. The data is in, and the result is very clear: TypeScript won\u2019t save you from bugs. At best, you\u2019ll get a very modest reduction, and you still need all your other quality measures.</p><p>Type correctness does not guarantee program correctness.</p><p>It looks like the benefits are not living up to the TypeScript hype. But those can\u2019t be the only benefits, right?</p><p>New JavaScript Features and Compile to Cross-Browser JavaScript: Babel does both for native JavaScript.</p><p>We\u2019ve reached the end of the benefits, and I don\u2019t know about you, but I\u2019m feeling a little underwhelmed. If we can get type hints, autocomplete, and great bug reductions for native JavaScript using other tools, the only question that remains is, does the TypeScript difference pay off the investment required to use it?</p><p>To figure that out, we need to take a closer look at the costs of TypeScript.</p><p>Recruiting: While nearly half of The State of JavaScript respondents have used TypeScript and would use it again, and an additional 33.7% would like to learn, 5.4% have used TypeScript and would not use it again, and 13.7% are not interested in learning TypeScript. That reduces the recruiting pool by almost 20%, which could be a significant cost to teams who need to do a lot of hiring. Hiring is an expensive process which can drag on for months and cut into the productive time of your other developers (who, more often than not, are the people most qualified to assess new candidate\u2019s skills).</p><p>On the other hand, if you only need to hire one or two developers, using TypeScript may make your opening more attractive to almost half the candidate pool. For small projects, it may be a wash, or even slightly positive. For teams of hundreds or thousands, it\u2019s going to swing into the negative side of the ROI error margin.</p><p>Setup, Initial Training: Because these are one-time costs, they\u2019re relatively low. Teams already familiar with JavaScript tend to get productive in TypeScript within 2\u20133 months, and pretty fluent within 6\u20138 months. Definitely more costly than recruiting, but certainly worth the effort if this were the only cost.</p><p>Missing Features \u2014 HOFs, Composition, Generics with Higher Kinded Types, Etc.: TypeScript is not fully coexpressive with idiomatic JavaScript. This is one of my biggest challenges (and expenses) with TypeScript, because fluent JavaScript developers will frequently encounter situations which are difficult or impossible to type, but conscientious developers will be interested in doing things right. They\u2019ll spend hours Googling for examples, trying to learn how to type things that TypeScript simply can\u2019t type properly.</p><p>TypeScript could improve on this cost by providing better documentation and discovery of TypeScript\u2019s current limitations, so developers waste less time trying to get it to behave well on higher order functions, declarative function compositions, transducers, and so on. In many cases, a well-behaved, readable, maintainable TypeScript typing simply isn\u2019t going to happen. Developers need to be able to discover that quickly so that they can spend their time on more productive things.</p><p>Ongoing Mentorship: While people get productive with TypeScript pretty quickly, it does take quite a bit longer to get feeling confident. I still feel like there\u2019s a lot more to learn. In TypeScript, there are different ways to type the same things, and figuring out the advantages and disadvantages of each, teasing out best practices, etc. takes quite a bit longer than the initial learning curve.</p><p>For example, new TypeScript developers tend to over-use annotations and inline typings, while more experienced TypeScript developers have learned to reuse interfaces and create separate typings to reduce the syntax clutter of inline annotations. More experienced developers will also spot ways to tighten up the typings to produce better errors at compile time.</p><p>This extra attention to typings is an ongoing cost you\u2019ll see every time you onboard new developers, but also as your experienced TypeScript developers learn and share new tricks with the rest of the team. This kind of ongoing mentorship is just a normal side-effect of collaboration, and it\u2019s a healthy habit that saves money in the long term when applied to other things, but it comes at a cost, and TypeScript adds significantly to it.</p><p>Typing Overhead: In the cost of typing overhead, I\u2019m including all the extra time spent typing, testing, debugging, and maintaining type annotations. Debugging types is a cost that is often overlooked. Type annotations come with their own class of bugs. Typings that are too strict, too relaxed, or just wrong.</p><p>This cost center has gone down since I first explored it, because many third party libraries now contain typings, so you don\u2019t have to do so much work trying to track them down or create them yourself. However, many of those typings are still broken and out-of-date in all but the most popular OSS packages, so you\u2019ll still end up backfilling typings for third party libraries that you want type hints for. Often, developers try to get those typings added upstream, with widely varied results.</p><p>You may also notice greatly increased syntax noise. In languages like Haskell, typings are generally short one-liners listed above the function being defined. In TypeScript, particularly for generic functions, they\u2019re often intrusive and defined inline by default.</p><p>Instead of adding to the readability of a function signature, TypeScript typings can often make them harder to read and understand. This is one reason experienced TypeScript developers tend to use more reusable typings and interfaces, and declare typings separately from function implementations. Large TypeScript projects tend to develop their own libraries of reusable typings that can be imported and used anywhere in the project, and maintenance of those libraries can become an extra \u2014 but worthwhile \u2014 chore.</p><p>Syntax noise is problematic for several reasons. You want to keep your code free of clutter for the same reasons you want to keep your house free of clutter:</p><ul><li>More clutter = more places for bugs to hide = more bugs.</li><li>More clutter makes it harder to find the information you\u2019re looking for.</li></ul><p>Clutter is like static on a poorly tuned radio \u2014 more noise than signal. When you eliminate the noise, you can hear the signal better. Reducing syntax noise is like tuning the radio to the proper frequency: The meaning comes through more easily.</p><p>Syntax noise is one of the heavier costs of TypeScript, and it could be improved on in a couple ways:</p><ul><li>Better support for generics using higher-kinded types, which can eliminate some of the template syntax noise. (See Haskell\u2019s type system for reference).</li><li>Encourage separate, rather than inline typings, by default. If it became a best practice to avoid inline typings, the typing syntax would be isolated from the function implementation, which would make it easier to read both the type signature and the implementation, because they wouldn\u2019t be competing with each other. This could be implemented as a documentation overhaul, along with some evangelism on Stack Overflow.</li></ul><h1>Conclusion</h1><p>I still love a lot of things about TypeScript, and I\u2019m still hopeful that it improves. Some of these cost concerns may be adequately addressed in the future by adding new features and improving documentation.</p><p>However, we shouldn\u2019t brush these problems under the rug, and it\u2019s irresponsible for developers to overstate the benefits of TypeScript without addressing the costs.</p><p>TypeScript can and should get better at type inference, higher order functions, and generics. The TypeScript team also has a huge opportunity to improve documentation, including tutorials, videos, best practices, and an easy-to-find rundown of TypeScript\u2019s limitations, which will help TypeScript developers save a lot of time and significantly reduce the costs of using TypeScript.</p><p>I\u2019m hopeful that as TypeScript continues to grow, more of its users will get past the honeymoon phase and realize its costs and current limitations. With more users, more great minds can focus on solutions.</p><p>As TypeScript stands, I would definitely use it again in small open-source libraries, primarily to make life easier for other TypeScript users. But I will not use the current version of TypeScript in my next large scale application, because the larger the project is, the more the costs of using TypeScript compound.</p><p>This conclusion is ironic because the TypeScript tagline is \u201cJavaScript that Scales\u201d. A more honest tagline might add a word: \u201cJavaScript that scales awkwardly.\u201d</p><p>Updated: 2019\u201302\u201311 \u2014 Clarified how Airbnb could report a 38% reduction in bugs after adding TypeScript without invalidating any of the claims made in this article. TL;DR \u2014 better than average design/spec review + lower than average test coverage could lead to a higher than average ts-addressable % of remaining bugs, without substantially changing the total percentage of bugs prevented by all measures.Updated: Jan 26, 2019 \u2014 added \u201cRefactoring\u201d benefit.Updated: Jan 26, 2019 \u2014 clarified bug reduction math, increased bug reduction benefit from 8% of remaining bugs to 20% to give TypeScript the maximum benefit of the doubt and demonstrate that it still doesn\u2019t materially impact ROI.</p><p>Eric Elliott is a distributed systems expert and author of the books, \u201cComposing Software\u201d and \u201cProgramming JavaScript Applications\u201d. As co-founder of DevAnywhere.io, he teaches developers the skills they need to work remotely and embrace work/life balance. He builds and advises development teams for crypto projects, and has contributed to software experiences for Adobe Systems,Zumba Fitness, The Wall Street Journal, ESPN, BBC, and top recording artists including Usher, Frank Ocean, Metallica, and many more.</p><p>He enjoys a remote lifestyle with the most beautiful woman in the world.</p>", "tags": ["JavaScript", "Typescript", "Technology", "Programming", "Software Engineering"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/0*cF-7zKh4jqldcDf2"], "url": "https://medium.com/@jonathanbluks/10-signs-you-will-suck-at-programming-5497a6a52c5c", "dateCreated": "2019-01-27T22:50:03.994Z", "datePublished": "2019-01-27T22:50:03.994Z", "dateModified": "2021-08-21T16:01:21.518Z", "headline": "10 Signs You Will Suck at Programming - Jonathan Bluks - Medium", "name": "10 Signs You Will Suck at Programming - Jonathan Bluks - Medium", "description": "I often see questions on Reddit or Quora along the lines of \u201cHow do I know if I\u2019ll succeed as a programmer?\u201d (In fact this post expands on an answer I gave on Quora a while back.) When someone is\u2026", "identifier": "5497a6a52c5c", "author": {"@type": "Person", "name": "Jonathan Bluks", "url": "https://medium.com/@jonathanbluks"}, "creator": ["Jonathan Bluks"], "publisher": {"@type": "Organization", "name": "Medium", "url": "https://medium.com/", "logo": {"@type": "ImageObject", "width": 308, "height": 60, "url": "https://miro.medium.com/max/616/1*OMF3fSqH8t4xBJ9-6oZDZw.png"}}, "mainEntityOfPage": "https://medium.com/@jonathanbluks/10-signs-you-will-suck-at-programming-5497a6a52c5c"}, "content": "<h1>10 Signs You Will Suck at Programming</h1><a></a><a>Jonathan Bluks</a><a>Jan 27, 2019\u00b713 min read</a><a>Tim Gouw</a><a>Unsplash</a><p>I often see questions on Reddit or Quora along the lines of \u201cHow do I know if I\u2019ll succeed as a programmer?\u201d (In fact this post expands on an answer I gave on Quora a while back.) When someone is considering a career change, or is interested in software development and curious about what it takes, inevitably the question of programming comes up.</p><p>In fact, I think this is a major barrier to entry in people\u2019s minds when they don\u2019t have any formal training in computing. It\u2019s natural to think that if you aren\u2019t good at programming, then your desire is a non-starter. It\u2019s kind of like if you want to be an actor and wonder if you\u2019ll be good at acting.</p><p>As an Educator that teaches Full-Stack Web Development, I have taught many \u201cfirst time programmers\u201d. And the good news is that I have rarely found a student that couldn\u2019t learn to program. I see it as a basic human skill, just like reading, writing, and arithmetic. Anyone can do it, it is part of our human capacities, but does need to be learned.</p><p>Over the past two years of teaching, I have witnessed various students struggle in the process, and some common themes that come up in their struggles. If you look at this list and see them in yourself, rest assured, you will truly suck at programming and should probably find something else to do with your time. But, if you are still committed to your goal of becoming a developer, you can easily face these issues and change.</p><p>Programming is a basic human skill, just like reading, writing and arithmetic. Anyone can learn to program with time and effort.</p><p>The following list will help you know if you will suck at programming \u2014 and what you can do about it if you want to change.</p><h1>1 | Lack of curiosity</h1><p>If you lack curiosity about computers and how technology works, you will never be successful as a programmer.</p><p>A fundamental requirement for learning is an active interest in the thing you are learning. If you do not possess a mind that is curious about technology, you will not have the energy it takes to persist in learning the broad and deep knowledge required to be a successful programmer.</p><p>In contrast, the world of technology is like a huge ocean of interesting domains, inter-connected ideas, and possibilities that can excite the imagination. It takes an inherent internal motivation to want to dive in and discover all that you can.</p><p>Find Your Curiosity: Ask yourself if programming truly interests you. If your honest answer is that it doesn\u2019t, go find something that you are interested in. Save yourself the time and energy. But if your answer is \u201cYes\u201d, then push yourself find something new that you haven\u2019t noticed before, recognize the vast ocean and dive a little deeper.</p><h1>2 | Lack of autonomy and resourcefulness</h1><p>If you don\u2019t develop the ability to solve problems for yourself, you will never be successful as a programmer.</p><p>Without a doubt, to be a successful developer, you have to be confident in your OWN ability to learn. This is actually a fundamental life skill \u2014 if you are are over the age of 18, nobody is obligated to teach you anything. That\u2019s reality. It\u2019s up to you to find the information and help that you need to learn what is important to you.</p><p>In the world of development, all the information you need is found in that magical place formerly known as the Information Super Highway. This massive library has one huge doorway: Google. Learning that you can simply type whatever you want into Google and get to the information you need is the first hurdle to cross when you want to learn the skills needed to be in technology.</p><p>In addition to being a good googler, all programming languages have documentation and specifications that are very explicit about how the language works. It\u2019s like using a dictionary \u2014 when you see a word you don\u2019t recognize, you look it up. The quickest, most reliable way to build your skill as a programmer is to simply read the documentation. It\u2019s literally all there.</p><p>Use the Resources: Recognize that all the answers you need really are out there. When you have a question, force yourself to google it before asking someone else for the answer and check the documentation. Save the time of others for when you have tried and truly failed to find the answer you need.</p><h1>3 | Lack of persistence in the face of a problem</h1><p>If you give up easily in the face of problems, you will never be successful as a programmer.</p><p>The essence of programming is solving problems. That\u2019s the whole reason computers were invented! Whenever you begin working on a program you will encounter a whole \u201cstack\u201d of problems. And once you resolve a problem, there is almost always another problem right behind it. You are making progress, but there are always new problems to face.</p><p>Facing that stack of problems can be daunting and discouraging. If you feel like things should \u201cjust work\u201d, then you won\u2019t have the energy to persist as the problems continue and little by little knock down your emotional resolve. It\u2019s literally your job to figure out why things aren\u2019t working.</p><p>From my in-class experience, there are usually one or two students per class who seem to have knack for encountering more problems than other students \u2014 often quite random and obscure problems. I remind the student that the more problems they face upfront, the possibility of learning more deeply and thoroughly increases. If they can gain understanding through these problems, they will quickly find that they are more confident because they have faced and resolved more problems than the average student.</p><p>Patient Acceptance: You need to recognize that problems come with the territory and are not problems, but in fact challenges. Every challenge you face and overcome gives you deeper understanding and a better ability to face new challenges, and quickly resolve old ones.</p><h1>4 | No feeling of success in overcoming a problem</h1><p>If you don\u2019t feel a sense of excitement and accomplishment after solving a problem, you will never be successful as a programmer.</p><p>Related to the previous issue of giving up too easily is a lack of \u201cgood feelings\u201d once you have successfully resolved a problem. When fixing bugs and issues becomes a treadmill that never seems to end, you lose touch with the excitement that comes in overcoming a problem.</p><p>There is actually a dopamine hit that you need when you overcome a problem. This is similar to the experience of completing a level in a video game, or solving a challenge like a crossword or sudoku. We all know that there is a good feeling that comes from persisting through a challenge and then finally winning at the end. But if you have lost the ability to feel those feelings, or never truly cared in the first place, you will not be able experience the joy that comes from programming. If you see programming as a grind where you just want to get a result as easily as you can, you will never truly be a successful programmer.</p><p>Celebrate Your Wins: Whenever you solve a problem that you struggled with, no matter how small, always take pride in your accomplishment, take a break and congratulate yourself for a job well done. Let the feeling of success sink in and energize you for the next problem you face.</p><h1>5 | Impatient about learning and understanding</h1><p>If you are impatient about learning and expect to master everything quickly and effortlessly, you will never truly be successful at programming.</p><p>As humans we are limited creatures. Even though our world moves faster and faster, and computers are a big cause of that, we can only move as fast as we are able. Our brains work at a certain speed, and depending on our past, our beliefs, our emotional states, our health\u2026we will all learn and integrate information at different speeds.</p><p>The world of technology is like a vast ocean. You will never get to the end of it, you will never get to a point where you are a master with nothing else to learn. If you let yourself get overwhelmed, you will always feel a pressure to \u201ccatch up\u201d and feel that you never know enough. If you can\u2019t accept what you know and then learn a little bit more, you will feel like you are getting nowhere, and give up.</p><p>Instead, you need to enjoy the journey of learning for itself. Every little bit of knowledge you gain, or new skill you gain needs to make you excited. Like solving problems, you need to let yourself feel the pride of recognizing that you have taken a step forward, even if it is a small one.</p><p>Acknowledge Your Progress: There is a lot to learn, and the journey of programming never ends. But the knowledge is cumulative, so take pride it what you do know, and trust that every effort you take in your learning will create a strong foundation of knowledge for wherever your career takes you.</p><h1>6 | Getting bored/tired from thinking</h1><p>If you are lazy in your thinking and see concentrated, focused thinking as a chore, you will never truly be successful at programming.</p><p>Programming is a thinking activity. As humans we are really good at thinking, but the reality is that even though we naturally spend all day doing it, we are lazy in our thinking. The ability to maintain concentrated, focused effort on a single problem over a period time is difficult if you aren\u2019t used to it.</p><p>Symptoms of this include staring blankly at the screen, feeling a cloud descend on your thoughts, procrastinating on a problem, flipping between browser tabs, and desperately scanning StackOverflow for \u201can answer\u201d. These are signs that you have hit a mental limitation and need to find a way through.</p><p>While programming, you will get tired and thinking literally burns physical energy just like exercising our bodies. When you aren\u2019t used to exerting the mental energy needed to it can feel difficult to stay focused. But it is just like going to the gym, the more that you do it, the stronger you will get.</p><p>Your Mind is a Muscle: Trust that your brain is like a muscle \u2014 as you use it, it gets better and more efficient in it\u2019s thinking. As you put pieces together and develop mental concepts, it becomes much easier to discover solutions.</p><h1>7 | Inability to think for yourself</h1><p>If you expect others to think for you, and are unwilling to look at the details of your own situation, you will never be a truly successful programmer.</p><p>When you are learning something new, it is easy to feel like you lack the knowledge and experience to have your own opinions. Taking initiative or doing/saying the wrong thing seems risky.</p><p>There is an inherent fear we all have in being wrong. When that fear of being wrong inhibits your exploration and curiosity, you stifle the ability to develop true knowledge, knowledge that is gained from experience and \u201cfailure\u201d. When you need to rely on the \u201cguru\u2019s\u201d opinion, a popular blogger, a best practice, or the \u201ctextbook\u201d answer, then you have not truly integrated a working knowledge of programming.</p><p>You need to develop you own opinions about what works and what doesn\u2019t. You need to understand why you think your solution works, and what the benefits are. You need to developed a nuanced perspective that goes beyond what is obvious. You need to be able to \u201cargue\u201d your side, and then if you change, you can own the new perspective you have gained.</p><p>Think for yourself: Through your experience and critical thinking skills, develop your own perspectives. Make reasonable guesses, take a position, and be willing to change as new information comes to light.</p><h1>8 | Rigid, narrow and/or disorganized thinking</h1><p>If you are rigid in your thinking, and you have difficulty keeping your code organized \u2014 and by extension your thoughts organized and focused, you will never be successful at programming.</p><p>There are two extremes that I sometimes see in students. The first is a rigid and narrow approach to thinking. This attitude refuses help, and despite feedback, doesn\u2019t change. Things are seen from one perspective only, and suggestions are ignored.</p><p>A second extreme I see is disorganized thinking. Students seem to make things more complicated than necessary, their code is messy and hard to follow. They overthink problems and write 100 lines of code, when 10 would have been sufficient.</p><p>When these two mindsets are combined the result is an uptight approach to programming, like a brute force approach that leads to layers and layers of fixes and \u201chacks\u201d. What is required is the ability to go back over the solution, reevaluate it, give up on the initial approach, and reorganize.</p><p>Not being able to see other possibilities or receive feedback inhibits the ability to grow and improve. Being disorganized slows you down and prevents you from seeing patterns that would otherwise be obvious. And the overall quality of your work is diminished.</p><p>Self Reflection: You need to take a step back, and look at the bigger picture of how you are approaching things. How can you do this better? Is there anything you can do to make your life easier? What are you missing that could help you?</p><h1>9 | Needing the \u201cright\u201d answer instead of recognizing a spectrum of \u201cgood\u201d and \u201cbad\u201d answers</h1><p>If you see the end goal of programming as finding the right solution, rather than a spectrum of solutions, you will never truly be successful as a programmer.</p><p>When starting to learn the skills or programming, students often want to know whether what they have done is \u201cright\u201d. The answer is always \u201cit depends.\u201d</p><p>Computer Science is a science of evaluating tradeoffs. Given different sets of circumstances, which would be the better path? It all depends on the circumstances and goals. When you see programming as a test with either a right answer or wrong answer, you are losing sight of the bigger picture, and giving up your creativity. Any answer can be \u201cright\u201d if you can justify it given the circumstances.</p><p>The reality is that programming is more like writing poems or short stories (or potentially novels if the programs are large). There is an aesthetic and beauty that can be seen in your code, and sometimes it is only recognizable by you and other programmers. The reasons you decided on your solution, and the way you conceived of your answer is more important than the \u201cright way\u201d or the \u201cwrong way\u201d. Having the mind of an artist allows you to play with options and possibilities, rather than thinking there is only one way. That is the beauty of programming, there are many ways to solve a problem, and the consideration of different possibilities leads to a feeling about which way is best for the situation.</p><p>Get Creative: Recognize that there are numerous ways to solve a problem, and through experience and exposure, you will develop a nuanced understanding overtime about which solutions feel better than others. Looking at the big picture, imagining different possibilities and trusting your gut will lead to better solutions that are more satisfying.</p><h1>10 | Not paying careful attention to details</h1><p>If you gloss over details, and overlook little things, you will never be a truly successful programmer.</p><p>Computers are precise machines. When it comes to programming a computer, you need to provide the necessary commands precisely in the way a computer expects. If you don\u2019t, nothing will work. There isn\u2019t a middle ground where things mostly work \u2014 it either does or it doesn\u2019t.</p><p>That means that when you are programming you have to have an eye for details. Every space, bracket, or semi-colon counts. When out of place, nothing will work. When the computer spits back an error message, you have to be able to look at that message and understand exactly what it is telling you. And the reality is that if you miss details like that, you could spend hours tracking down a problem that was literally the result of a typo.</p><p>As they say, the devil is in the details. And that is definitely true for programming.</p><p>Pay Attention to the Details: The details matter and you have to accept that. Once you do, you can begin to always be scanning your code for anything that is out of place. You can organize your code and use tools that help you identify issues quickly.</p><h1>Bonus: Being Business-Minded</h1><p>This is a side observation that I have noticed \u2014 students who are particularly business-minded, are often focused on the outcome rather than process. They want to get a \u201cworking app\u201d that will move them forward on their business idea, they want to \u201cget to market first\u201d, and they see the learning curve as a barrier to their goal of getting their business going.</p><p>In reflecting on students that were difficult to truly help grow as programmers, I found an impatience with the process inhibiting the learning needed to truly understand technology. They tend to see technology as a means to an end, rather than a legitimate domain of knowledge to be explored and enjoyed.</p><p>As a natural extension of this, I have found certain students that were more business inclined, and struggled with their learning, often quickly had freelance clients signed up for work that they didn\u2019t actually have the skills do themselves! They would scramble to find resources/templates to get a project working for a client, or, outsource the work to someone else. They truly sucked at programming, but were amazing at getting people to pay them to program!</p><p>So what I would add, is that students who desire to start businesses, are excellent at sales, networking, and business development may struggle more than others to learn the skill of programming. Their natural desire to create financial opportunities and connect people to solutions makes them impatient with the tedious details involved in programming.</p><h1>Conclusion</h1><p>While programming can be a difficult skill to learn, it is certainly one that most people can learn. The above list contains attitudes and mindsets that get in the way, but most people can overcome them and develop a competency in the area of programming \u2014 if not mastery.</p><p>If you are interested in learning to program, I encourage you to begin the journey. Keep the above list in mind, and start exploring the many resources available online that can get you moving forward quickly. You won\u2019t regret it.</p><p>Disclaimer: The opinions expressed here are strictly my own, based on my professional experience as an Educator and Web Developer. They do not represent the opinions or views of BrainStation.</p>", "tags": ["Programming", "Software Development", "Education", "Advice and Opinion", "Tech"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*S2dke2xfpZYUCImIZziVsA.png"], "url": "https://towardsdatascience.com/feature-engineering-for-machine-learning-3a5e293a5114", "dateCreated": "2019-04-01T13:24:21.142Z", "datePublished": "2019-04-01T13:24:21.142Z", "dateModified": "2019-04-03T07:07:16.362Z", "headline": "Fundamental Techniques of Feature Engineering for Machine Learning", "name": "Fundamental Techniques of Feature Engineering for Machine Learning", "description": "What is a feature and why we need the engineering of it? Basically, all machine learning algorithms use some input data to create outputs. This input data comprise features, which are usually in the\u2026", "identifier": "3a5e293a5114", "author": {"@type": "Person", "name": "Emre Ren\u00e7bero\u011flu", "url": "https://towardsdatascience.com/@emrerencberoglu"}, "creator": ["Emre Ren\u00e7bero\u011flu"], "publisher": {"@type": "Organization", "name": "Towards Data Science", "url": "towardsdatascience.com", "logo": {"@type": "ImageObject", "width": 165, "height": 60, "url": "https://miro.medium.com/max/330/1*mG6i4Bh_LgixUYXJgQpYsg@2x.png"}}, "mainEntityOfPage": "https://towardsdatascience.com/feature-engineering-for-machine-learning-3a5e293a5114"}, "content": "<h1>Fundamental Techniques of Feature Engineering for Machine Learning</h1><h2>All required methods for comprehensive data preprocessing with Pandas examples.</h2><a></a><a>Emre Ren\u00e7bero\u011flu</a><a>Apr 1, 2019\u00b714 min read</a><a></a><h1>Introduction</h1><p>What is a feature and why we need the engineering of it? Basically, all machine learning algorithms use some input data to create outputs. This input data comprise features, which are usually in the form of structured columns. Algorithms require features with some specific characteristic to work properly. Here, the need for feature engineering arises. I think feature engineering efforts mainly have two goals:</p><ul><li>Preparing the proper input dataset, compatible with the machine learning algorithm requirements.</li><li>Improving the performance of machine learning models.</li></ul><p>The features you use influence more than everything else the result. No algorithm alone, to my knowledge, can supplement the information gain given by correct feature engineering.</p><p>\u2014 Luca Massaron</p><p>According to a survey in Forbes, data scientists spend 80% of their time on data preparation:</p><a>Source: https://www.forbes.com/sites/gilpress/2016/03/23/data-preparation-most-time-consuming-least-enjoyable-data-science-task-survey-says/</a><p>This metric is very impressive to show the importance of feature engineering in data science. Thus, I decided to write this article, which summarizes the main techniques of feature engineering with their short descriptions. I also added some basic python scripts for every technique. You need to import Pandas and Numpy library to run them.</p><p>Some techniques above might work better with some algorithms or datasets, while some of them might be beneficial in all cases. This article does not aim to go so much deep in this aspect. Tough, it is possible to write an article for every method above, I tried to keep the explanations brief and informative. I think the best way to achieve expertise in feature engineering is practicing different techniques on various datasets and observing their effect on model performances.</p><h2>List of Techniques</h2><ul><li>1.Imputation</li><li>2.Handling Outliers</li><li>3.Binning</li><li>4.Log Transform</li><li>5.One-Hot Encoding</li><li>6.Grouping Operations</li><li>7.Feature Split</li><li>8.Scaling</li><li>9.Extracting Date</li></ul><h1>1.Imputation</h1><p>Missing values are one of the most common problems you can encounter when you try to prepare your data for machine learning. The reason for the missing values might be human errors, interruptions in the data flow, privacy concerns, and so on. Whatever is the reason, missing values affect the performance of the machine learning models.</p><p>Some machine learning platforms automatically drop the rows which include missing values in the model training phase and it decreases the model performance because of the reduced training size. On the other hand, most of the algorithms do not accept datasets with missing values and gives an error.</p><p>The most simple solution to the missing values is to drop the rows or the entire column. There is not an optimum threshold for dropping but you can use 70% as an example value and try to drop the rows and columns which have missing values with higher than this threshold.</p><h2>Numerical Imputation</h2><p>Imputation is a more preferable option rather than dropping because it preserves the data size. However, there is an important selection of what you impute to the missing values. I suggest beginning with considering a possible default value of missing values in the column. For example, if you have a column that only has 1 and NA, then it is likely that the NA rows correspond to 0. For another example, if you have a column that shows the \u201ccustomer visit count in last month\u201d, the missing values might be replaced with 0 as long as you think it is a sensible solution.</p><p>Another reason for the missing values is joining tables with different sizes and in this case, imputing 0 might be reasonable as well.</p><p>Except for the case of having a default value for missing values, I think the best imputation way is to use the medians of the columns. As the averages of the columns are sensitive to the outlier values, while medians are more solid in this respect.</p><h2>Categorical Imputation</h2><p>Replacing the missing values with the maximum occurred value in a column is a good option for handling categorical columns. But if you think the values in the column are distributed uniformly and there is not a dominant value, imputing a category like \u201cOther\u201d might be more sensible, because in such a case, your imputation is likely to converge a random selection.</p><h1>2.Handling Outliers</h1><p>Before mentioning how outliers can be handled, I want to state that the best way to detect the outliers is to demonstrate the data visually. All other statistical methodologies are open to making mistakes, whereas visualizing the outliers gives a chance to take a decision with high precision. Anyway, I am planning to focus visualization deeply in another article and let\u2019s continue with statistical methodologies.</p><p>Statistical methodologies are less precise as I mentioned, but on the other hand, they have a superiority, they are fast. Here I will list two different ways of handling outliers. These will detect them using standard deviation, and percentiles.</p><h2>Outlier Detection with Standard Deviation</h2><p>If a value has a distance to the average higher than x * standard deviation, it can be assumed as an outlier. Then what x should be?</p><p>There is no trivial solution for x, but usually, a value between 2 and 4 seems practical.</p><p>In addition, z-score can be used instead of the formula above. Z-score (or standard score) standardizes the distance between a value and the mean using the standard deviation.</p><h2>Outlier Detection with Percentiles</h2><p>Another mathematical method to detect outliers is to use percentiles. You can assume a certain percent of the value from the top or the bottom as an outlier. The key point is here to set the percentage value once again, and this depends on the distribution of your data as mentioned earlier.</p><p>Additionally, a common mistake is using the percentiles according to the range of the data. In other words, if your data ranges from 0 to 100, your top 5% is not the values between 96 and 100. Top 5% means here the values that are out of the 95th percentile of data.</p><h2>An Outlier Dilemma: Drop or Cap</h2><p>Another option for handling outliers is to cap them instead of dropping. So you can keep your data size and at the end of the day, it might be better for the final model performance.</p><p>On the other hand, capping can affect the distribution of the data, thus it better not to exaggerate it.</p><h1>3.Binning</h1><p>Binning can be applied on both categorical and numerical data:</p><p>The main motivation of binning is to make the model more robust and prevent overfitting, however, it has a cost to the performance. Every time you bin something, you sacrifice information and make your data more regularized. (Please see regularization in machine learning)</p><p>The trade-off between performance and overfitting is the key point of the binning process. In my opinion, for numerical columns, except for some obvious overfitting cases, binning might be redundant for some kind of algorithms, due to its effect on model performance.</p><p>However, for categorical columns, the labels with low frequencies probably affect the robustness of statistical models negatively. Thus, assigning a general category to these less frequent values helps to keep the robustness of the model. For example, if your data size is 100,000 rows, it might be a good option to unite the labels with a count less than 100 to a new category like \u201cOther\u201d.</p><h1>4.Log Transform</h1><p>Logarithm transformation (or log transform) is one of the most commonly used mathematical transformations in feature engineering. What are the benefits of log transform:</p><ul><li>It helps to handle skewed data and after transformation, the distribution becomes more approximate to normal.</li><li>In most of the cases the magnitude order of the data changes within the range of the data. For instance, the difference between ages 15 and 20 is not equal to the ages 65 and 70. In terms of years, yes, they are identical, but for all other aspects, 5 years of difference in young ages mean a higher magnitude difference. This type of data comes from a multiplicative process and log transform normalizes the magnitude differences like that.</li><li>It also decreases the effect of the outliers, due to the normalization of magnitude differences and the model become more robust.</li></ul><p>A critical note: The data you apply log transform must have only positive values, otherwise you receive an error. Also, you can add 1 to your data before transform it. Thus, you ensure the output of the transformation to be positive.</p><p>Log(x+1)</p><h1>5.One-hot encoding</h1><p>One-hot encoding is one of the most common encoding methods in machine learning. This method spreads the values in a column to multiple flag columns and assigns 0 or 1 to them. These binary values express the relationship between grouped and encoded column.</p><p>This method changes your categorical data, which is challenging to understand for algorithms, to a numerical format and enables you to group your categorical data without losing any information. (For details please see the last part of Categorical Column Grouping)</p><p>Why One-Hot?: If you have N distinct values in the column, it is enough to map them to N-1 binary columns, because the missing value can be deducted from other columns. If all the columns in our hand are equal to 0, the missing value must be equal to 1. This is the reason why it is called as one-hot encoding. However, I will give an example using the get_dummies function of Pandas. This function maps all values in a column to multiple columns.</p><h1>6.Grouping Operations</h1><p>In most machine learning algorithms, every instance is represented by a row in the training dataset, where every column show a different feature of the instance. This kind of data called \u201cTidy\u201d.</p><p>Tidy datasets are easy to manipulate, model and visualise, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table.</p><p>\u2014 Hadley Wickham</p><p>Datasets such as transactions rarely fit the definition of tidy data above, because of the multiple rows of an instance. In such a case, we group the data by the instances and then every instance is represented by only one row.</p><p>The key point of group by operations is to decide the aggregation functions of the features. For numerical features, average and sum functions are usually convenient options, whereas for categorical features it more complicated.</p><h2>Categorical Column Grouping</h2><p>I suggest three different ways for aggregating categorical columns:</p><ul><li>The first option is to select the label with the highest frequency. In other words, this is the max operation for categorical columns, but ordinary max functions generally do not return this value, you need to use a lambda function for this purpose.</li></ul><ul><li>Second option is to make a pivot table. This approach resembles the encoding method in the preceding step with a difference. Instead of binary notation, it can be defined as aggregated functions for the values between grouped and encoded columns. This would be a good option if you aim to go beyond binary flag columns and merge multiple features into aggregated features, which are more informative.</li></ul><ul><li>Last categorical grouping option is to apply a group by function after applying one-hot encoding. This method preserves all the data -in the first option you lose some-, and in addition, you transform the encoded column from categorical to numerical in the meantime. You can check the next section for the explanation of numerical column grouping.</li></ul><h2>Numerical Column Grouping</h2><p>Numerical columns are grouped using sum and mean functions in most of the cases. Both can be preferable according to the meaning of the feature. For example, if you want to obtain ratio columns, you can use the average of binary columns. In the same example, sum function can be used to obtain the total count either.</p><h1>7.Feature Split</h1><a>Jaxon Lott</a><a>Unsplash</a><p>Splitting features is a good way to make them useful in terms of machine learning. Most of the time the dataset contains string columns that violates tidy data principles. By extracting the utilizable parts of a column into new features:</p><ul><li>We enable machine learning algorithms to comprehend them.</li><li>Make possible to bin and group them.</li><li>Improve model performance by uncovering potential information.</li></ul><p>Split function is a good option, however, there is no one way of splitting features. It depends on the characteristics of the column, how to split it. Let\u2019s introduce it with two examples. First, a simple split function for an ordinary name column:</p><p>The example above handles the names longer than two words by taking only the first and last elements and it makes the function robust for corner cases, which should be regarded when manipulating strings like that.</p><p>Another case for split function is to extract a string part between two chars. The following example shows an implementation of this case by using two split functions in a row.</p><h1>8.Scaling</h1><p>In most cases, the numerical features of the dataset do not have a certain range and they differ from each other. In real life, it is nonsense to expect age and income columns to have the same range. But from the machine learning point of view, how these two columns can be compared?</p><p>Scaling solves this problem. The continuous features become identical in terms of the range, after a scaling process. This process is not mandatory for many algorithms, but it might be still nice to apply. However, the algorithms based on distance calculations such as k-NN or k-Means need to have scaled continuous features as model input.</p><p>Basically, there are two common ways of scaling:</p><h2>Normalization</h2><p>Normalization (or min-max normalization) scale all values in a fixed range between 0 and 1. This transformation does not change the distribution of the feature and due to the decreased standard deviations, the effects of the outliers increases. Therefore, before normalization, it is recommended to handle the outliers.</p><h2>Standardization</h2><p>Standardization (or z-score normalization) scales the values while taking into account standard deviation. If the standard deviation of features is different, their range also would differ from each other. This reduces the effect of the outliers in the features.</p><p>In the following formula of standardization, the mean is shown as \u03bc and the standard deviation is shown as \u03c3.</p><h1>9.Extracting Date</h1><p>Though date columns usually provide valuable information about the model target, they are neglected as an input or used nonsensically for the machine learning algorithms. It might be the reason for this, that dates can be present in numerous formats, which make it hard to understand by algorithms, even they are simplified to a format like \"01\u201301\u20132017\".</p><p>Building an ordinal relationship between the values is very challenging for a machine learning algorithm if you leave the date columns without manipulation. Here, I suggest three types of preprocessing for dates:</p><ul><li>Extracting the parts of the date into different columns: Year, month, day, etc.</li><li>Extracting the time period between the current date and columns in terms of years, months, days, etc.</li><li>Extracting some specific features from the date: Name of the weekday, Weekend or not, holiday or not, etc.</li></ul><p>If you transform the date column into the extracted columns like above, the information of them become disclosed and machine learning algorithms can easily understand them.</p><h1>Conclusion</h1><a>https://xkcd.com/1838/</a><p>I tried to explain fundamental methods that can be beneficial in the feature engineering process. After this article, proceeding with other topics of data preparation such as feature selection, train/test splitting, and sampling might be a good option.</p><p>You can check my other article about Oversampling.</p><p>Lastly, I want to conclude the article with a reminder. These techniques are not magical tools. If your data tiny, dirty and useless, feature engineering may remain incapable. Do not forget \u201cgarbage in, garbage out!\u201d</p><h2>References</h2><ul><li>Stack Overflow questions are very beneficial for every kind of feature engineering script.</li><li>I highly recommend Kaggle competitions and their discussion boards.</li><li>Ways to Detect and Remove the Outliers</li><li>Understanding Feature Engineering (Part 1) \u2014 Continuous Numeric Data</li><li>Understanding Feature Engineering (Part 2) \u2014 Categorical Data</li><li>Log Transformations for Skewed and Wide Distributions</li><li>Tidy data</li><li>About Feature Scaling and Normalization</li></ul>", "tags": ["Data Science", "Machine Learning", "Artificial Intelligence", "Programming", "Technology"]}, {"jsonld": {"@context": "http://schema.org", "@type": "NewsArticle", "image": ["https://miro.medium.com/max/1200/1*m5aPLXkrWJs7xKsfYViJEg.png"], "url": "https://medium.com/free-code-camp/the-react-handbook-b71c27b0a795", "dateCreated": "2019-01-08T16:50:56.411Z", "datePublished": "2019-01-08T16:50:56.411Z", "dateModified": "2019-02-22T10:29:35.498Z", "headline": "The React Handbook - We\u2019ve moved to freeCodeCamp.org/news - Medium", "name": "The React Handbook - We\u2019ve moved to freeCodeCamp.org/news - Medium", "description": "I find this approach gives a well-rounded overview. This book does not try to cover everything under the sun related to React, but it should give you the basic building blocks to get out there and\u2026", "identifier": "b71c27b0a795", "author": {"@type": "Person", "name": "Flavio Copes", "url": "https://medium.com/@flaviocopes"}, "creator": ["Flavio Copes"], "publisher": {"@type": "Organization", "name": "We\u2019ve moved to freeCodeCamp.org/news", "url": "https://medium.com/free-code-camp", "logo": {"@type": "ImageObject", "width": 500, "height": 60, "url": "https://miro.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}}, "mainEntityOfPage": "https://medium.com/free-code-camp/the-react-handbook-b71c27b0a795"}, "content": "<h1>The React Handbook</h1><a></a><a>Flavio Copes</a><a>Jan 8, 2019</a><p>The React Handbook follows the 80/20 rule: learn in 20% of the time the 80% of a topic.</p><p>I find this approach gives a well-rounded overview. This book does not try to cover everything under the sun related to React, but it should give you the basic building blocks to get out there and become a great React developer. If you think some specific topic should be included, tell me. You can reach me on Twitter @flaviocopes.</p><p>I hope the contents of this book will help you achieve what you want: learn the basics of React.</p><p>You can get this ebook in PDF, ePub and Mobi format at reacthandbook.com</p><h1>Book Index</h1><h2>Table of Contents</h2><p>An introduction to ReactHow to use create-react-app</p><p>SECTION 1: MODERN JAVASCRIPT CORE CONCEPTS YOU NEED TO KNOW TO USE REACT</p><ul><li>Variables</li><li>Arrow functions</li><li>Rest and spread</li><li>Object and array destructuring</li><li>Template literals</li><li>Classes</li><li>Callbacks</li><li>Promises</li><li>Async/Await</li><li>ES Modules</li></ul><p>SECTION 2: REACT CONCEPTS</p><ul><li>Single Page Applications</li><li>Declarative</li><li>Immutability</li><li>Purity</li><li>Composition</li><li>The Virtual DOM</li><li>Unidirectional Data Flow</li></ul><p>SECTION 3: IN-DEPTH REACT</p><ul><li>JSX</li><li>Components</li><li>State</li><li>Props</li><li>Presentational vs container components</li><li>State vs props</li><li>PropTypes</li><li>React Fragment</li><li>Events</li><li>Lifecycle Events</li><li>Forms in React</li><li>Reference a DOM element</li><li>Server side rendering</li><li>The Context API</li><li>Higher order components</li><li>Render Props</li><li>Hooks</li><li>Code splitting</li></ul><p>SECTION 4: PRACTICAL EXAMPLES</p><ul><li>Build a simple counter</li><li>Fetch and display GitHub users information via API</li></ul><p>SECTION 5: STYLING</p><ul><li>CSS in React</li><li>SASS in React</li><li>Styled Components</li></ul><p>SECTION 6: TOOLING</p><ul><li>Babel</li><li>Webpack</li></ul><p>SECTION 7: TESTING</p><ul><li>Jest</li><li>Testing React components</li></ul><p>SECTION 8: THE REACT ECOSYSTEM</p><ul><li>React Router</li><li>Redux</li><li>Next.js</li><li>Gatsby</li></ul><p>Wrapping up</p><h1>An introduction to the React view library</h1><h2>What is React?</h2><p>React is a JavaScript library that aims to simplify development of visual interfaces.</p><p>Developed at Facebook and released to the world in 2013, it drives some of the most widely used apps, powering Facebook and Instagram among countless other applications.</p><p>Its primary goal is to make it easy to reason about an interface and its state at any point in time, by dividing the UI into a collection of components.</p><h2>Why is React so popular?</h2><p>React has taken the frontend web development world by storm. Why?</p><h2>Less complex than the other alternatives</h2><p>At the time when React was announced, Ember.js and Angular 1.x were the predominant choices as a framework. Both these imposed so many conventions on the code that porting an existing app was not convenient at all.</p><p>React made a choice to be very easy to integrate into an existing project, because that\u2019s how they had to do it at Facebook in order to introduce it to the existing codebase. Also, those 2 frameworks brought too much to the table, while React only chose to implement the View layer instead of the full MVC stack.</p><h2>Perfect timing</h2><p>At the time, Angular 2.x was announced by Google, along with the backwards incompatibility and major changes it was going to bring. Moving from Angular 1 to 2 was like moving to a different framework, so this, along with execution speed improvements that React promised, made it something developers were eager to try.</p><h2>Backed by Facebook</h2><p>Being backed by Facebook is, of course, going to benefit a project if it turns out to be successful.</p><p>Facebook currently has a strong interest in React, sees the value of it being Open Source, and this is a huge plus for all the developers using it in their own projects.</p><h2>Is React simple to learn?</h2><p>Even though I said that React is simpler than alternative frameworks, diving into React is still complicated, but mostly because of the corollary technologies that can be integrated with React, like Redux and GraphQL.</p><p>React in itself has a very small API, and you basically need to understand 4 concepts to get started:</p><ul><li>Components</li><li>JSX</li><li>State</li><li>Props</li></ul><p>All these (and more) are explained in this handbook.</p><h2>How to install React on your development computer</h2><p>How do you install React?</p><p>React is a library, so saying install might sound a bit weird. Maybe setup is a better word, but you get the concept.</p><p>There are various ways to setup React so that it can be used on your app or site.</p><h2>Load React directly in the web page</h2><p>The simplest one is to add the React JavaScript file into the page directly. This is best when your React app will interact with the elements present on a single page, and not actually controls the whole navigation aspect.</p><p>In this case, you add 2 script tags to the end of the body tag:</p><p>Please change the version number to the latest version of React available.</p><p>Here we loaded both React and React DOM. Why 2 libraries? Because React is 100% independent from the browser and can be used outside it (for example on Mobile devices with React Native). Hence the need for React DOM, to add the wrappers for the browser.</p><p>After those tags you can load your JavaScript files that use React, or even inline JavaScript in a script tag:</p><p>To use JSX you need an extra step: load Babel</p><p>and load your scripts with the special text/babel MIME type:</p><p>Now you can add JSX in your app.js file:</p><p>Check out this simple Glitch example: https://glitch.com/edit/#!/react-example-inline-jsx?path=script.js</p><p>Starting in this way with script tags is good for building prototypes and enables a quick start without having to set up a complex workflow.</p><h1>How to use create-react-app</h1><p>create-react-app is a project aimed at getting you up to speed with React in no time, and any React app that needs to outgrow a single page will find that create-react-app meets that need.</p><p>You start by using npx, which is an easy way to download and execute Node.js commands without installing them. npx comes with npm (since version 5.2) and if you don't have npm installed already, do it now from https://nodejs.org (npm is installed with Node).</p><p>If you are unsure which version of npm you have, run npm -v to check if you need to update.</p><p>Tip: check out my OSX terminal tutorial if you\u2019re unfamiliar with using the terminal, applies to Linux as well \u2014 I\u2019m sorry but I don\u2019t have a tutorial for Windows at the moment, but Google is your friend.</p><p>When you run npx create-react-app <app-name>, npx is going to download the most recent create-react-app release, run it, and then remove it from your system. This is great because you will never have an outdated version on your system, and every time you run it, you're getting the latest and greatest code available.</p><p>Let\u2019s start then:</p><p>This is when it finished running:</p><p>create-react-app created a files structure in the folder you told (todolist in this case), and initialized a Git repository.</p><p>It also added a few commands in the package.json file, so you can immediately start the app by going into the folder and run npm start.</p><p>In addition to npm start, create-react-app added a few other commands:</p><ul><li>npm run build: to build the React application files in the build folder, ready to be deployed to a server</li><li>npm test: to run the testing suite using Jest</li><li>npm eject: to eject from create-react-app</li></ul><p>Ejecting is the act of deciding that create-react-app has done enough for you, but you want to do more than what it allows.</p><p>Since create-react-app is a set of common denominator conventions and a limited amount of options, it's probable that at some point your needs will demand something unique that outgrows the capabilities of create-react-app.</p><p>When you eject, you lose the ability of automatic updates but you gain more flexibility in the Babel and Webpack configuration.</p><p>When you eject the action is irreversible. You will get 2 new folders in your application directory, config and scripts. Those contain the configurations - and now you can start editing them.</p><p>If you already have a React app installed using an older version of React, first check the version by adding console.log(React.version) in your app, then you can update by running yarn add react@16.7, and yarn will prompt you to update (choose the latest version available). Repeat for yarn add react-dom@16.7 (change \"16.7\" with whatever is the newest version of React at the moment)</p><h2>CodeSandbox</h2><p>An easy way to have the create-react-app structure, without installing it, is to go to https://codesandbox.io/s and choose \"React\".</p><p>CodeSandbox is a great way to start a React project without having to install it locally.</p><h2>Codepen</h2><p>Another great solution is Codepen.</p><p>You can use this Codepen starter project which already comes pre-configured with React, with support for Hooks: https://codepen.io/flaviocopes/pen/VqeaxB</p><p>Codepen \u201cpens\u201d are great for quick projects with one JavaScript file, while \u201cprojects\u201d are great for projects with multiple files, like the ones we\u2019ll use the most when building React apps.</p><p>One thing to note is that in Codepen, due to how it works internally, you don\u2019t use the regular ES Modules import syntax, but rather to import for example useState, you use</p><p>and not</p><h1>SECTION 1: MODERN JAVASCRIPT CORE CONCEPTS YOU NEED TO KNOW TO USE REACT</h1><h2>Find out if you have to learn something before diving into learning React</h2><p>If you are willing to learn React, you first need to have a few things under your belt. There are some prerequisite technologies you have to be familiar with, in particular related to some of the more recent JavaScript features you\u2019ll use over and over in React.</p><p>Sometimes people think one particular feature is provided by React, but instead it\u2019s just modern JavaScript syntax.</p><p>There is no point in being an expert in those topics right away, but the more you dive into React, the more you\u2019ll need to master those.</p><p>I will mention a list of things to get you up to speed quickly.</p><h1>Variables</h1><p>A variable is a literal assigned to an identifier, so you can reference and use it later in the program.</p><p>Variables in JavaScript do not have any type attached. Once you assign a specific literal type to a variable, you can later reassign the variable to host any other type, without type errors or any issue.</p><p>This is why JavaScript is sometimes referred to as \u201cuntyped\u201d.</p><p>A variable must be declared before you can use it. There are 3 ways to do this, using var, let or const, and those 3 ways differ in how you can interact with the variable later on.</p><h2>Using var</h2><p>Until ES2015, var was the only construct available for defining variables.</p><p>If you forget to add var you will be assigning a value to an undeclared variable, and the results might vary.</p><p>In modern environments, with strict mode enabled, you will get an error. In older environments (or with strict mode disabled) this will simply initialize the variable and assign it to the global object.</p><p>If you don\u2019t initialize the variable when you declare it, it will have the undefined value until you assign a value to it.</p><p>You can redeclare the variable many times, overriding it:</p><p>You can also declare multiple variables at once in the same statement:</p><p>The scope is the portion of code where the variable is visible.</p><p>A variable initialized with var outside of any function is assigned to the global object, has a global scope and is visible everywhere. A variable initialized with var inside a function is assigned to that function, it's local and is visible only inside it, just like a function parameter.</p><p>Any variable defined in a function with the same name as a global variable takes precedence over the global variable, shadowing it.</p><p>It\u2019s important to understand that a block (identified by a pair of curly braces) does not define a new scope. A new scope is only created when a function is created, because var does not have block scope, but function scope.</p><p>Inside a function, any variable defined in it is visible throughout all the function code, even if the variable is declared at the end of the function it can still be referenced in the beginning, because JavaScript before executing the code actually moves all variables on top (something that is called hoisting). To avoid confusion, always declare variables at the beginning of a function.</p><h2>Using let</h2><p>let is a new feature introduced in ES2015 and it's essentially a block scoped version of var. Its scope is limited to the block, statement or expression where it's defined, and all the contained inner blocks.</p><p>Modern JavaScript developers might choose to only use let and completely discard the use of var.</p><p>If let seems an obscure term, just read let color = 'red' as let the color be red and it all makes much more sense</p><p>Defining let outside of any function - contrary to var - does not create a global variable.</p><h2>Using const</h2><p>Variables declared with var or let can be changed later on in the program, and reassigned. Once a const is initialized, its value can never be changed again, and it can't be reassigned to a different value.</p><p>We can\u2019t assign a different literal to the a const. We can however mutate a if it's an object that provides methods that mutate its contents.</p><p>const does not provide immutability, just makes sure that the reference can't be changed.</p><p>const has block scope, same as let.</p><p>Modern JavaScript developers might choose to always use const for variables that don't need to be reassigned later in the program.</p><p>Why? Because we should always use the simplest construct available to avoid making errors down the road.</p><h1>Arrow functions</h1><p>Arrow functions were introduced in ES6 / ECMAScript 2015, and since their introduction they changed forever how JavaScript code looks (and works).</p><p>In my opinion this change was so welcoming that you now rarely see the usage of the function keyword in modern codebases.</p><p>Visually, it\u2019s a simple and welcome change, which allows you to write functions with a shorter syntax, from:</p><p>to</p><p>If the function body contains just a single statement, you can omit the brackets and write all on a single line:</p><p>Parameters are passed in the parentheses:</p><p>If you have one (and just one) parameter, you could omit the parentheses completely:</p><p>Thanks to this short syntax, arrow functions encourage the use of small functions.</p><h1>Implicit return</h1><p>Arrow functions allow you to have an implicit return: values are returned without having to use the return keyword.</p><p>It works when there is a one-line statement in the function body:</p><p>Another example, when returning an object, remember to wrap the curly brackets in parentheses to avoid it being considered the wrapping function body brackets:</p><h1>How this works in arrow functions</h1><p>this is a concept that can be complicated to grasp, as it varies a lot depending on the context and also varies depending on the mode of JavaScript (strict mode or not).</p><p>It\u2019s important to clarify this concept because arrow functions behave very differently compared to regular functions.</p><p>When defined as a method of an object, in a regular function this refers to the object, so you can do:</p><p>calling car.fullName() will return \"Ford Fiesta\".</p><p>The this scope with arrow functions is inherited from the execution context. An arrow function does not bind this at all, so its value will be looked up in the call stack, so in this code car.fullName() will not work, and will return the string \"undefined undefined\":</p><p>Due to this, arrow functions are not suited as object methods.</p><p>Arrow functions cannot be used as constructors either, when instantiating an object will raise a TypeError.</p><p>This is where regular functions should be used instead, when dynamic context is not needed.</p><p>This is also a problem when handling events. DOM Event listeners set this to be the target element, and if you rely on this in an event handler, a regular function is necessary:</p><h1>Rest and spread</h1><p>You can expand an array, an object or a string using the spread operator ....</p><p>Let\u2019s start with an array example. Given</p><p>you can create a new array using</p><p>You can also create a copy of an array using</p><p>This works for objects as well. Clone an object with:</p><p>Using strings, the spread operator creates an array with each char in the string:</p><p>This operator has some pretty useful applications. The most important one is the ability to use an array as function argument in a very simple way:</p><p>(in the past you could do this using f.apply(null, a) but that's not as nice and readable)</p><p>The rest element is useful when working with array destructuring:</p><p>and spread elements:</p><p>ES2018 introduces rest properties, which are the same but for objects.</p><p>Rest properties:</p><p>Spread properties allow to create a new object by combining the properties of the object passed after the spread operator:</p><h1>Object and array destructuring</h1><p>Given an object, using the destructuring syntax you can extract just some values and put them into named variables:</p><p>name and age contain the desired values.</p><p>The syntax also works on arrays:</p><p>This statement creates 3 new variables by getting the items with index 0, 1, 4 from the array a:</p><h1>Template literals</h1><p>Template Literals are a new ES2015 / ES6 feature that allows you to work with strings in a novel way compared to ES5 and below.</p><p>The syntax at a first glance is very simple, just use backticks instead of single or double quotes:</p><p>They are unique because they provide a lot of features that normal strings built with quotes do not, in particular:</p><ul><li>they offer a great syntax to define multiline strings</li><li>they provide an easy way to interpolate variables and expressions in strings</li><li>they allow you to create DSLs with template tags (DSL means domain specific language, and it\u2019s for example used in React by Styled Components, to define CSS for a component)</li></ul><p>Let\u2019s dive into each of these in detail.</p><h2>Multiline strings</h2><p>Pre-ES6, to create a string spanning over two lines you had to use the \\ character at the end of a line:</p><p>This allows to create a string on 2 lines, but it\u2019s rendered on just one line:</p><p>first part second part</p><p>To render the string on multiple lines as well, you explicitly need to add \\n at the end of each line, like this:</p><p>or</p><p>Template literals make multiline strings much simpler.</p><p>Once a template literal is opened with the backtick, you just press enter to create a new line, with no special characters, and it\u2019s rendered as-is:</p><p>Keep in mind that space is meaningful, so doing this:</p><p>is going to create a string like this:</p><p>an easy way to fix this problem is by having an empty first line, and appending the trim() method right after the closing backtick, which will eliminate any space before the first character:</p><h2>Interpolation</h2><p>Template literals provide an easy way to interpolate variables and expressions into strings.</p><p>You do so by using the ${...} syntax:</p><p>inside the ${} you can add anything, even expressions:</p><h1>Classes</h1><p>In 2015 the ECMAScript 6 (ES6) standard introduced classes.</p><p>JavaScript has a quite uncommon way to implement inheritance: prototypical inheritance. Prototypal inheritance, while in my opinion great, is unlike most other popular programming language\u2019s implementation of inheritance, which is class-based.</p><p>People coming from Java or Python or other languages had a hard time understanding the intricacies of prototypal inheritance, so the ECMAScript committee decided to sprinkle syntactic sugar on top of prototypical inheritance so that it resembles how class-based inheritance works in other popular implementations.</p><p>This is important: JavaScript under the hood is still the same, and you can access an object prototype in the usual way.</p><h2>A class definition</h2><p>This is how a class looks.</p><p>A class has an identifier, which we can use to create new objects using new ClassIdentifier().</p><p>When the object is initialized, the constructor method is called, with any parameters passed.</p><p>A class also has as many methods as it needs. In this case hello is a method and can be called on all objects derived from this class:</p><h2>Class inheritance</h2><p>A class can extend another class, and objects initialized using that class inherit all the methods of both classes.</p><p>If the inherited class has a method with the same name as one of the classes higher in the hierarchy, the closest method takes precedence:</p><p>(the above program prints \u201cHello, I am Flavio. I am a programmer.\u201d)</p><p>Classes do not have explicit class variable declarations, but you must initialize any variable in the constructor.</p><p>Inside a class, you can reference the parent class calling super().</p><h2>Static methods</h2><p>Normally methods are defined on the instance, not on the class.</p><p>Static methods are executed on the class instead:</p><h2>Private methods</h2><p>JavaScript does not have a built-in way to define private or protected methods.</p><p>There are workarounds, but I won\u2019t describe them here.</p><h2>Getters and setters</h2><p>You can add methods prefixed with get or set to create a getter and setter, which are two different pieces of code that are executed based on what you are doing: accessing the variable, or modifying its value.</p><p>If you only have a getter, the property cannot be set, and any attempt at doing so will be ignored:</p><p>If you only have a setter, you can change the value but not access it from the outside:</p><h1>Callbacks</h1><p>Computers are asynchronous by design.</p><p>Asynchronous means that things can happen independently of the main program flow.</p><p>In the current consumer computers, every program runs for a specific time slot, and then it stops its execution to let another program continue its execution. This thing runs in a cycle so fast that\u2019s impossible to notice, and we think our computers run many programs simultaneously, but this is an illusion (except on multiprocessor machines).</p><p>Programs internally use interrupts, a signal that\u2019s emitted to the processor to gain the attention of the system.</p><p>I won\u2019t go into the internals of this, but just keep in mind that it\u2019s normal for programs to be asynchronous, and halt their execution until they need attention, and the computer can execute other things in the meantime. When a program is waiting for a response from the network, it cannot halt the processor until the request finishes.</p><p>Normally, programming languages are synchronous, and some provide a way to manage asynchronicity, in the language or through libraries. C, Java, C#, PHP, Go, Ruby, Swift, Python, they are all synchronous by default. Some of them handle async by using threads, spawning a new process.</p><p>JavaScript is synchronous by default and is single threaded. This means that code cannot create new threads and run in parallel.</p><p>Lines of code are executed in series, one after another, for example:</p><p>But JavaScript was born inside the browser, its main job, in the beginning, was to respond to user actions, like onClick, onMouseOver, onChange, onSubmit and so on. How could it do this with a synchronous programming model?</p><p>The answer was in its environment. The browser provides a way to do it by providing a set of APIs that can handle this kind of functionality.</p><p>More recently, Node.js introduced a non-blocking I/O environment to extend this concept to file access, network calls and so on.</p><p>You can\u2019t know when a user is going to click a button, so what you do is, you define an event handler for the click event. This event handler accepts a function, which will be called when the event is triggered:</p><p>This is the so-called callback.</p><p>A callback is a simple function that\u2019s passed as a value to another function, and will only be executed when the event happens. We can do this because JavaScript has first-class functions, which can be assigned to variables and passed around to other functions (called higher-order functions)</p><p>It\u2019s common to wrap all your client code in a load event listener on the windowobject, which runs the callback function only when the page is ready:</p><p>Callbacks are used everywhere, not just in DOM events.</p><p>One common example is by using timers:</p><p>XHR requests also accept a callback, in this example by assigning a function to a property that will be called when a particular event occurs (in this case, the state of the request changes):</p><h2>Handling errors in callbacks</h2><p>How do you handle errors with callbacks? One very common strategy is to use what Node.js adopted: the first parameter in any callback function is the error object: error-first callbacks</p><p>If there is no error, the object is null. If there is an error, it contains some description of the error and other information.</p><h2>The problem with callbacks</h2><p>Callbacks are great for simple cases!</p><p>However every callback adds a level of nesting, and when you have lots of callbacks, the code starts to be complicated very quickly:</p><p>This is just a simple 4-levels code, but I\u2019ve seen much more levels of nesting and it\u2019s not fun.</p><p>How do we solve this?</p><h1>ALTERNATIVES TO CALLBACKS</h1><p>Starting with ES6, JavaScript introduced several features that help us with asynchronous code that do not involve using callbacks:</p><ul><li>Promises (ES6)</li><li>Async/Await (ES8)</li></ul><h1>Promises</h1><p>Promises are one way to deal with asynchronous code, without writing too many callbacks in your code.</p><p>Although they\u2019ve been around for years, they were standardized and introduced in ES2015, and now they have been superseded in ES2017 by async functions.</p><p>Async functions use the promises API as their building block, so understanding them is fundamental even if in newer code you\u2019ll likely use async functions instead of promises.</p><h2>How promises work, in brief</h2><p>Once a promise has been called, it will start in pending state. This means that the caller function continues the execution, while it waits for the promise to do its own processing, and give the caller function some feedback.</p><p>At this point, the caller function waits for it to either return the promise in a resolved state, or in a rejected state, but as you know JavaScript is asynchronous, so the function continues its execution while the promise does it work.</p><h2>Which JS API use promises?</h2><p>In addition to your own code and library code, promises are used by standard modern Web APIs like Fetch or Service Workers.</p><p>It\u2019s unlikely that in modern JavaScript you\u2019ll find yourself not using promises, so let\u2019s start diving right into them.</p><h2>Creating a promise</h2><p>The Promise API exposes a Promise constructor, which you initialize using new Promise():</p><p>As you can see the promise checks the done global constant, and if that's true, we return a resolved promise, otherwise a rejected promise.</p><p>Using resolve and reject we can communicate back a value, in the above case we just return a string, but it could be an object as well.</p><h2>Consuming a promise</h2><p>In the last section, we introduced how a promise is created.</p><p>Now let\u2019s see how the promise can be consumed or used.</p><p>Running checkIfItsDone() will execute the isItDoneYet() promise and will wait for it to resolve, using the then callback, and if there is an error, it will handle it in the catch callback.</p><h2>Chaining promises</h2><p>A promise can be returned to another promise, creating a chain of promises.</p><p>A great example of chaining promises is given by the Fetch API, a layer on top of the XMLHttpRequest API, which we can use to get a resource and queue a chain of promises to execute when the resource is fetched.</p><p>The Fetch API is a promise-based mechanism, and calling fetch() is equivalent to defining our own promise using new Promise().</p><p>Example:</p><p>In this example, we call fetch() to get a list of TODO items from the todos.json file found in the domain root, and we create a chain of promises.</p><p>Running fetch() returns a response, which has many properties, and within those we reference:</p><ul><li>status, a numeric value representing the HTTP status code</li><li>statusText, a status message, which is OK if the request succeeded</li></ul><p>response also has a json() method, which returns a promise that will resolve with the content of the body processed and transformed into JSON.</p><p>So given those premises, this is what happens: the first promise in the chain is a function that we defined, called status(), that checks the response status and if it's not a success response (between 200 and 299), it rejects the promise.</p><p>This operation will cause the promise chain to skip all the chained promises listed and will skip directly to the catch() statement at the bottom, logging the Request failed text along with the error message.</p><p>If that succeeds instead, it calls the json() function we defined. Since the previous promise, when successful, returned the response object, we get it as an input to the second promise.</p><p>In this case, we return the data JSON processed, so the third promise receives the JSON directly:</p><p>and we simply log it to the console.</p><h2>Handling errors</h2><p>In the above example, in the previous section, we had a catch that was appended to the chain of promises.</p><p>When anything in the chain of promises fails and raises an error or rejects the promise, the control goes to the nearest catch() statement down the chain.</p><h2>Cascading errors</h2><p>If inside the catch() you raise an error, you can append a second catch() to handle it, and so on.</p><h2>Orchestrating promises with Promise.all()</h2><p>If you need to synchronize different promises, Promise.all() helps you define a list of promises, and execute something when they are all resolved.</p><p>Example:</p><p>The ES2015 destructuring assignment syntax allows you to also do</p><p>You are not limited to using fetch of course, any promise is good to go.</p><h2>Orchestrating promises with Promise.race()</h2><p>Promise.race() runs as soon as one of the promises you pass to it resolves, and it runs the attached callback just once with the result of the first promise resolved.</p><p>Example:</p><h1>Async/Await</h1><p>JavaScript evolved in a very short time from callbacks to promises (ES2015), and since ES2017 asynchronous JavaScript is even simpler with the async/await syntax.</p><p>Async functions are a combination of promises and generators, and basically, they are a higher level abstraction over promises. Let me repeat: async/await is built on promises.</p><h2>Why were async/await introduced?</h2><p>They reduce the boilerplate around promises, and the \u201cdon\u2019t break the chain\u201d limitation of chaining promises.</p><p>When Promises were introduced in ES2015, they were meant to solve a problem with asynchronous code, and they did, but over the 2 years that separated ES2015 and ES2017, it was clear that promises could not be the final solution.</p><p>Promises were introduced to solve the famous callback hell problem, but they introduced complexity on their own, and syntax complexity.</p><p>They were good primitives around which a better syntax could be exposed to developers, so when the time was right we got async functions.</p><p>They make the code look like it\u2019s synchronous, but it\u2019s asynchronous and non-blocking behind the scenes.</p><h2>How it works</h2><p>An async function returns a promise, like in this example:</p><p>When you want to call this function you prepend await, and the calling code will stop until the promise is resolved or rejected. One caveat: the client function must be defined as async. Here's an example:</p><h2>A quick example</h2><p>This is a simple example of async/await used to run a function asynchronously:</p><p>The above code will print the following to the browser console:</p><h2>Promise all the things</h2><p>Prepending the async keyword to any function means that the function will return a promise.</p><p>Even if it\u2019s not doing so explicitly, it will internally make it return a promise.</p><p>This is why this code is valid:</p><p>and it\u2019s the same as:</p><h2>The code is much simpler to read</h2><p>As you can see in the example above, our code looks very simple. Compare it to code using plain promises, with chaining and callback functions.</p><p>And this is a very simple example, the major benefits will arise when the code is much more complex.</p><p>For example here\u2019s how you would get a JSON resource, and parse it, using promises:</p><p>And here is the same functionality provided using await/async:</p><h2>Multiple async functions in series</h2><p>Async functions can be chained very easily, and the syntax is much more readable than with plain promises:</p><p>Will print:</p><h2>Easier debugging</h2><p>Debugging promises is hard because the debugger will not step over asynchronous code.</p><p>Async/await makes this very easy because to the compiler it\u2019s just like synchronous code.</p><h1>ES Modules</h1><p>ES Modules is the ECMAScript standard for working with modules.</p><p>While Node.js has been using the CommonJS standard for years, the browser never had a module system, as every major decision such as a module system must be first standardized by ECMAScript and then implemented by the browser.</p><p>This standardization process completed with ES6 and browsers started implementing this standard trying to keep everything well aligned, working all in the same way, and now ES Modules are supported in Chrome, Safari, Edge and Firefox (since version 60).</p><p>Modules are very cool, because they let you encapsulate all sorts of functionality, and expose this functionality to other JavaScript files, as libraries.</p><h2>The ES Modules Syntax</h2><p>The syntax to import a module is:</p><p>while CommonJS uses</p><p>A module is a JavaScript file that exports one or more values (objects, functions or variables), using the export keyword. For example, this module exports a function that returns a string uppercase:</p><p>uppercase.js</p><p>In this example, the module defines a single, default export, so it can be an anonymous function. Otherwise it would need a name to distinguish it from other exports.</p><p>Now, any other JavaScript module can import the functionality offered by uppercase.js by importing it.</p><p>An HTML page can add a module by using a <script> tag with the special type=\"module\" attribute:</p><p>Note: this module import behaves like a defer script load. See efficiently load JavaScript with defer and async</p><p>It\u2019s important to note that any script loaded with type=\"module\" is loaded in strict mode.</p><p>In this example, the uppercase.js module defines a default export, so when we import it, we can assign it a name we prefer:</p><p>and we can use it:</p><p>You can also use an absolute path for the module import, to reference modules defined on another domain:</p><p>This is also valid import syntax:</p><p>This is not:</p><p>It\u2019s either absolute, or has a ./ or / before the name.</p><h1>Other import/export options</h1><p>We saw this example above:</p><p>This creates one default export. In a file however you can export more than one thing, by using this syntax:</p><p>Another module can import all those exports using</p><p>You can import just a few of those exports, using the destructuring assignment:</p><p>You can rename any import, for convenience, using as:</p><p>You can import the default export, and any non-default export by name, like in this common React import:</p><p>You can see an ES Modules example here: https://glitch.com/edit/#!/flavio-es-modules-example?path=index.html</p><h2>CORS</h2><p>Modules are fetched using CORS. This means that if you reference scripts from other domains, they must have a valid CORS header that allows cross-site loading (like Access-Control-Allow-Origin: *)</p><h2>What about browsers that do not support modules?</h2><p>Use a combination of type=\"module\" and nomodule:</p><p>ES Modules are one of the biggest features introduced in modern browsers. They are part of ES6 but the road to implement them has been long.</p><p>We can now use them! But we must also remember that having more than a few modules is going to have a performance hit on our pages, as it\u2019s one more step that the browser must perform at runtime.</p><p>Webpack is probably going to still be a huge player even if ES Modules land in the browser, but having such a feature directly built in the language is huge for a unification of how modules work client-side and on Node.js as well.</p><h1>SECTION 2: REACT CONCEPTS</h1><h1>Single Page Applications</h1><p>React Applications are also called Single Page Applications. What does this mean?</p><p>In the past, when browsers were much less capable than today, and JavaScript performance was poor, every page was coming from a server. Every time you clicked something, a new request was made to the server and the browser subsequently loaded the new page.</p><p>Only very innovative products worked differently, and experimented with new approaches.</p><p>Today, popularized by modern frontend JavaScript frameworks like React, an app is usually built as a single page application: you only load the application code (HTML, CSS, JavaScript) once, and when you interact with the application, what generally happens is that JavaScript intercepts the browser events and instead of making a new request to the server that then returns a new document, the client requests some JSON or performs an action on the server but the page that the user sees is never completely wiped away, and behaves more like a desktop application.</p><p>Single page applications are built in JavaScript (or at least compiled to JavaScript) and work in the browser.</p><p>The technology is always the same, but the philosophy and some key components of how the application works are different.</p><h2>Examples of Single Page Applications</h2><p>Some notable examples:</p><ul><li>Gmail</li><li>Google Maps</li><li>Facebook</li><li>Twitter</li><li>Google Drive</li></ul><h2>Pros and cons of SPAs</h2><p>An SPA feels much faster to the user, because instead of waiting for the client-server communication to happen, and wait for the browser to re-render the page, you can now have instant feedback. This is the responsibility of the application maker, but you can have transitions and spinners and any kind of UX improvement that is certainly better than the traditional workflow.</p><p>In addition to making the experience faster to the user, the server will consume less resources because you can focus on providing an efficient API instead of building the layouts server-side.</p><p>This makes it ideal if you also build a mobile app on top of the API, as you can completely reuse your existing server-side code.</p><p>Single Page Applications are easy to transform into Progressive Web Apps, which in turn enables you to provide local caching and to support offline experiences for your services (or simply a better error message if your users need to be online).</p><p>SPAs are best used when there is no need for SEO (search engine optimization). For example for apps that work behind a login.</p><p>Search engines, while improving every day, still have trouble indexing sites built with an SPA approach rather than the traditional server-rendered pages. This is the case for blogs. If you are going to rely on search engines, don\u2019t even bother with creating a single page application without having a server rendered part as well.</p><p>When coding an SPA, you are going to write a great deal of JavaScript. Since the app can be long-running, you are going to need to pay a lot more attention to possible memory leaks \u2014 if in the past your page had a lifespan that was counted in minutes, now an SPA might stay open for hours at a time and if there is any memory issue that\u2019s going to increase the browser memory usage by a lot more and it\u2019s going to cause an unpleasantly slow experience if you don\u2019t take care of it.</p><p>SPAs are great when working in teams. Backend developers can just focus on the API, and frontend developers can focus on creating the best user experience, making use of the API built in the backend.</p><p>As a con, Single Page Apps rely heavily on JavaScript. This might make using an application running on low power devices a poor experience in terms of speed. Also, some of your visitors might just have JavaScript disabled, and you also need to consider accessibility for anything you build.</p><h2>Overriding the navigation</h2><p>Since you get rid of the default browser navigation, URLs must be managed manually.</p><p>This part of an application is called the router. Some frameworks already take care of them for you (like Ember), others require libraries that will do this job (like React Router).</p><p>What\u2019s the problem? In the beginning, this was an afterthought for developers building Single Page Applications. This caused the common \u201cbroken back button\u201d issue: when navigating inside the application the URL didn\u2019t change (since the browser default navigation was hijacked) and hitting the back button, a common operation that users do to go to the previous screen, might move to a website you visited a long time ago.</p><p>This problem can now be solved using the History API offered by browsers, but most of the time you\u2019ll use a library that internally uses that API, like React Router.</p><h1>Declarative</h1><p>What does it mean when you read that React is declarative? You\u2019ll run across articles describing React as a declarative approach to building UIs.</p><p>React made its \u201cdeclarative approach\u201d quite popular and upfront so it permeated the frontend world along with React.</p><p>It\u2019s really not a new concept, but React took building UIs a lot more declaratively than with HTML templates:</p><ul><li>you can build Web interfaces without even touching the DOM directly</li><li>you can have an event system without having to interact with the actual DOM Events.</li></ul><p>The opposite of declarative is imperative. A common example of an imperative approach is looking up elements in the DOM using jQuery or DOM events. You tell the browser exactly what to do, instead of telling it what you need.</p><p>The React declarative approach abstracts that for us. We just tell React we want a component to be rendered in a specific way, and we never have to interact with the DOM to reference it later.</p><h1>Immutability</h1><p>One concept you will likely meet when programming in React is immutability (and its opposite, mutability).</p><p>It\u2019s a controversial topic, but whatever you might think about the concept of immutability, React and most of its ecosystem kind of forces this, so you need to at least have a grasp of why it\u2019s so important and the implications of it.</p><p>In programming, a variable is immutable when its value cannot change after it\u2019s created.</p><p>You are already using immutable variables without knowing it when you manipulate a string. Strings are immutable by default, when you change them in reality you create a new string and assign it to the same variable name.</p><p>An immutable variable can never be changed. To update its value, you create a new variable.</p><p>The same applies to objects and arrays.</p><p>Instead of changing an array, to add a new item you create a new array by concatenating the old array, plus the new item.</p><p>An object is never updated, but copied before changing it.</p><p>This applies to React in many places.</p><p>For example, you should never mutate the state property of a component directly, but only through the setState() method.</p><p>In Redux, you never mutate the state directly, but only through reducers, which are functions.</p><p>The question is, why?</p><p>There are various reasons, the most important of which are:</p><ul><li>Mutations can be centralized, like in the case of Redux, which improves your debugging capabilities and reduces sources of errors.</li><li>Code looks cleaner and simpler to understand. You never expect a function to change some value without you knowing, which gives you predictability. When a function does not mutate objects but just returns a new object, it\u2019s called a pure function.</li><li>The library can optimize the code because for example JavaScript is faster when swapping an old object reference for an entirely new object, rather than mutating an existing object. This gives you performance.</li></ul><h1>Purity</h1><p>In JavaScript, when a function does not mutate objects but just returns a new object, it\u2019s called a pure function.</p><p>A function, or a method, in order to be called pure should not cause side effects and should return the same output when called multiple times with the same input.</p><p>A pure function takes an input and returns an output without changing the input nor anything else.</p><p>Its output is only determined by the arguments. You could call this function 1M times, and given the same set of arguments, the output will always be the same.</p><p>React applies this concept to components. A React component is a pure component when its output is only dependant on its props.</p><p>All functional components are pure components:</p><p>Class components can be pure if their output only depends on the props:</p><h1>Composition</h1><p>In programming, composition allows you to build more complex functionality by combining small and focused functions.</p><p>For example, think about using map() to create a new array from an initial set, and then filtering the result using filter():</p><p>In React, composition allows you to have some pretty cool advantages.</p><p>You create small and lean components and use them to compose more functionality on top of them. How?</p><h2>Create specialized version of a component</h2><p>Use an outer component to expand and specialize a more generic component:</p><h2>Pass methods as props</h2><p>A component can focus on tracking a click event, for example, and what actually happens when the click event happens is up to the container component:</p><h2>Using children</h2><p>The props.children property allows you to inject components inside other components.</p><p>The component needs to output props.children in its JSX:</p><p>and you embed more components into it in a transparent way:</p><h2>Higher order components</h2><p>When a component receives a component as a prop and returns a component, it\u2019s called higher order component.</p><p>We\u2019ll see them in a little while.</p><h1>The Virtual DOM</h1><p>Many existing frameworks, before React came on the scene, were directly manipulating the DOM on every change.</p><p>First, what is the DOM?</p><p>The DOM (Document Object Model) is a Tree representation of the page, starting from the <html> tag, going down into every child, which are called nodes.</p><p>It\u2019s kept in the browser memory, and directly linked to what you see in a page. The DOM has an API that you can use to traverse it, access every single node, filter them, modify them.</p><p>The API is the familiar syntax you have likely seen many times, if you were not using the abstract API provided by jQuery and friends:</p><p>React keeps a copy of the DOM representation, for what concerns the React rendering: the Virtual DOM</p><h2>The Virtual DOM Explained</h2><p>Every time the DOM changes, the browser has to do two intensive operations: repaint (visual or content changes to an element that do not affect the layout and positioning relative to other elements) and reflow (recalculate the layout of a portion of the page \u2014 or the whole page layout).</p><p>React uses a Virtual DOM to help the browser use less resources when changes need to be done on a page.</p><p>When you call setState() on a Component, specifying a state different than the previous one, React marks that Component as dirty. This is key: React only updates when a Component changes the state explicitly.</p><p>What happens next is:</p><ul><li>React updates the Virtual DOM relative to the components marked as dirty (with some additional checks, like triggering shouldComponentUpdate())</li><li>Runs the diffing algorithm to reconcile the changes</li><li>Updates the real DOM</li></ul><h2>Why is the Virtual DOM helpful: batching</h2><p>The key thing is that React batches much of the changes and performs a unique update to the real DOM, by changing all the elements that need to be changed at the same time, so the repaint and reflow the browser must perform to render the changes are executed just once.</p><h1>Unidirectional Data Flow</h1><p>Working with React you might encounter the term Unidirectional Data Flow. What does it mean? Unidirectional Data Flow is not a concept unique to React, but as a JavaScript developer this might be the first time you hear it.</p><p>In general this concept means that data has one, and only one, way to be transferred to other parts of the application.</p><p>In React this means that:</p><ul><li>state is passed to the view and to child components</li><li>actions are triggered by the view</li><li>actions can update the state</li><li>the state change is passed to the view and to child components</li></ul><p>The view is a result of the application state. State can only change when actions happen. When actions happen, the state is updated.</p><p>Thanks to one-way bindings, data cannot flow in the opposite way (as would happen with two-way bindings, for example), and this has some key advantages:</p><ul><li>it\u2019s less error prone, as you have more control over your data</li><li>it\u2019s easier to debug, as you know what is coming from where</li><li>it\u2019s more efficient, as the library already knows what the boundaries are of each part of the system</li></ul><p>A state is always owned by one Component. Any data that\u2019s affected by this state can only affect Components below it: its children.</p><p>Changing state on a Component will never affect its parent, or its siblings, or any other Component in the application: just its children.</p><p>This is the reason that the state is often moved up in the Component tree, so that it can be shared between components that need to access it.</p><h1>SECTION 3: IN-DEPTH REACT</h1><h1>JSX</h1><p>JSX is a technology that was introduced by React.</p><p>Although React can work completely fine without using JSX, it\u2019s an ideal technology to work with components, so React benefits a lot from JSX.</p><p>At first, you might think that using JSX is like mixing HTML and JavaScript (and as you\u2019ll see CSS).</p><p>But this is not true, because what you are really doing when using JSX syntax is writing a declarative syntax of what a component UI should be.</p><p>And you\u2019re describing that UI not using strings, but instead using JavaScript, which allows you to do many nice things.</p><h2>A JSX primer</h2><p>Here is how you define a h1 tag containing a string:</p><p>It looks like a strange mix of JavaScript and HTML, but in reality it\u2019s all JavaScript.</p><p>What looks like HTML, is actually syntactic sugar for defining components and their positioning inside the markup.</p><p>Inside a JSX expression, attributes can be inserted very easily:</p><p>You just need to pay attention when an attribute has a dash (-) which is converted to camelCase syntax instead, and these 2 special cases:</p><ul><li>class becomes className</li><li>for becomes htmlFor</li></ul><p>because they are reserved words in JavaScript.</p><p>Here\u2019s a JSX snippet that wraps two components into a div tag:</p><p>A tag always needs to be closed, because this is more XML than HTML (if you remember the XHTML days, this will be familiar, but since then the HTML5 loose syntax won). In this case a self-closing tag is used.</p><p>Notice how I wrapped the 2 components into a div. Why? Because the render() function can only return a single node, so in case you want to return 2 siblings, just add a parent. It can be any tag, not just div.</p><h2>Transpiling JSX</h2><p>A browser cannot execute JavaScript files containing JSX code. They must be first transformed to regular JS.</p><p>How? By doing a process called transpiling.</p><p>We already said that JSX is optional, because to every JSX line, a corresponding plain JavaScript alternative is available, and that\u2019s what JSX is transpiled to.</p><p>For example the following two constructs are equivalent:</p><p>Plain JS</p><p>JSX</p><p>This very basic example is just the starting point, but you can already see how more complicated the plain JS syntax is compared to using JSX.</p><p>At the time of writing the most popular way to perform the transpilation is to use Babel, which is the default option when running create-react-app, so if you use it you don't have to worry, everything happens under the hood for you.</p><p>If you don\u2019t use create-react-app you need to setup Babel yourself.</p><h2>JS in JSX</h2><p>JSX accepts any kind of JavaScript mixed into it.</p><p>Whenever you need to add some JS, just put it inside curly braces {}. For example here's how to use a constant value defined elsewhere:</p><p>This is a basic example. Curly braces accept any JS code:</p><p>As you can see we nested JavaScript inside JSX defined inside JavaScript nested in JSX. You can go as deep as you need.</p><h2>HTML in JSX</h2><p>JSX resembles HTML a lot, but it\u2019s actually XML syntax.</p><p>In the end you render HTML, so you need to know a few differences between how you would define some things in HTML, and how you define them in JSX.</p><h2>You need to close all tags</h2><p>Just like in XHTML, if you have ever used it, you need to close all tags: no more <br> but instead use the self-closing tag: <br /> (the same goes for other tags)</p><h2>camelCase is the new standard</h2><p>In HTML you\u2019ll find attributes without any case (e.g. onchange). In JSX, they are renamed to their camelCase equivalent:</p><ul><li>onchange => onChange</li><li>onclick => onClick</li><li>onsubmit => onSubmit</li></ul><h2>class becomes className</h2><p>Due to the fact that JSX is JavaScript, and class is a reserved word, you can't write</p><p>but you need to use</p><p>The same applies to for which is translated to htmlFor.</p><h2>CSS in React</h2><p>JSX provides a cool way to define CSS.</p><p>If you have a little experience with HTML inline styles, at first glance you\u2019ll find yourself pushed back 10 or 15 years, to a world where inline CSS was completely normal (nowadays it\u2019s demonized and usually just a \u201cquick fix\u201d go-to solution).</p><p>JSX style is not the same thing: first of all, instead of accepting a string containing CSS properties, the JSX style attribute only accepts an object. This means you define properties in an object:</p><p>or</p><p>The CSS values you write in JSX are slightly different from plain CSS:</p><ul><li>the keys property names are camelCased</li><li>values are just strings</li><li>you separate each tuple with a comma</li></ul><h2>Why is this preferred over plain CSS / SASS / LESS?</h2><p>CSS is an unsolved problem. Since its inception, dozens of tools around it rose and then fell. The main problem with JS is that there is no scoping and it\u2019s easy to write CSS that is not enforced in any way, thus a \u201cquick fix\u201d can impact elements that should not be touched.</p><p>JSX allows components (defined in React for example) to completely encapsulate their style.</p><h2>Is this the go-to solution?</h2><p>Inline styles in JSX are good until you need to</p><ol><li>write media queries</li><li>style animations</li><li>reference pseudo classes (e.g. :hover)</li><li>reference pseudo elements (e.g. ::first-letter)</li></ol><p>In short, they cover the basics, but it\u2019s not the final solution.</p><h2>Forms in JSX</h2><p>JSX adds some changes to how HTML forms work, with the goal of making things easier for the developer.</p><h2>value and defaultValue</h2><p>The value attribute always holds the current value of the field.</p><p>The defaultValue attribute holds the default value that was set when the field was created.</p><p>This helps solve some weird behavior of regular DOM interaction when inspecting input.value and input.getAttribute('value') returning one the current value and one the original default value.</p><p>This also applies to the textarea field, e.g.</p><p>but instead</p><p>For select fields, instead of using</p><p>use</p><h2>A more consistent onChange</h2><p>Passing a function to the onChange attribute you can subscribe to events on form fields.</p><p>It works consistently across fields, even radio, select and checkbox input fields fire a onChange event.</p><p>onChange also fires when typing a character into an input or textarea field.</p><h2>JSX auto escapes</h2><p>To mitigate the ever present risk of XSS exploits, JSX forces automatic escaping in expressions.</p><p>This means that you might run into issues when using an HTML entity in a string expression.</p><p>You expect the following to print \u00a9 2017:</p><p>But it\u2019s not, it\u2019s printing &copy; 2017 because the string is escaped.</p><p>To fix this you can either move the entities outside the expression:</p><p>or by using a constant that prints the Unicode representation corresponding to the HTML entity you need to print:</p><h2>White space in JSX</h2><p>To add white space in JSX there are 2 rules:</p><p>Rule 1: Horizontal white space is trimmed to 1</p><p>If you have white space between elements in the same line, it\u2019s all trimmed to 1 white space.</p><p>becomes</p><p>Rule 2: Vertical white space is eliminated</p><p>becomes</p><p>To fix this problem you need to explicitly add white space, by adding a space expression like this:</p><p>or by embedding the string in a space expression:</p><h2>Adding comments in JSX</h2><p>You can add comments to JSX by using the normal JavaScript comments inside an expression:</p><h2>Spread attributes</h2><p>In JSX a common operation is assigning values to attributes.</p><p>Instead of doing it manually, e.g.</p><p>you can pass</p><p>and the properties of the data object will be used as attributes automatically, thanks to the ES6 spread operator.</p><h2>How to loop in JSX</h2><p>If you have a set of elements you need to loop upon to generate a JSX partial, you can create a loop, and then add JSX to an array:</p><p>Now when rendering the JSX you can embed the items array simply by wrapping it in curly braces:</p><p>You can do the same directly in the JSX, using map instead of a for-of loop:</p><h1>Components</h1><p>A component is one isolated piece of interface. For example in a typical blog homepage you might find the Sidebar component, and the Blog Posts List component. They are in turn composed of components themselves, so you could have a list of Blog post components, each for every blog post, and each with its own peculiar properties.</p><p>React makes it very simple: everything is a component.</p><p>Even plain HTML tags are component on their own, and they are added by default.</p><p>The next 2 lines are equivalent, they do the same thing. One with JSX, one without, by injecting <h1>Hello World!</h1> into an element with id app.</p><p>See, React.DOM exposed us an h1 component. Which other HTML tags are available? All of them! You can inspect what React.DOM offers by typing it in the Browser Console:</p><p>(the list is longer)</p><p>The built-in components are nice, but you\u2019ll quickly outgrow them. What React excels in is letting us compose a UI by composing custom components.</p><h2>Custom components</h2><p>There are 2 ways to define a component in React.</p><p>A function component:</p><p>A class component:</p><p>Up until recently, class components were the only way to define a component that had its own state, and could access the lifecycle methods so you could do things when the component was first rendered, updated or removed.</p><p>React Hooks changed this, so our function components are now much more powerful than ever and I believe we\u2019ll see fewer and fewer class components in the future, although it will still be perfectly valid way to create components.</p><p>There is also a third syntax which uses the ES5 syntax, without the classes:</p><p>You\u2019ll rarely see this in modern, > ES6 codebases.</p><h1>State</h1><h2>Setting the default state of a component</h2><p>In the Component constructor, initialize this.state. For example the BlogPostExcerpt component might have a clicked state:</p><h2>Accessing the state</h2><p>The clicked state can be accessed by referencing this.state.clicked:</p><h2>Mutating the state</h2><p>A state should never be mutated by using</p><p>Instead, you should always use setState() instead, passing it an object:</p><p>The object can contain a subset, or a superset, of the state. Only the properties you pass will be mutated, the ones omitted will be left in their current state.</p><h2>Why you should always use setState()</h2><p>The reason is that using this method, React knows that the state has changed. It will then start the series of events that will lead to the Component being re-rendered, along with any DOM update.</p><h2>Unidirectional Data Flow</h2><p>A state is always owned by one Component. Any data that\u2019s affected by this state can only affect Components below it: its children.</p><p>Changing the state on a Component will never affect its parent, or its siblings, or any other Component in the application: just its children.</p><p>This is the reason the state is often moved up in the Component tree.</p><h2>Moving the State Up in the Tree</h2><p>Because of the Unidirectional Data Flow rule, if two components need to share state, the state needs to be moved up to a common ancestor.</p><p>Many times the closest ancestor is the best place to manage the state, but it\u2019s not a mandatory rule.</p><p>The state is passed down to the components that need that value via props:</p><p>The state can be mutated by a child component by passing a mutating function down as a prop:</p><h1>Props</h1><p>Props is how Components get their properties. Starting from the top component, every child component gets its props from the parent. In a function component, props is all it gets passed, and they are available by adding props as the function argument:</p><p>In a class component, props are passed by default. There is no need to add anything special, and they are accessible as this.props in a Component instance.</p><p>Passing props down to child components is a great way to pass values around in your application. A component either holds data (has state) or receives data through its props.</p><p>It gets complicated when:</p><ul><li>you need to access the state of a component from a child that\u2019s several levels down (all the previous children need to act as a pass-through, even if they do not need to know the state, complicating things)</li><li>you need to access the state of a component from a completely unrelated component.</li></ul><h2>Default values for props</h2><p>If any value is not required we need to specify a default value for it if it\u2019s missing when the Component is initialized.</p><p>Some tooling like ESLint have the ability to enforce defining the defaultProps for a Component with some propTypes not explicitly required.</p><h2>How props are passed</h2><p>When initializing a component, pass the props in a way similar to HTML attributes:</p><p>We passed the title as a plain string (something we can only do with strings!), and description as a variable.</p><h2>Children</h2><p>A special prop is children. That contains the value of anything that is passed in the body of the component, for example:</p><p>In this case, inside BlogPostExcerpt we could access \"Something\" by looking up this.props.children.</p><p>While Props allow a Component to receive properties from its parent, to be \u201cinstructed\u201d to print some data for example, state allows a component to take on life itself, and be independent of the surrounding environment.</p><h1>Presentational vs container components</h1><p>In React, components are often divided into 2 big buckets: presentational components and container components.</p><p>Each of those have their unique characteristics.</p><p>Presentational components are mostly concerned with generating some markup to be outputted.</p><p>They don\u2019t manage any kind of state, except for state related the the presentation</p><p>Container components are mostly concerned with the \u201cbackend\u201d operations.</p><p>They might handle the state of various sub-components. They might wrap several presentational components. They might interface with Redux.</p><p>As a way to simplify the distinction, we can say presentational components are concerned with the look, container components are concerned with making things work.</p><p>For example, this is a presentational component. It gets data from its props, and just focuses on showing an element:</p><p>On the other hand this is a container component. It manages and stores its own data, and uses the presentational component to display it.</p><h1>State vs props</h1><p>In a React component, props are variables passed to it by its parent component. State on the other hand is still variables, but directly initialized and managed by the component.</p><p>The state can be initialized by props.</p><p>For example, a parent component might include a child component by calling</p><p>The parent can pass a prop by using this syntax:</p><p>Inside the ChildComponent constructor we could access the prop:</p><p>and any other method in this class can reference the props using this.props.</p><p>Props can be used to set the internal state based on a prop value in the constructor, like this:</p><p>Of course a component can also initialize the state without looking at props.</p><p>In this case there\u2019s nothing useful going on, but imagine doing something different based on the prop value, probably setting a state value is best.</p><p>Props should never be changed in a child component, so if there\u2019s something going on that alters some variable, that variable should belong to the component state.</p><p>Props are also used to allow child components to access methods defined in the parent component. This is a good way to centralize managing the state in the parent component, and avoid children having the need to have their own state.</p><p>Most of your components will just display some kind of information based on the props they received, and stay stateless.</p><h1>PropTypes</h1><p>Since JavaScript is a dynamically typed language, we don\u2019t really have a way to enforce the type of a variable at compile time, and if we pass invalid types, they will fail at runtime or give weird results if the types are compatible but not what we expect.</p><p>Flow and TypeScript help a lot, but React has a way to directly help with props types, and even before running the code, our tools (editors, linters) can detect when we are passing the wrong values:</p><h2>Which types can we use</h2><p>These are the fundamental types we can accept:</p><ul><li>PropTypes.array</li><li>PropTypes.bool</li><li>PropTypes.func</li><li>PropTypes.number</li><li>PropTypes.object</li><li>PropTypes.string</li><li>PropTypes.symbol</li></ul><p>We can accept one of two types:</p><p>We can accept one of many values:</p><p>We can accept an instance of a class:</p><p>We can accept any React node:</p><p>or even any type at all:</p><p>Arrays have a special syntax that we can use to accept an array of a particular type:</p><p>We can compose object properties by using</p><h2>Requiring properties</h2><p>Appending isRequired to any PropTypes option will cause React to return an error if that property is missing:</p><h1>React Fragment</h1><p>Notice how I wrap return values in a div. This is because a component can only return one single element, and if you want more than one, you need to wrap it with another container tag.</p><p>This, however, causes an unnecessary div in the output. You can avoid this by using React.Fragment:</p><p>which also has a very nice shorthand syntax <></> that is supported only in recent releases (and Babel 7+):</p><h1>Events</h1><p>React provides an easy way to manage events. Prepare to say goodbye to addEventListener.</p><p>In the previous article about the State you saw this example:</p><p>If you\u2019ve been using JavaScript for a while, this is just like plain old JavaScript event handlers, except that this time you\u2019re defining everything in JavaScript, not in your HTML, and you\u2019re passing a function, not a string.</p><p>The actual event names are a little bit different because in React you use camelCase for everything, so onclick becomes onClick, onsubmit becomes onSubmit.</p><p>For reference, this is old school HTML with JavaScript events mixed in:</p><h2>Event handlers</h2><p>It\u2019s a convention to have event handlers defined as methods on the Component class:</p><p>All handlers receive an event object that adheres, cross-browser, to the W3C UI Events spec.</p><h2>Bind this in methods</h2><p>If you use class components, don\u2019t forget to bind methods. The methods of ES6 classes by default are not bound. What this means is that this is not defined unless you define methods as arrow functions:</p><p>when using the the property initializer syntax with Babel (enabled by default in create-react-app), otherwise you need to bind it manually in the constructor:</p><h1>The events reference</h1><p>There are lots of events supported, here\u2019s a summary list.</p><h2>Clipboard</h2><ul><li>onCopy</li><li>onCut</li><li>onPaste</li></ul><h2>Composition</h2><ul><li>onCompositionEnd</li><li>onCompositionStart</li><li>onCompositionUpdate</li></ul><h2>Keyboard</h2><ul><li>onKeyDown</li><li>onKeyPress</li><li>onKeyUp</li></ul><h2>Focus</h2><ul><li>onFocus</li><li>onBlur</li></ul><h2>Form</h2><ul><li>onChange</li><li>onInput</li><li>onSubmit</li></ul><h2>Mouse</h2><ul><li>onClick</li><li>onContextMenu</li><li>onDoubleClick</li><li>onDrag</li><li>onDragEnd</li><li>onDragEnter</li><li>onDragExit</li><li>onDragLeave</li><li>onDragOver</li><li>onDragStart</li><li>onDrop</li><li>onMouseDown</li><li>onMouseEnter</li><li>onMouseLeave</li><li>onMouseMove</li><li>onMouseOut</li><li>onMouseOver</li><li>onMouseUp</li></ul><h2>Selection</h2><ul><li>onSelect</li></ul><h2>Touch</h2><ul><li>onTouchCancel</li><li>onTouchEnd</li><li>onTouchMove</li><li>onTouchStart</li></ul><h2>UI</h2><ul><li>onScroll</li></ul><h2>Mouse Wheel</h2><ul><li>onWheel</li></ul><h2>Media</h2><ul><li>onAbort</li><li>onCanPlay</li><li>onCanPlayThrough</li><li>onDurationChange</li><li>onEmptied</li><li>onEncrypted</li><li>onEnded</li><li>onError</li><li>onLoadedData</li><li>onLoadedMetadata</li><li>onLoadStart</li><li>onPause</li><li>onPlay</li><li>onPlaying</li><li>onProgress</li><li>onRateChange</li><li>onSeeked</li><li>onSeeking</li><li>onStalled</li><li>onSuspend</li><li>onTimeUpdate</li><li>onVolumeChange</li><li>onWaiting</li></ul><h2>Image</h2><ul><li>onLoad</li><li>onError</li></ul><h2>Animation</h2><ul><li>onAnimationStart</li><li>onAnimationEnd</li><li>onAnimationIteration</li></ul><h2>Transition</h2><ul><li>onTransitionEnd</li></ul><h1>Lifecycle Events</h1><p>React class components can have hooks for several lifecycle events.</p><p>Hooks allow function components to access them too, in a different way.</p><p>During the lifetime of a component, there\u2019s a series of events that gets called, and to each event you can hook and provide custom functionality.</p><p>What hook is best for what functionality is something we\u2019re going to see here.</p><p>First, there are 3 phases in a React component lifecycle:</p><ul><li>Mounting</li><li>Updating</li><li>Unmounting</li></ul><p>Let\u2019s see those 3 phases in detail and the methods that get called for each.</p><h2>Mounting</h2><p>When mounting you have 4 lifecycle methods before the component is mounted in the DOM: the constructor, getDerivedStateFromProps, render and componentDidMount.</p><h2>Constructor</h2><p>The constructor is the first method that is called when mounting a component.</p><p>You usually use the constructor to set up the initial state using this.state = ....</p><h2>getDerivedStateFromProps()</h2><p>When the state depends on props, getDerivedStateFromProps can be used to update the state based on the props value.</p><p>It was added in React 16.3, aiming to replace the componentWillReceiveProps deprecated method.</p><p>In this method you haven\u2019t access to this as it's a static method.</p><p>It\u2019s a pure method, so it should not cause side effects and should return the same output when called multiple times with the same input.</p><p>Returns an object with the updated elements of the state (or null if the state does not change)</p><h2>render()</h2><p>From the render() method you return the JSX that builds the component interface.</p><p>It\u2019s a pure method, so it should not cause side effects and should return the same output when called multiple times with the same input.</p><h2>componentDidMount()</h2><p>This method is the one that you will use to perform API calls, or process operations on the DOM.</p><h2>Updating</h2><p>When updating you have 5 lifecycle methods before the component is mounted in the DOM: the getDerivedStateFromProps, shouldComponentUpdate, render, getSnapshotBeforeUpdate and componentDidUpdate.</p><h2>getDerivedStateFromProps()</h2><p>See the above description for this method.</p><h2>shouldComponentUpdate()</h2><p>This method returns a boolean, true or false. You use this method to tell React if it should go on with the rerendering, and defaults to true. You will return false when rerendering is expensive and you want to have more control on when this happens.</p><h2>render()</h2><p>See the above description for this method.</p><h2>getSnapshotBeforeUpdate()</h2><p>In this method you have access to the props and state of the previous render, and of the current render.</p><p>Its use cases are very niche, and it\u2019s probably the one that you will use less.</p><h2>componentDidUpdate()</h2><p>This method is called when the component has been updated in the DOM. Use this to run any 3rd party DOM API or call APIs that must be updated when the DOM changes.</p><p>It corresponds to the componentDidMount() method from the mounting phase.</p><h2>Unmounting</h2><p>In this phase we only have one method, componentWillUnmount.</p><h2>componentWillUnmount()</h2><p>The method is called when the component is removed from the DOM. Use this to do any sort of cleanup you need to perform.</p><h2>Legacy</h2><p>If you are working on an app that uses componentWillMount, componentWillReceiveProps or componentWillUpdate, those were deprecated in React 16.3 and you should migrate to other lifecycle methods.</p><h1>Forms in React</h1><p>Forms are one of the few HTML elements that are interactive by default.</p><p>They were designed to allow the user to interact with a page.</p><p>Common uses of forms?</p><ul><li>Search</li><li>Contact forms</li><li>Shopping carts checkout</li><li>Login and registration</li><li>and more!</li></ul><p>Using React we can make our forms much more interactive and less static.</p><p>There are two main ways of handling forms in React, which differ on a fundamental level: how data is managed.</p><ul><li>if the data is handled by the DOM, we call them uncontrolled components</li><li>if the data is handled by the components we call them controlled components</li></ul><p>As you can imagine, controlled components is what you will use most of the time. The component state is the single source of truth, rather than the DOM. Some form fields are inherently uncontrolled because of their behavior, like the <input type=\"file\"> field.</p><p>When an element state changes in a form field managed by a component, we track it using the onChange attribute.</p><p>In order to set the new state, we must bind this to the handleChange method, otherwise this is not accessible from within that method:</p><p>Similarly, we use the onSubmit attribute on the form to call the handleSubmit method when the form is submitted:</p><p>Validation in a form can be handled in the handleChange method: you have access to the old value of the state, and the new one. You can check the new value and if not valid reject the updated value (and communicate it in some way to the user).</p><p>HTML Forms are inconsistent. They have a long history, and it shows. React however makes things more consistent for us, and you can get (and update) fields using its value attribute.</p><p>Here\u2019s a textarea, for example:</p><p>The same goes for the select tag:</p><p>Previously we mentioned the <input type=\"file\"> field. That works a bit differently.</p><p>In this case you need to get a reference to the field by assigning the ref attribute to a property defined in the constructor with React.createRef(), and use that to get the value of it in the submit handler:</p><p>This is the uncontrolled components way. The state is stored in the DOM rather than in the component state (notice we used this.curriculum to access the uploaded file, and have not touched the state.</p><p>I know what you\u2019re thinking \u2014 beyond those basics, there must be a library that simplifies all this form handling stuff and automates validation, error handling and more, right? There is a great one, Formik.</p><h1>Reference a DOM element</h1><p>React is great at abstracting away the DOM from you when building apps.</p><p>But what if you want to access the DOM element that a React component represents?</p><p>Maybe you have to add a library that interacts directly with the DOM like a chart library, maybe you need to call some DOM API, or add focus on an element.</p><p>Whatever the reason is, a good practice is making sure there\u2019s no other way of doing so without accessing the DOM directly.</p><p>In the JSX of your component, you can assign the reference of the DOM element to a component property using this attribute:</p><p>Put this into context, for example with a button element:</p><p>button refers to a property of the component, which can then be used by the component's lifecycle methods (or other methods) to interact with the DOM:</p><p>In a function component the mechanism is the same, you just avoid using this (since it does not point to the component instance) and use a property instead:</p><h1>Server side rendering</h1><p>Server Side Rendering, also called SSR, is the ability of a JavaScript application to render on the server rather than in the browser.</p><p>Why would we ever want to do so?</p><ul><li>it allows your site to have a faster first page load time, which is the key to a good user experience</li><li>it is essential for SEO: search engines cannot (yet?) efficiently and correctly index applications that exclusively render client-side. Despite the latest improvements to indexing in Google, there are other search engines too, and Google is not perfect at it in any case. Also, Google favors sites with fast load times, and having to load client-side is not good for speed</li><li>it\u2019s great when people share a page of your site on social media, as they can easily gather the metadata needed to nicely share the link (images, title, description..)</li></ul><p>Without Server Side Rendering, all your server ships is an HTML page with no body, just some script tags that are then used by the browser to render the application.</p><p>Client-rendered apps are great at any subsequent user interaction after the first page load. Server Side Rendering allows us to get the sweet spot in the middle of client-rendered apps and backend-rendered apps: the page is generated server-side, but all interactions with the page once it\u2019s been loaded are handled client-side.</p><p>However Server Side Rendering has its drawback too:</p><ul><li>it\u2019s fair to say that a simple SSR proof of concept is simple, but the complexity of SSR can grow with the complexity of your application</li><li>rendering a big application server-side can be quite resource-intensive, and under heavy load it could even provide a slower experience than client-side rendering, since you have a single bottleneck</li></ul><h1>A very simplistic example of what it takes to Server-Side render a React app</h1><p>SSR setups can grow very, very complex and most tutorials will bake in Redux, React Router and many other concepts from the start.</p><p>To understand how SSR works, let\u2019s start from the basics to implement a proof of concept.</p><p>Feel free to skip this paragraph if you just want to look into the libraries that provide SSR and not bother with the ground work</p><p>To implement basic SSR we\u2019re going to use Express.</p><p>If you are new to Express, or need some catch-up, check out my free Express Handbook here: https://flaviocopes.com/page/ebooks/.</p><p>Warning: the complexity of SSR can grow with the complexity of your application. This is the bare minimum setup to render a basic React app. For more complex needs you might need to do a bit more work or also check out SSR libraries for React.</p><p>I assume you started a React app with create-react-app. If you are just trying, install one now using npx create-react-app ssr.</p><p>Go to the main app folder with the terminal, then run:</p><p>You have a set of folders in your app directory. Create a new folder called server, then go into it and create a file named server.js.</p><p>Following the create-react-app conventions, the app lives in the src/App.js file. We're going to load that component, and render it to a string using ReactDOMServer.renderToString(), which is provided by react-dom.</p><p>You get the contents of the ./build/index.html file, and replace the <div id=\"root\"></div>placeholder, which is the tag where the application hooks by default, with `<div id=\"root\">\\${ReactDOMServer.renderToString(<App />)}</div>.</p><p>All the content inside the build folder is going to be served as-is, statically by Express.</p><p>Now, in the client application, in your src/index.js, instead of calling ReactDOM.render():</p><p>call ReactDOM.hydrate(), which is the same but has the additional ability to attach event listeners to existing markup once React loads:</p><p>All the Node.js code needs to be transpiled by Babel, as server-side Node.js code does not know anything about JSX, nor ES Modules (which we use for the include statements).</p><p>Install these 3 packages:</p><p>ignore-styles is a Babel utility that will tell it to ignore CSS files imported using the import syntax.</p><p>Let\u2019s create an entry point in server/index.js:</p><p>Build the React application, so that the build/ folder is populated:</p><p>and let\u2019s run this:</p><p>I said this is a simplistic approach, and it is:</p><ul><li>it does not handle rendering images correctly when using imports, which need Webpack in order to work (and which complicates the process a lot)</li><li>it does not handle page header metadata, which is essential for SEO and social sharing purposes (among other things)</li></ul><p>So while this is a good example of using ReactDOMServer.renderToString() and ReactDOM.hydrate to get this basic server-side rendering, it's not enough for real world usage.</p><h2>Server Side Rendering using libraries</h2><p>SSR is hard to do right, and React has no de-facto way to implement it.</p><p>It\u2019s still very much debatable if it\u2019s worth the trouble, complication and overhead to get the benefits, rather than using a different technology to serve those pages. This discussion on Reddit has lots of opinions in that regard.</p><p>When Server Side Rendering is an important matter, my suggestion is to rely on pre-made libraries and tools that have had this goal in mind since the beginning.</p><p>In particular, I suggest Next.js and Gatsby, two projects we\u2019ll see later on.</p><h1>The Context API</h1><p>The Context API is a neat way to pass state across the app without having to use props. It was introduced to allow you to pass state (and enable the state to update) across the app, without having to use props for it.</p><p>The React team suggests to stick to props if you have just a few levels of children to pass, because it\u2019s still a much less complicated API than the Context API.</p><p>In many cases, it enables us to avoid using Redux, simplifying our apps a lot, and also learning how to use React.</p><p>How does it work?</p><p>You create a context using React.createContext(), which returns a Context object:</p><p>Then you create a wrapper component that returns a Provider component, and you add as children all the components from which you want to access the context:</p><p>I used Container as the name of this component because this will be a global provider. You can also create smaller contexts.</p><p>Inside a component that\u2019s wrapped in a Provider, you use a Consumer component to make use of the context:</p><p>You can also pass functions into a Provider value, and those functions will be used by the Consumer to update the context state:</p><p>You can see this in action in this Glitch.</p><p>You can create multiple contexts, to make your state distributed across components, yet expose it and make it reachable by any component you want.</p><p>When using multiple files, you create the content in one file, and import it in all the places you use it:</p><h1>Higher order components</h1><p>You might be familiar with Higher Order Functions in JavaScript. Those are functions that accept functions as arguments, and/or return functions.</p><p>Two examples of those functions are Array.map() or Array.filter().</p><p>In React, we extend this concept to components, and so we have a Higher Order Component (HOC)when the component accepts a component as input and returns a component as its output.</p><p>In general, higher order components allow you to create code that\u2019s composable and reusable, and also more encapsulated.</p><p>We can use a HOC to add methods or properties to the state of a component, or a Redux store for example.</p><p>You might want to use Higher Order Components when you want to enhance an existing component, operate on the state or props, or its rendered markup.</p><p>There is a convention of prepending a Higher Order Component with the with string (it's a convention, so it's not mandatory), so if you have a Button component, its HOC counterpart should be called withButton.</p><p>Let\u2019s create one.</p><p>The simplest example ever of a HOC is one that simply returns the component unaltered:</p><p>Let\u2019s make this a little bit more useful and add a property to that button, in addition to all the props it already came with, the color:</p><p>We use this HOC in a component JSX:</p><p>and we can finally render the ColoredButton component in our app JSX:</p><p>This is a very simple example but hopefully you can get the gist of HOCs before applying those concepts to more complex scenarios.</p><h1>Render Props</h1><p>A common pattern used to share state between components is to use the children prop.</p><p>Inside a component JSX you can render {this.props.children} which automatically injects any JSX passed in the parent component as a children:</p><p>However, there is a problem here: the state of the parent component cannot be accessed from the children.</p><p>To be able to share the state, you need to use a render prop component, and instead of passing components as children of the parent component, you pass a function which you then execute in {this.props.children()}. The function can accept arguments:</p><p>Instead of using the children prop, which has a very specific meaning, you can use any prop, and so you can use this pattern multiple times on the same component:</p><h1>Hooks</h1><p>Hooks is a feature that will be introduced in React 16.7, and is going to change how we write React apps in the future.</p><p>Before Hooks appeared, some key things in components were only possible using class components: having their own state, and using lifecycle events. Function components, lighter and more flexible, were limited in functionality.</p><p>Hooks allow function components to have state and to respond to lifecycle events too, and kind of make class components obsolete. They also allow function components to have a good way to handle events.</p><h2>Access state</h2><p>Using the useState() API, you can create a new state variable, and have a way to alter it. useState() accepts the initial value of the state item and returns an array containing the state variable, and the function you call to alter the state. Since it returns an array we use array destructuring to access each individual item, like this: const [count, setCount] = useState(0)</p><p>Here\u2019s a practical example:</p><p>You can add as many useState() calls you want, to create as many state variables as you want. Just make sure you call it in the top level of a component (not in an if or in any other block).</p><p>Example on Codepen</p><h2>Access lifecycle hooks</h2><p>Another very important feature of Hooks is allowing function components to have access to the lifecycle hooks.</p><p>Using class components you can register a function on the componentDidMount, componentWillUnmount and componentDidUpdate events, and those will serve many use cases, from variables initialization to API calls to cleanup.</p><p>Hooks provide the useEffect() API. The call accepts a function as argument.</p><p>The function runs when the component is first rendered, and on every subsequent re-render/update. React first updates the DOM, then calls any function passed to useEffect(). All without blocking the UI rendering even on blocking code, unlike the old componentDidMount and componentDidUpdate, which makes our apps feel faster.</p><p>Example:</p><p>The same componentWillUnmount job can be achieved by optionally returning a function from our useEffect() parameter:</p><p>useEffect() can be called multiple times, which is nice to separate unrelated logic (something that plagues the class component lifecycle events).</p><p>Since the useEffect() functions are run on every subsequent re-render/update, we can tell React to skip a run, for performance purposes, by adding a second parameter which is an array that contains a list of state variables to watch for. React will only re-run the side effect if one of the items in this array changes.</p><p>Similarly you can tell React to only execute the side effect once (at mount time), by passing an empty array:</p><p>useEffect() is great for adding logs, accessing 3rd party APIs and much more.</p><p>Example on Codepen</p><h2>Handle events in function components</h2><p>Before hooks, you either used class components, or you passed an event handler using props.</p><p>Now we can use the useCallback() built-in API:</p><p>Any parameter used inside the function must be passed through a second parameter to useCallback(), in an array:</p><h2>Enable cross-component communication using custom hooks</h2><p>The ability to write your own hooks is the feature that is going to significantly alter how you write React apps in the future.</p><p>Using custom hooks you have one more way to share state and logic between components, adding a significant improvement to the patterns of render props and higher order components. Which are still great, but now with custom hooks have less relevance in many use cases.</p><p>How do you create a custom hook?</p><p>A hook is just a function that conventionally starts with use. It can accept an arbitrary number of arguments, and return anything it wants.</p><p>Examples:</p><p>or</p><p>In your own components, you can use the hook like this:</p><p>When exactly to add hooks instead of regular functions should be determined on a use case basis, and only experience will tell.</p><h1>Code splitting</h1><p>Modern JavaScript applications can be quite huge in terms of bundle size. You don\u2019t want your users to have to download a 1MB package of JavaScript (your code and the libraries you use) just to load the first page, right? But this is what happens by default when you ship a modern Web App built with Webpack bundling.</p><p>That bundle will contain code that might never run because the user only stops on the login page and never sees the rest of your app.</p><p>Code splitting is the practice of only loading the JavaScript you need the moment when you need it.</p><p>This improves:</p><ul><li>the performance of your app</li><li>the impact on memory, and so battery usage on mobile devices</li><li>the downloaded KiloBytes (or MegaBytes) size</li></ul><p>React 16.6.0, released in October 2018, introduced a way of performing code splitting that should take the place of every previously used tool or library: React.lazy and Suspense.</p><p>React.lazy and Suspense form the perfect way to lazily load a dependency and only load it when needed.</p><p>Let\u2019s start with React.lazy. You use it to import any component:</p><p>the TodoList component will be dynamically added to the output as soon as it\u2019s available. Webpack will create a separate bundle for it, and will take care of loading it when necessary.</p><p>Suspense is a component that you can use to wrap any lazily loaded component:</p><p>It takes care of handling the output while the lazy loaded component is fetched and rendered.</p><p>Use its fallback prop to output some JSX or a component output:</p><p>All this plays well with React Router:</p><h1>SECTION 4: PRACTICAL EXAMPLES</h1><p>2 very simple applications to explain some of the concepts introduced so far.</p><h1>A very simple example of building a counter in React</h1><p>In this short example we\u2019ll build a very simple example of a counter in React, applying many of the concepts and theory outlined before.</p><p>Let\u2019s use Codepen for this. We start by forking the React template pen.</p><p>In Codepen we don\u2019t need to import React and ReactDOM as they are already added in the scope.</p><p>We show the count in a div, and we add a few buttons to increment this count:</p><p>Let\u2019s add the functionality that lets us change the count by clicking the buttons, by adding a onClickFunction prop:</p><p>Here, every Button element has 2 props: increment and onClickFunction. We create 4 different buttons, with 4 increment values: 1, 10 100, 1000.</p><p>When the button in the Button component is clicked, the incrementCount function is called.</p><p>This function must increment the local count. How can we do so? We can use hooks:</p><p>useState() initializes the count variable at 0 and provides us the setCount() method to update its value.</p><p>We use both in the incrementCount() method implementation, which calls setCount() updating the value to the existing value of count, plus the increment passed by each Button component.</p><p>The complete example code can be seen at https://codepen.io/flaviocopes/pen/QzEQPR</p><h1>Fetch and display GitHub users information via API</h1><p>Very simple example of a form that accepts a GitHub username and once it receives a submit event, it asks the GitHub API for the user information, and prints them.</p><p>This code creates a reusable Card component. When you enter a name in the input field managed by the Form component, this name is bound to its state.</p><p>When Add card is pressed, the input form is cleared by clearing the userName state of the Form component.</p><p>The example uses, in addition to React, the Axios library. It\u2019s a nice useful and lightweight library to handle network requests. Add it to the Pen settings in Codepen, or install it locally using npm install axios.</p><p>We start by creating the Card component, the one that will display our image and details as gathered from GitHub. It gets its data via props, using</p><ul><li>props.avatar_url the user avatar</li><li>props.name the user name</li><li>props.blog the user website URL</li></ul><p>We create a list of those components, which will be passed by a parent component in the cards prop to CardList, which simply iterates on it using map() and outputs a list of cards:</p><p>The parent component is App, which stores the cards array in its own state, managed using the useState() Hook:</p><p>Cool! We must have a way now to ask GitHub for the details of a single username. We\u2019ll do so using a Form component, where we manage our own state (username), and we ask GitHub for information about a user using their public APIs, via Axios:</p><p>When the form is submitted we call the handleSubmit event, and after the network call we call props.onSubmit passing the parent (App) the data we got from GitHub.</p><p>We add it to App, passing a method to add a new card to the list of cards, addNewCard, as its onSubmit prop:</p><p>Finally we render the app:</p><p>Here is the full source code of our little React app:</p><p>This is the final result:</p><p>Check it out on Codepen at https://codepen.io/flaviocopes/pen/oJLyeY</p><h1>SECTION 5: STYLING</h1><h1>CSS in React</h1><p>Using React you have various ways to add styling to your components.</p><h2>Using classes and CSS</h2><p>The first and most simple is to use classes, and use a normal CSS file to target those classes:</p><p>You can import the stylesheet using an import statement, like this:</p><p>and Webpack will take care of adding the CSS property to the bundle.</p><h2>Using the style attribute</h2><p>A second method is to use the style attribute attached to a JSX element. Using this approach you don't need a separate CSS file.</p><p>CSS is defined in a slightly different way now. First, notice the double curly brackets: it\u2019s because style accepts an object. We pass in a JavaScript object, which is defined in curly braces. We could also do this:</p><p>When using create-react-app, those styles are autoprefixed by default thanks to its use of Autoprefixer.</p><p>Also, the style now is camelCased instead of using dashes. Every time a CSS property has a dash, remove it and start the next word capitalized.</p><p>Styles have the benefit of being local to the component, and they cannot leak to other components in other parts of the app, something that using classes and an external CSS file can\u2019t provide.</p><h2>Using CSS Modules</h2><p>CSS Modules seem to be a perfect spot in the middle: you use classes, but CSS is scoped to the component, which means that any styling you add cannot be applied to other components without your permission. And yet your styles are defined in a separate CSS file, which is easier to maintain than CSS in JavaScript (and you can use your good old CSS property names).</p><p>Start by creating a CSS file that ends with .module.css, for example Button.module.css. A great choice is to give it the same name as the component you are going to style</p><p>Add your CSS here, then import it inside the component file you want to style:</p><p>now you can use it in your JSX:</p><p>That\u2019s it! In the resulting markup, React will generate a specific, unique class for each rendered component, and assign the CSS to that class, so that the CSS is not affecting other markup.</p><h1>SASS in React</h1><p>When you build a React application using create-react-app, you have many options at your disposal when it comes to styling.</p><p>Of course, if not using create-react-app, you have all the choices in the world, but we limit the discussion to the create-react-app-provided options.</p><p>You can style using plain classes and CSS files, using the style attribute or CSS Modules, to start with.</p><p>SASS/SCSS is a very popular option, a much loved one by many developers.</p><p>You can use it without any configuration at all, starting with create-react-app 2.</p><p>All you need is a .sass or .scss file, and you just import it in a component:</p><p>You can see an example of it working at https://codesandbox.io/s/18qq31rp3.</p><h1>Styled Components</h1><p>Styled Components are one of the new ways to use CSS in modern JavaScript. It is the meant to be a successor of CSS Modules, a way to write CSS that\u2019s scoped to a single component, and not leak to any other element in the page</p><h2>A brief history</h2><p>Once upon a time, the Web was really simple and CSS didn\u2019t even exist. We laid out pages using tables and frames. Good times.</p><p>Then CSS came to life, and after some time it became clear that frameworks could greatly help especially in building grids and layouts, Bootstrap and Foundation playing a big part in this.</p><p>Preprocessors like SASS and others helped a lot to slow down the adoption of frameworks, and to better organize the code, conventions like BEM and SMACSS grew in use, especially within teams.</p><p>Conventions are not a solution to everything, and they are complex to remember, so in the last few years with the increasing adoption of JavaScript and build processes in every frontend project, CSS found its way into JavaScript (CSS-in-JS).</p><p>New tools explored new ways of doing CSS-in-JS and a few succeeded with increasing popularity:</p><ul><li>React Style</li><li>jsxstyle</li><li>Radium</li></ul><p>and more.</p><h2>Introducing Styled Components</h2><p>One of the most popular of these tools is Styled Components.</p><p>It is the meant to be a successor to CSS Modules, a way to write CSS that\u2019s scoped to a single component, and not leak to any other element in the page.</p><p>(more on CSS modules here and here)</p><p>Styled Components allow you to write plain CSS in your components without worrying about class name collisions.</p><h2>Installation</h2><p>Simply install styled-components using npm or yarn:</p><p>That\u2019s it! Now all you have to do is to add this import:</p><h2>Your first styled component</h2><p>With the styled object imported, you can now start creating Styled Components. Here's the first one:</p><p>Button is now a React Component in all its greatness.</p><p>We created it using a function of the styled object, called button in this case, and passing some CSS properties in a template literal.</p><p>Now this component can be rendered in our container using the normal React syntax:</p><p>Styled Components offer other functions you can use to create other components, not just button, like section, h1, input and many others.</p><p>The syntax used, with the backtick, might be weird at first, but it\u2019s called Tagged Templates, it\u2019s plain JavaScript and it\u2019s a way to pass an argument to the function.</p><h2>Using props to customize components</h2><p>When you pass some props to a Styled Component, it will pass them down to the DOM node mounted.</p><p>For example here\u2019s how we pass the placeholder and type props to an input component:</p><p>This will do just what you think, inserting those props as HTML attributes.</p><p>Props instead of just being blindly passed down to the DOM can also be used to customize a component based on the prop value. Here\u2019s an example:</p><p>Setting the primary prop changes the color of the button.</p><h2>Extending an existing Styled Component</h2><p>If you have one component and you want to create a similar one, just styled slightly differently, you can use extend:</p><h2>It\u2019s Regular CSS</h2><p>In Styled Components, you can use the CSS you already know and love. It\u2019s just plain CSS. It is not pseudo CSS nor inline CSS with its limitations.</p><p>You can use media queries, nesting and anything else you might need.</p><h2>Using Vendor Prefixes</h2><p>Styled Components automatically add all the vendor prefixes needed, so you don\u2019t need to worry about this problem.</p><h1>SECTION 6: TOOLING</h1><h1>Babel</h1><p>Babel is an awesome tool, and it\u2019s been around for quite some time, but nowadays almost every JavaScript developer relies on it. This will continue, because Babel is now indispensable and has solved a big problem for everyone.</p><p>Which problem?</p><p>The problem that every Web Developer has surely had: a feature of JavaScript is available in the latest release of a browser, but not in the older versions. Or maybe Chrome or Firefox implement it, but Safari iOS and Edge do not.</p><p>For example, ES6 introduced the arrow function:</p><p>Which is now supported by all modern browsers. IE11 does not support it, nor Opera Mini (How do I know? By checking the ES6 Compatibility Table).</p><p>So how should you deal with this problem? Should you move on and leave those customers with older/incompatible browsers behind, or should you write older JavaScript code to make all your users happy?</p><p>Enter Babel. Babel is a compiler: it takes code written in one standard, and it transpiles it to code written into another standard.</p><p>You can configure Babel to transpile modern ES2017 JavaScript into JavaScript ES5 syntax:</p><p>This must happen at build time, so you must setup a workflow that handles this for you. Webpack is a common solution.</p><p>(P.S. if all this ES thing sounds confusing to you, see more about ES versions in the ECMAScript guide)</p><h2>Installing Babel</h2><p>Babel is easily installed using npm, locally in a project:</p><p>Since npm now comes with npx, locally installed CLI packages can run by typing the command in the project folder:</p><p>So we can run Babel by just running</p><h2>An example Babel configuration</h2><p>Babel out of the box does not do anything useful, you need to configure it and add plugins.</p><p>Here is a list of Babel plugins</p><p>To solve the problem we talked about in the introduction (using arrow functions in every browser), we can run</p><p>to download the package in the node_modules folder of our app, then we need to add</p><p>to the .babelrc file present in the application root folder. If you don't have that file already, you just create a blank file, and put that content into it.</p><p>TIP: If you have never seen a dot file (a file starting with a dot) it might be odd at first because that file might not appear in your file manager, as it\u2019s a hidden file.</p><p>Now if we have a script.js file with this content:</p><p>running babel script.js will output the following code:</p><p>As you can see arrow functions have all been converted to JavaScript ES5 functions.</p><h2>Babel presets</h2><p>We just saw in the previous article how Babel can be configured to transpile specific JavaScript features.</p><p>You can add much more plugins, but you can\u2019t add to the configuration features one by one, it\u2019s not practical.</p><p>This is why Babel offers presets.</p><p>The most popular presets are env and react.</p><p>Tip: Babel 7 deprecated (and removed) yearly presets like preset-es2017, and stage presets. Use @babel/preset-env instead.</p><h2>env preset</h2><p>The env preset is very nice: you tell it which environments you want to support, and it does everything for you, supporting all modern JavaScript features.</p><p>E.g. \u201csupport the last 2 versions of every browser, but for Safari let\u2019s support all versions since Safari 7\u201d</p><p>or \u201cI don\u2019t need browser support, just let me work with Node.js 6.10\u201d</p><h2>react preset</h2><p>The react preset is very convenient when writing React apps: adding preset-flow, syntax-jsx, transform-react-jsx, transform-react-display-name.</p><p>By including it, you are all ready to go developing React apps, with JSX transforms and Flow support.</p><h2>More info on presets</h2><p>https://babeljs.io/docs/plugins/</p><h2>Using Babel with webpack</h2><p>If you want to run modern JavaScript in the browser, Babel on its own is not enough, you also need to bundle the code. Webpack is the perfect tool for this.</p><p>Modern JS needs two different stages: a compile stage, and a runtime stage. This is because some ES6+ features need a polyfill or a runtime helper.</p><p>To install the Babel polyfill runtime functionality, run</p><p>Now in your webpack.config.js file add:</p><p>By keeping the presets and plugins information inside the webpack.config.js file, we can avoid having a .babelrc file.</p><h1>Webpack</h1><p>Webpack is a tool that lets you compile JavaScript modules, also known as module bundler. Given a large number of files, it generates a single file (or a few files) that run your app.</p><p>It can perform many operations:</p><ul><li>helps you bundle your resources.</li><li>watches for changes and re-runs the tasks.</li><li>can run Babel transpilation to ES5, allowing you to use the latest JavaScript features without worrying about browser support.</li><li>can transpile CoffeeScript to JavaScript</li><li>can convert inline images to data URIs.</li><li>allows you to use require() for CSS files.</li><li>can run a development webserver.</li><li>can handle hot module replacement.</li><li>can split the output files into multiple files, to avoid having a huge js file to load in the first page hit.</li><li>can perform tree shaking.</li></ul><p>Webpack is not limited to be use on the frontend, it\u2019s also useful in backend Node.js development as well.</p><p>Predecessors of webpack, and still widely used tools, include:</p><ul><li>Grunt</li><li>Broccoli</li><li>Gulp</li></ul><p>There are lots of similarities in what those and Webpack can do, but the main difference is that those are known as task runners, while webpack was born as a module bundler.</p><p>It\u2019s a more focused tool: you specify an entry point to your app (it could even be an HTML file with script tags) and webpack analyzes the files and bundles all you need to run the app in a single JavaScript output file (or in more files if you use code splitting).</p><h2>Installing webpack</h2><p>Webpack can be installed globally or locally for each project.</p><h2>Global install</h2><p>Here\u2019s how to install it globally with Yarn:</p><p>with npm:</p><p>once this is done, you should be able to run</p><h2>Local install</h2><p>Webpack can be installed locally as well. It\u2019s the recommended setup, because webpack can be updated per-project, and you have less resistance to using the latest features just for a small project rather than updating all the projects you have that use webpack.</p><p>With Yarn:</p><p>with npm:</p><p>Once this is done, add this to your package.json file:</p><p>once this is done, you can run webpack by typing</p><p>in the project root.</p><h2>Webpack configuration</h2><p>By default, webpack (starting from version 4) does not require any config if you respect these conventions:</p><ul><li>the entry point of your app is ./src/index.js</li><li>the output is put in ./dist/main.js.</li><li>Webpack works in production mode</li></ul><p>You can customize every little bit of webpack of course, when you need. The webpack configuration is stored in the webpack.config.js file, in the project root folder.</p><h2>The entry point</h2><p>By default the entry point is ./src/index.js This simple example uses the ./index.js file as a starting point:</p><h2>The output</h2><p>By default the output is generated in ./dist/main.js. This example puts the output bundle into app.js:</p><h2>Loaders</h2><p>Using webpack allows you to use import or require statements in your JavaScript code to not just include other JavaScript, but any kind of file, for example CSS.</p><p>Webpack aims to handle all our dependencies, not just JavaScript, and loaders are one way to do that.</p><p>For example, in your code you can use:</p><p>by using this loader configuration:</p><p>The regular expression targets any CSS file.</p><p>A loader can have options:</p><p>You can require multiple loaders for each rule:</p><p>In this example, css-loader interprets the import 'style.css' directive in the CSS. style-loader is then responsible for injecting that CSS in the DOM, using a <style> tag.</p><p>The order matters, and it\u2019s reversed (the last is executed first).</p><p>What kind of loaders are there? Many! You can find the full list here.</p><p>A commonly used loader is Babel, which is used to transpile modern JavaScript to ES5 code:</p><p>This example makes Babel preprocess all our React/JSX files:</p><p>See the babel-loader options here.</p><h2>Plugins</h2><p>Plugins are like loaders, but on steroids. They can do things that loaders can\u2019t do, and they are the main building block of webpack.</p><p>Take this example:</p><p>The HTMLWebpackPlugin plugin has the job of automatically creating an HTML file, adding the output JS bundle path, so the JavaScript is ready to be served.</p><p>There are lots of plugins available.</p><p>One useful plugin, CleanWebpackPlugin, can be used to clear the dist/ folder before creating any output, so you don't leave files around when you change the name of the output file:</p><h2>The webpack mode</h2><p>This mode (introduced in webpack 4) sets the environment on which webpack works. It can be set to development or production (defaults to production, so you only set it when moving to development)</p><p>Development mode:</p><ul><li>builds very fast</li><li>is less optimized than production</li><li>does not remove comments</li><li>provides more detailed error messages and suggestions</li><li>provides a better debugging experience</li></ul><p>Production mode is slower to build, since it needs to generate a more optimized bundle. The resulting JavaScript file is smaller in size, as it removes many things that are not needed in production.</p><p>I made a sample app that just prints a console.log statement.</p><p>Here\u2019s the production bundle:</p><p>Here\u2019s the development bundle:</p><h2>Running webpack</h2><p>Webpack can be run from the command line manually if installed globally, but generally you write a script inside the package.json file, which is then run using npm or yarn.</p><p>For example this package.json scripts definition we used before:</p><p>allows us to run webpack by running</p><p>or</p><p>or simply</p><h2>Watching changes</h2><p>Webpack can automatically rebuild the bundle when a change in your app happens, and keep listening for the next change.</p><p>Just add this script:</p><p>and run</p><p>or</p><p>or simply</p><p>One nice feature of the watch mode is that the bundle is only changed if the build has no errors. If there are errors, watch will keep listening for changes, and try to rebuild the bundle, but the current, working bundle is not affected by those problematic builds.</p><h2>Handling images</h2><p>Webpack allows us to use images in a very convenient way, using the file-loader loader.</p><p>This simple configuration:</p><p>Allows you to import images in your JavaScript:</p><p>(img is an HTMLImageElement. Check the Image docs)</p><p>file-loader can handle other asset types as well, like fonts, CSV files, xml, and more.</p><p>Another nice tool to work with images is the url-loader loader.</p><p>This example loads any PNG file smaller than 8KB as a data URL.</p><h2>Process your SASS code and transform it to CSS</h2><p>Using sass-loader, css-loader and style-loader:</p><h2>Generate Source Maps</h2><p>Since webpack bundles the code, Source Maps are mandatory to get a reference to the original file that raised an error, for example.</p><p>You tell webpack to generate source maps using the devtool property of the configuration:</p><p>devtool has many possible values, the most used probably are:</p><ul><li>none: adds no source maps</li><li>source-map: ideal for production, provides a separate source map that can be minimized, and adds a reference into the bundle, so development tools know that the source map is available. Of course you should configure the server to avoid shipping this, and just use it for debugging purposes</li><li>inline-source-map: ideal for development, inlines the source map as a Data URL</li></ul><h1>SECTION 7: TESTING</h1><h1>Jest</h1><p>Jest is a library for testing JavaScript code.</p><p>It\u2019s an open source project maintained by Facebook, and it\u2019s especially well suited for React code testing, although not limited to that: it can test any JavaScript code. Its strengths are:</p><ul><li>it\u2019s fast</li><li>it can perform snapshot testing</li><li>it\u2019s opinionated, and provides everything out of the box without requiring you to make choices</li></ul><p>Jest is a tool very similar to Mocha, although they have differences:</p><ul><li>Mocha is less opinionated, while Jest has a certain set of conventions</li><li>Mocha requires more configuration, while Jest works usually out of the box, thanks to being opinionated</li><li>Mocha is older and more established, with more tooling integrations</li></ul><p>In my opinion the biggest feature of Jest is it\u2019s an out of the box solution that works without having to interact with other testing libraries to perform its job.</p><h2>Installation</h2><p>Jest is automatically installed in create-react-app, so if you use that, you don\u2019t need to install Jest.</p><p>Jest can be installed in any other project using Yarn:</p><p>or npm:</p><p>notice how we instruct both to put Jest in the devDependencies part of the package.json file, so that it will only be installed in the development environment and not in production.</p><p>Add this line to the scripts part of your package.json file:</p><p>so that tests can be run using yarn test or npm run test.</p><p>Alternatively, you can install Jest globally:</p><p>and run all your tests using the jest command line tool.</p><h2>Create the first Jest test</h2><p>Projects created with create-react-app have Jest installed and preconfigured out of the box, but adding Jest to any project is as easy as typing</p><p>Add to your package.json this line:</p><p>and run your tests by executing yarn test in your shell.</p><p>Now, you don\u2019t have any tests here, so nothing is going to be executed:</p><p>Let\u2019s create the first test. Open a math.js file and type a couple functions that we\u2019ll later test:</p><p>Now create a math.test.js file, in the same folder, and there we\u2019ll use Jest to test the functions defined in math.js:</p><p>Running yarn test results in Jest being run on all the test files it finds, and returning us the end result:</p><h2>Run Jest with VS Code</h2><p>Visual Studio Code is a great editor for JavaScript development. The Jest extension offers a top notch integration for our tests.</p><p>Once you install it, it will automatically detect if you have installed Jest in your devDependencies and run the tests. You can also invoke the tests manually by selecting the Jest: Start Runner command. It will run the tests and stay in watch mode to re-run them whenever you change one of the files that have a test (or a test file):</p><h2>Matchers</h2><p>In the previous article I used toBe() as the only matcher:</p><p>A matcher is a method that lets you test values.</p><p>Most commonly used matchers, comparing the value of the result of expect() with the value passed in as argument, are:</p><ul><li>toBe compares strict equality, using ===</li><li>toEqual compares the values of two variables. If it\u2019s an object or array, it checks the equality of all the properties or elements</li><li>toBeNull is true when passing a null value</li><li>toBeDefined is true when passing a defined value (opposite to the above)</li><li>toBeUndefined is true when passing an undefined value</li><li>toBeCloseTo is used to compare floating values, avoiding rounding errors</li><li>toBeTruthy true if the value is considered true (like an if does)</li><li>toBeFalsy true if the value is considered false (like an if does)</li><li>toBeGreaterThan true if the result of expect() is higher than the argument</li><li>toBeGreaterThanOrEqual true if the result of expect() is equal to the argument, or higher than the argument</li><li>toBeLessThan true if the result of expect() is lower than the argument</li><li>toBeLessThanOrEqual true if the result of expect() is equal to the argument, or lower than the argument</li><li>toMatch is used to compare strings with regular expression pattern matching</li><li>toContain is used in arrays, true if the expected array contains the argument in its elements set</li><li>toHaveLength(number): checks the length of an array</li><li>toHaveProperty(key, value): checks if an object has a property, and optionally checks its value</li><li>toThrow checks if a function you pass throws an exception (in general) or a specific exception</li><li>toBeInstanceOf(): checks if an object is an instance of a class</li></ul><p>All those matchers can be negated using .not. inside the statement, for example:</p><p>For use with promises, you can use .resolves and .rejects:</p><h2>Setup</h2><p>Before running your tests you will want to perform some initialization.</p><p>To do something once before all the tests run, use the beforeAll() function:</p><p>To perform something before each test runs, use beforeEach():</p><h2>Teardown</h2><p>Just as you can do with setup, you can also perform something after each test runs:</p><p>and after all tests end:</p><h2>Group tests using describe()</h2><p>You can create groups of tests, in a single file, that isolate the setup and teardown functions:</p><h2>Testing asynchronous code</h2><p>Asynchronous code in modern JavaScript can have basically 2 forms: callbacks and promises. On top of promises we can use async/await.</p><h2>Callbacks</h2><p>You can\u2019t have a test in a callback, because Jest won\u2019t execute it \u2014 the execution of the test file ends before the callback is called. To fix this, pass a parameter to the test function, which you can conveniently call done. Jest will wait until you call done() before ending that test:</p><h2>Promises</h2><p>With functions that return promises, we simply return a promise from the test:</p><p>Promises that are rejected can be tested using .catch():</p><h2>Async/await</h2><p>To test functions that return promises we can also use async/await, which makes the syntax very straightforward and simple:</p><h2>Mocking</h2><p>In testing, mocking allows you to test functionality that depends on:</p><ul><li>Database</li><li>Network requests</li><li>access to Files</li><li>any External system</li></ul><p>so that:</p><ol><li>your tests run faster, giving a quick turnaround time during development</li><li>your tests are independent of network conditions, or the state of the database</li><li>your tests do not pollute any data storage because they do not touch the database</li><li>any change done in a test does not change the state for subsequent tests, and re-running the test suite should start from a known and reproducible starting point</li><li>you don\u2019t have to worry about rate limiting on API calls and network requests</li></ol><p>Mocking is useful when you want to avoid side effects (e.g. writing to a database) or you want to skip slow portions of code (like network access), and also avoids implications with running your tests multiple times (e.g. imagine a function that sends an email or calls a rate-limited API).</p><p>Even more important, if you are writing a Unit Test, you should test the functionality of a function in isolation, not with all its baggage of things it touches.</p><p>Using mocks, you can inspect if a module function has been called and which parameters were used, with:</p><ul><li>expect().toHaveBeenCalled(): check if a spied function has been called</li><li>expect().toHaveBeenCalledTimes(): count how many times a spied function has been called</li><li>expect().toHaveBeenCalledWith(): check if the function has been called with a specific set of parameters</li><li>expect().toHaveBeenLastCalledWith(): check the parameters of the last time the function has been invoked</li></ul><h2>Spy packages without affecting the functions code</h2><p>When you import a package, you can tell Jest to \u201cspy\u201d on the execution of a particular function, using spyOn(), without affecting how that method works.</p><p>Example:</p><h2>Mock an entire package</h2><p>Jest provides a convenient way to mock an entire package. Create a __mocks__folder in the project root, and in this folder create one JavaScript file for each of your packages.</p><p>Say you import mathjs. Create a __mocks__/mathjs.js file in your project root, and add this content:</p><p>This will mock the log() function of the package. Add as many functions as you want to mock:</p><h2>Mock a single function</h2><p>More simply, you can mock a single function using jest.fn():</p><p>You can also use jest.fn().mockReturnValue('test') to create a simple mock that does nothing except returning a value.</p><h2>Pre-built mocks</h2><p>You can find pre-made mocks for popular libraries. For example this package https://github.com/jefflau/jest-fetch-mock allows you to mock fetch() calls, and provide sample return values without interacting with the actual server in your tests.</p><h2>Snapshot testing</h2><p>Snapshot testing is a pretty cool feature offered by Jest. It can memorize how your UI components are rendered, and compare it to the current test, raising an error if there\u2019s a mismatch.</p><p>This is a simple test on the App component of a simple create-react-app application (make sure you install react-test-renderer):</p><p>the first time you run this test, Jest saves the snapshot to the __snapshots__folder. Here\u2019s what App.test.js.snap contains:</p><p>As you see it\u2019s the code that the App component renders, nothing more.</p><p>The next time the test compares the output of <App /> to this. If App changes, you get an error:</p><p>When using yarn test in create-react-app you are in watch mode, and from there you can press w and show more options:</p><p>If your change is intended, pressing u will update the failing snapshots, and make the test pass.</p><p>You can also update the snapshot by running jest -u (or jest --updateSnapshot) outside of watch mode.</p><h1>Testing React components</h1><p>The easiest way to start with testing React components is doing snapshot testing, a testing technique that lets you test components in isolation.</p><p>If you are familiar with testing software, it\u2019s just like unit testing you do for classes: you test each component functionality.</p><p>I assume you created a React app with create-react-app, which already comes with Jest installed, the testing package we'll need.</p><p>Let\u2019s start with a simple test. CodeSandbox is a great environment to try this out. Start with a React sandbox, and create an App.js component in a components folder, and add an App.test.js file.</p><p>Our first test is dumb:</p><p>When CodeSandbox detects test files, it automatically runs them for you, and you can click the Tests button in the bottom of the view to show your test results:</p><p>A test file can contain multiple tests:</p><p>Let\u2019s do something a bit more useful now, to actually test a React component. We only have App now, which is not doing anything really useful, so let\u2019s first set up the environment with a little application with more functionality: the counter app we built previously. If you skipped it, you can go back and read how we built it, but for easier reference I add it here again.</p><p>It\u2019s just 2 components: App and Button. Create the App.js file:</p><p>and the Button.js file:</p><p>We are going to use the react-testing-library, which is a great help as it allows us to inspect the output of every component and to apply events on them. You can read more about it on https://github.com/kentcdodds/react-testing-library or watch this video.</p><p>Let\u2019s test the Button component first.</p><p>We start by importing render and fireEvent from react-testing-library, two helpers. The first lets us render JSX. The second lets us emit events on a component.</p><p>Create a Button.test.js and put it in the same folder as Button.js.</p><p>Buttons are used in the app to accept a click event and then they call a function passed to the onClickFunction prop. We add a count variable and we create a function that increments it:</p><p>Now off to the actual tests. We first initialize count to 0, and we render a +1 Button component passing a 1 to increment and our incrementCount function to onClickFunction.</p><p>Then we get the content of the first child of the component, and we check it outputs +1.</p><p>We then proceed to clicking the button, and we check that the count got from 0 to 1:</p><p>Similarly we test a +100 button, this time checking the output is +100 and the button click increments the count of 100.</p><p>Let\u2019s test the App component now. It shows 4 buttons and the result in the page. We can inspect each button and see if the result increases when we click them, clicking multiple times as well:</p><p>Check the code working on this CodeSandbox: https://codesandbox.io/s/pprl4y0wq</p><h1>SECTION 8: THE REACT ECOSYSTEM</h1><p>The ecosystem around React is huge. Here I introduce you to 4 of the most popular projects based upon React: React Router, Redux, Next.js, Gatsby.</p><h1>React Router</h1><p>React Router is the de-facto React routing library, and it\u2019s one of the most popular projects built on top of React.</p><p>React at its core is a very simple library, and it does not dictate anything about routing.</p><p>Routing in a Single Page Application is the way to introduce some features to navigating the app through links, which are expected in normal web applications:</p><ol><li>The browser should change the URL when you navigate to a different screen</li><li>Deep linking should work: if you point the browser to a URL, the application should reconstruct the same view that was presented when the URL was generated.</li><li>The browser back (and forward) button should work like expected.</li></ol><p>Routing links together your application navigation with the navigation features offered by the browser: the address bar and the navigation buttons.</p><p>React Router offers a way to write your code so that it will show certain components of your app only if the route matches what you define.</p><h1>Installation</h1><p>With npm:</p><p>With Yarn:</p><h1>Types of routes</h1><p>React Router provides two different kind of routes:</p><ul><li>BrowserRouter</li><li>HashRouter</li></ul><p>One builds classic URLs, the other builds URLs with the hash:</p><p>Which one to use is mainly dictated by the browsers you need to support. BrowserRouter uses the History API, which is relatively recent, and not supported in IE9 and below. If you don't have to worry about older browsers, it's the recommended choice.</p><h1>Components</h1><p>The 3 components you will interact the most when working with React Router are:</p><ul><li>BrowserRouter, usually aliased as Router</li><li>Link</li><li>Route</li></ul><p>BrowserRouter wraps all your Route components.</p><p>Link components are - as you can imagine - used to generate links to your routes</p><p>Route components are responsible for showing - or hiding - the components they contain.</p><h1>BrowserRouter</h1><p>Here\u2019s a simple example of the BrowserRouter component. You import it from react-router-dom, and you use it to wrap all your app:</p><p>A BrowserRouter component can only have one child element, so we wrap all we\u2019re going to add in a div element.</p><h1>Link</h1><p>The Link component is used to trigger new routes. You import it from react-router-dom, and you can add the Link components to point at different routes, with the to attribute:</p><h1>Route</h1><p>Now let\u2019s add the Route component in the above snippet to make things actually work as we want:</p><p>Check this example on Glitch: https://flaviocopes-react-router-v4.glitch.me/</p><p>When the route matches /, the application shows the Dashboard component.</p><p>When the route is changed by clicking the \u201cAbout\u201d link to /about, the Dashboard component is removed and the About component is inserted in the DOM.</p><p>Notice the exact attribute. Without this, path=\"/\" would also match /about, since / is contained in the route.</p><h1>Match multiple paths</h1><p>You can have a route respond to multiple paths simply using a regex, because path can be a regular expressions string:</p><h1>Inline rendering</h1><p>Instead of specifying a component property on Route, you can set a render prop:</p><h1>Match dynamic route parameter</h1><p>You already saw how to use static routes like</p><p>Here\u2019s how to handle dynamic routes:</p><p>In your Route component you can lookup the dynamic parameters in match.params.</p><p>match is also available in inline rendered routes, and this is especially useful in this case, because we can use the id parameter to lookup the post data in our data source before rendering Post:</p><h1>Redux</h1><p>Redux is a state manager that\u2019s usually used along with React, but it\u2019s not tied to that library \u2014 it can be used with other technologies as well, but we\u2019ll stick to React for the sake of the explanation..</p><p>Redux is a way to manage an application state, and move it to an external global store.</p><p>There are a few concepts to grasp, but once you do, Redux is a very simple approach to the problem.</p><p>Redux is very popular with React applications, but it\u2019s in no way unique to React: there are bindings for nearly any popular framework. That said, I\u2019ll make some examples using React as it is its primary use case.</p><h2>When should you use Redux?</h2><p>Redux is ideal for medium to big apps, and you should only use it when you have trouble managing the state with the default state management of React, or the other library you use.</p><p>Simple apps should not need it at all (and there\u2019s nothing wrong with simple apps).</p><h2>Immutable State Tree</h2><p>In Redux, the whole state of the application is represented by one JavaScript object, called State or State Tree.</p><p>We call it Immutable State Tree because it is read only: it can\u2019t be changed directly.</p><p>It can only be changed by dispatching an Action.</p><h2>Actions</h2><p>An Action is a JavaScript object that describes a change in a minimal way (with just the information needed):</p><p>The only requirement of an action object is having a type property, whose value is usually a string.</p><h2>Actions types should be constants</h2><p>In a simple app an action type can be defined as a string, as I did in the example in the previous lesson.</p><p>When the app grows is best to use constants:</p><p>and to separate actions in their own files, and import them</p><h2>Action creators</h2><p>Actions Creators are functions that create actions.</p><p>You usually run action creators in combination with triggering the dispatcher:</p><p>or by defining an action dispatcher function:</p><h2>Reducers</h2><p>When an action is fired, something must happen, the state of the application must change.</p><p>This is the job of reducers.</p><p>A reducer is a pure function that calculates the next State Tree based on the previous State Tree, and the action dispatched.</p><p>A pure function takes an input and returns an output without changing the input or anything else. Thus, a reducer returns a completely new state tree object that substitutes the previous one.</p><h2>What a reducer should not do</h2><p>A reducer should be a pure function, so it should:</p><ul><li>never mutate its arguments</li><li>never mutate the state, but instead create a new one with Object.assign({}, ...)</li><li>never generate side-effects (no API calls changing anything)</li><li>never call non-pure functions, functions that change their output based on factors other than their input (e.g. Date.now() or Math.random())</li></ul><p>There is no reinforcement, but you should stick to the rules.</p><h2>Multiple reducers</h2><p>Since the state of a complex app could be really wide, there is not a single reducer, but many reducers for any kind of action.</p><h2>A simulation of a reducer</h2><p>At its core, Redux can be simplified with this simple model:</p><h2>The state</h2><h2>A list of actions</h2><h2>A reducer for every part of the state</h2><h2>A reducer for the whole state</h2><h2>The Store</h2><p>The Store is an object that:</p><ul><li>holds the state of the app</li><li>exposes the state via getState()</li><li>allows us to update the state via dispatch()</li><li>allows us to (un)register a state change listener using subscribe()</li></ul><p>A store is unique in the app.</p><p>Here is how a store for the listManager app is created:</p><h2>Can I initialize the store with server-side data?</h2><p>Sure, just pass a starting state:</p><h2>Getting the state</h2><h2>Update the state</h2><h2>Listen to state changes</h2><h2>Data Flow</h2><p>Data flow in Redux is always unidirectional.</p><p>You call dispatch() on the Store, passing an Action.</p><p>The Store takes care of passing the Action to the Reducer, generating the next State.</p><p>The Store updates the State and alerts all the Listeners.</p><h1>Next.js</h1><p>Working on a modern JavaScript application powered by React is awesome until you realize that there are a couple problems related to rendering all the content on the client-side.</p><p>First, the page takes longer to the become visible to the user, because before the content loads, all the JavaScript must load, and your application needs to run to determine what to show on the page.</p><p>Second, if you are building a publicly available website, you have a content SEO issue. Search engines are getting better at running and indexing JavaScript apps, but it\u2019s much better if we can send them content instead of letting them figure it out.</p><p>The solution to both of those problems is server rendering, also called static pre-rendering.</p><p>Next.js is one React framework to do all of this in a very simple way, but it\u2019s not limited to this. It\u2019s advertised by its creators as a zero-configuration, single-command toolchain for React apps.</p><p>It provides a common structure that allows you to easily build a frontend React application, and transparently handle server-side rendering for you.</p><p>Here is a non-exhaustive list of the main Next.js features:</p><ul><li>Hot Code Reloading: Next.js reloads the page when it detects any change saved to disk.</li><li>Automatic Routing: any URL is mapped to the filesystem, to files put in the pages folder, and you don\u2019t need any configuration (you have customization options of course).</li><li>Single File Components: using styled-jsx, completely integrated as built by the same team, it\u2019s trivial to add styles scoped to the component.</li><li>Server Rendering: you can (optionally) render React components on the server side, before sending the HTML to the client.</li><li>Ecosystem Compatibility: Next.js plays well with the rest of the JavaScript, Node and React ecosystem.</li><li>Automatic Code Splitting: pages are rendered with just the libraries and JavaScript that they need, no more.</li><li>Prefetching: the Link component, used to link together different pages, supports a prefetch prop which automatically prefetches page resources (including code missing due to code splitting) in the background.</li><li>Dynamic Components: you can import JavaScript modules and React Components dynamically (https://github.com/zeit/next.js#dynamic-import).</li><li>Static Exports: using the next export command, Next.js allows you to export a fully static site from your app.</li></ul><h2>Installation</h2><p>Next.js supports all the major platforms: Linux, macOS, Windows.</p><p>A Next.js project is started easily with npm:</p><p>or with Yarn:</p><h2>Getting started</h2><p>Create a package.json file with this content:</p><p>If you run this command now:</p><p>the script will raise an error complaining about not finding the pages folder. This is the only thing that Next.js requires to run.</p><p>Create an empty pages folder, and run the command again, and Next.js will start up a server on localhost:3000.</p><p>If you go to that URL now, you\u2019ll be greeted by a friendly 404 page, with a nice clean design.</p><p>Next.js handles other error types as well, like 500 errors for example.</p><h2>Create a page</h2><p>In the pages folder create an index.js file with a simple React functional component:</p><p>If you visit localhost:3000, this component will automatically be rendered.</p><p>Why is this so simple?</p><p>Next.js uses a declarative pages structure, which is based on the filesystem structure.</p><p>Simply put, pages are inside a pages folder, and the page URL is determined by the page file name. The filesystem is the pages API.</p><h2>Server-side rendering</h2><p>Open the page source, View -> Developer -> View Source with Chrome.</p><p>As you can see, the HTML generated by the component is sent directly in the page source. It\u2019s not rendered client-side, but instead it\u2019s rendered on the server.</p><p>The Next.js team wanted to create a developer experience for server rendered pages similar to the one you get when creating a basic PHP project, where you simply drop PHP files and you call them, and they show up as pages. Internally of course it\u2019s all very different, but the apparent ease of use is clear.</p><h2>Add a second page</h2><p>Let\u2019s create another page, in pages/contact.js</p><p>If you point your browser to localhost:3000/contact this page will be rendered. As you can see, also this page is server rendered.</p><h2>Hot reloading</h2><p>Note how you did not have to restart the npm process to load the second page. Next.js does this for you under the hood.</p><h2>Client rendering</h2><p>Server rendering is very convenient in your first page load, for all the reasons we saw above, but when it comes to navigating inside the website, client-side rendering is key to speeding up the page load and improving the user experience.</p><p>Next.js provides a Link component you can use to build links. Try linking the two pages above.</p><p>Change index.js to this code:</p><p>Now go back to the browser and try this link. As you can see, the Contact page loads immediately, without a page refresh.</p><p>This is client-side navigation working correctly, with complete support for the History API, which means your users back button won\u2019t break.</p><p>If you now cmd-click the link, the same Contact page will open in a new tab, now server rendered.</p><h2>Dynamic pages</h2><p>A good use case for Next.js is a blog, as it\u2019s something that all developers know how it works, and it\u2019s a good fit for a simple example of how to handle dynamic pages.</p><p>A dynamic page is a page that has no fixed content, but instead display some data based on some parameters.</p><p>Change index.js to</p><p>This will create a series of posts and will fill the title query parameter with the post title:</p><p>Now create a post.js file in the pages folder, and add:</p><p>Now clicking a single post will render the post title in a h1 tag:</p><p>You can use clean URLs without query parameters. The Next.js Link component helps us by accepting an as attribute, which you can use to pass a slug:</p><h2>CSS-in-JS</h2><p>Next.js by default provides support for styled-jsx, which is a CSS-in-JS solution provided by the same development team, but you can use whatever library you prefer, like Styled Components.</p><p>Example:</p><p>Styles are scoped to the component, but you can also edit global styles adding global to the style element:</p><h2>Exporting a static site</h2><p>A Next.js application can be easily exported as a static site, which can be deployed on one of the super fast static site hosts, like Netlify or Firebase Hosting, without the need to set up a Node environment.</p><p>The process requires you to declare the URLs that compose the site, but it\u2019s a straightforward process.</p><h2>Deploying</h2><p>Creating a production-ready copy of the application, without source maps or other development tooling that aren\u2019t needed in the final build, is easy.</p><p>At the beginning of this tutorial you created a package.json file with this content:</p><p>which was the way to start up a development server using npm run dev.</p><p>Now just add the following content to package.json instead:</p><p>and prepare your app by running npm run build and npm run start.</p><h2>Now</h2><p>The company behind Next.js provides an awesome hosting service for Node.js applications, called Now.</p><p>Of course they integrate both their products so you can deploy Next.js apps seamlessly, once you have Now installed, by running the now command in the application folder.</p><p>Behind the scenes Now sets up a server for you, and you don\u2019t need to worry about anything, just wait for your application URL to be ready.</p><h2>Zones</h2><p>You can set up multiple Next.js instances to listen to different URLs, yet the application to an outside user will simply look like it\u2019s being powered by a single server: https://github.com/zeit/next.js/#multi-zones</p><h2>Plugins</h2><p>Next.js has a list of plugins at https://github.com/zeit/next-plugins</p><h2>Starter kit on Glitch</h2><p>If you\u2019re looking to experiment, I recommend Glitch. Check out my Next.js Glitch Starter Kit.</p><h1>Gatsby</h1><p>Gatsby is a platform for building apps and websites using React.</p><p>It is one of the tools that allow you to build on a set of technologies and practices collectively known as JAMstack.</p><p>Gatsby is one of the cool kids in the Frontend Development space right now. Why? I think the reasons are:</p><ul><li>the explosion of the JAMstack approach to building Web Apps and Web Sites</li><li>the rapid adoption of the Progressive Web Apps technology in the industry, which is one of the key features of Gatsby</li><li>it\u2019s built in React and GraphQL, which are two very popular and rising technologies</li><li>it\u2019s really powerful</li><li>it\u2019s fast</li><li>the documentation is great</li><li>the network effect (people use it, create sites, make tutorials, people know more about it, creating a cycle)</li><li>everything is JavaScript (no need to learn a new templating language)</li><li>it hides the complexity, in the beginning, but allows us access into every step to customize</li></ul><p>All those are great points, and Gatsby is definitely worth a look.</p><h2>How does it work?</h2><p>With Gatsby, your applications are built using React components.</p><p>The content you\u2019ll render in a site is generally written using Markdown, but you can use any kind of data source, like a headless CMS or a web service like Contentful.</p><p>Gatsby builds the site, and it\u2019s compiled to static HTML which can be deployed on any Web Server you want, like Netlify, AWS S3, GitHub Pages, regular hosting providers, PAAS and more. All you need is a place that serves plain HTTP pages and your assets to the client.</p><p>I mentioned Progressive Web Apps in the list. Gatsby automatically generates your site as a PWA, with a service worker that speeds up page loading and resource caching.</p><p>You can enhance the functionality of Gatsby via plugins.</p><h2>Installation</h2><p>You can install Gatsby by simply running this in your terminal:</p><p>This installs the gatsby CLI utility.</p><p>(when a new version is out, update it by calling this command again)</p><p>You create a new \u201cHello World\u201d site by running</p><a>https://github.com/gatsbyjs/gatsby-starter-hello-world</a><p>This command creates a brand new Gatsby site in the mysite folder, using the starter available at https://github.com/gatsbyjs/gatsby-starter-hello-world.</p><p>A starter is a sample site that you can build upon. Another common starter is default, available at https://github.com/gatsbyjs/gatsby-starter-default.</p><p>Here you can find a list of all the starters you can use.</p><h2>Running the Gatsby site</h2><p>After the terminal has finished installing the starter, you can run the website by calling</p><p>which will start up a new Web Server and serve the site on port 8000 on localhost.</p><p>And here is our Hello World starter in action:</p><h1>Inspecting the site</h1><p>If you open the site you created with your favorite code editor (I use VS Code), you\u2019ll find there are 3 folders:</p><ul><li>.cache, a hidden folder that contains the Gatsby internals, nothing you should change right now</li><li>public, which contains the resulting website once you build it</li><li>src contains the React components, in this case just the index component</li><li>static which will contain the static resources like CSS and images</li></ul><p>Now, making a simple change to the default page is easy, just open src/pages/index.js and change \u201cHello world!\u201d to something else, and save. The browser should instantly hot reload the component (which means the page does not actually refresh, but the content changes - a trick made possible by the underlying technology).</p><p>To add a second page, just create another .js file in this folder, with the same content of index.js (tweak the content) and save it.</p><p>For example I created a second.js file with this content:</p><p>and I opened the browser to http://localhost:8000/second:</p><h2>Linking pages</h2><p>You can link those pages by importing a Gatsby-provided React component called Link:</p><p>and using it in your component JSX:</p><h2>Adding CSS</h2><p>You can import any CSS file using a JavaScript import:</p><p>You can use React styling:</p><h2>Using plugins</h2><p>Gatsby provides lots of things out of the box, but many other functionalities are provided by plugins.</p><p>There are 3 kind of plugins:</p><ul><li>source plugins fetch data from a source. Create nodes that can be then filtered by transformer plugins</li><li>transformer plugins transform the data provided by source plugins into something Gatsby can use</li><li>functional plugins implement some kind of functionality, like adding sitemap support or more</li></ul><p>Some commonly used plugins are:</p><ul><li>gatsby-plugin-react-helmet which allows to edit the head tag content</li><li>gatsby-plugin-catch-links which uses the History API to prevent the browser reloading the page when a link is clicked, loading the new content using AJAX instead</li></ul><p>A Gatsby plugin is installed in 2 steps. First you install it using npm, then you add it to the Gatsby configuration in gatsby-config.js.</p><p>For example you can install the Catch Links plugin:</p><p>In gatsby-config.js (create it if you don\u2019t have it, in the website root folder), add the plugin to the plugins exported array:</p><p>That\u2019s it, the plugin will now do its job.</p><h2>Building the static website</h2><p>Once you are done tweaking the site and you want to generate the production static site, you will call</p><p>At this point you can check that it all works as you expect by starting a local Web Server using</p><p>which will render the site as close as possible to how you will see it in production.</p><h2>Deployment</h2><p>Once you build the site using gatsby build, all you need to do is to deploy the result contained in the public folder.</p><p>Depending on the solution you choose, you\u2019ll need different steps here, but generally you\u2019ll push to a Git repository and let the Git post-commit hooks do the job of deploying. Here are some great guides for some popular hosting platforms where you can deploy Gatsby.</p><h1>Wrapping up</h1><p>I hope this book has helped you get started with React, and maybe it gave you a head start in exploring some of the most advanced aspects of React programming. That\u2019s my hope, at least.</p><p>You can get this ebook in PDF, ePub and Mobi format at reacthandbook.com</p>", "tags": ["JavaScript", "React", "Tech", "Programming", "Technology"]}]}